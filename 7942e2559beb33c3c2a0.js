(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\@pixi\\prepare\\lib\\prepare.es"],{"./node_modules/@pixi/prepare/lib/prepare.es.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{BasePrepare:()=>g,CountLimiter:()=>l,Prepare:()=>H,TimeLimiter:()=>b});var r=i("./node_modules/@pixi/settings/lib/settings.es.js"),s=i("./node_modules/@pixi/core/lib/core.es.js"),o=i("./node_modules/@pixi/graphics/lib/graphics.es.js"),n=i("./node_modules/@pixi/ticker/lib/ticker.es.js"),u=i("./node_modules/@pixi/display/lib/display.es.js"),a=i("./node_modules/@pixi/text/lib/text.es.js");r.settings.UPLOADS_PER_FRAME=4;var h=function(e,t){return(h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)};var l=function(){function e(e){this.maxItemsPerFrame=e,this.itemsLeft=0}return e.prototype.beginFrame=function(){this.itemsLeft=this.maxItemsPerFrame},e.prototype.allowedToUpload=function(){return this.itemsLeft-- >0},e}();function p(e,t){var i=!1;if(e&&e._textures&&e._textures.length)for(var r=0;r<e._textures.length;r++)if(e._textures[r]instanceof s.Texture){var o=e._textures[r].baseTexture;-1===t.indexOf(o)&&(t.push(o),i=!0)}return i}function c(e,t){if(e.baseTexture instanceof s.BaseTexture){var i=e.baseTexture;return-1===t.indexOf(i)&&t.push(i),!0}return!1}function d(e,t){if(e._texture&&e._texture instanceof s.Texture){var i=e._texture.baseTexture;return-1===t.indexOf(i)&&t.push(i),!0}return!1}function f(e,t){return t instanceof a.Text&&(t.updateText(!0),!0)}function x(e,t){if(t instanceof a.TextStyle){var i=t.toFontString();return a.TextMetrics.measureFont(i),!0}return!1}function k(e,t){if(e instanceof a.Text){-1===t.indexOf(e.style)&&t.push(e.style),-1===t.indexOf(e)&&t.push(e);var i=e._texture.baseTexture;return-1===t.indexOf(i)&&t.push(i),!0}return!1}function m(e,t){return e instanceof a.TextStyle&&(-1===t.indexOf(e)&&t.push(e),!0)}var g=function(){function e(e){var t=this;this.limiter=new l(r.settings.UPLOADS_PER_FRAME),this.renderer=e,this.uploadHookHelper=null,this.queue=[],this.addHooks=[],this.uploadHooks=[],this.completes=[],this.ticking=!1,this.delayedTick=function(){t.queue&&t.prepareItems()},this.registerFindHook(k),this.registerFindHook(m),this.registerFindHook(p),this.registerFindHook(c),this.registerFindHook(d),this.registerUploadHook(f),this.registerUploadHook(x)}return e.prototype.upload=function(e,t){"function"==typeof e&&(t=e,e=null),e&&this.add(e),this.queue.length?(t&&this.completes.push(t),this.ticking||(this.ticking=!0,n.Ticker.system.addOnce(this.tick,this,n.UPDATE_PRIORITY.UTILITY))):t&&t()},e.prototype.tick=function(){setTimeout(this.delayedTick,0)},e.prototype.prepareItems=function(){for(this.limiter.beginFrame();this.queue.length&&this.limiter.allowedToUpload();){var e=this.queue[0],t=!1;if(e&&!e._destroyed)for(var i=0,r=this.uploadHooks.length;i<r;i++)if(this.uploadHooks[i](this.uploadHookHelper,e)){this.queue.shift(),t=!0;break}t||this.queue.shift()}if(this.queue.length)n.Ticker.system.addOnce(this.tick,this,n.UPDATE_PRIORITY.UTILITY);else{this.ticking=!1;var s=this.completes.slice(0);this.completes.length=0;for(i=0,r=s.length;i<r;i++)s[i]()}},e.prototype.registerFindHook=function(e){return e&&this.addHooks.push(e),this},e.prototype.registerUploadHook=function(e){return e&&this.uploadHooks.push(e),this},e.prototype.add=function(e){for(var t=0,i=this.addHooks.length;t<i&&!this.addHooks[t](e,this.queue);t++);if(e instanceof u.Container)for(t=e.children.length-1;t>=0;t--)this.add(e.children[t]);return this},e.prototype.destroy=function(){this.ticking&&n.Ticker.system.remove(this.tick,this),this.ticking=!1,this.addHooks=null,this.uploadHooks=null,this.renderer=null,this.completes=null,this.queue=null,this.limiter=null,this.uploadHookHelper=null},e}();function T(e,t){return t instanceof s.BaseTexture&&(t._glTextures[e.CONTEXT_UID]||e.texture.bind(t),!0)}function y(e,t){if(!(t instanceof o.Graphics))return!1;var i=t.geometry;t.finishPoly(),i.updateBatches();for(var r=i.batches,s=0;s<r.length;s++){var n=r[s].style.texture;n&&T(e,n.baseTexture)}return i.batchable||e.geometry.bind(i,t._resolveDirectShader(e)),!0}function _(e,t){return e instanceof o.Graphics&&(t.push(e),!0)}var H=function(e){function t(t){var i=e.call(this,t)||this;return i.uploadHookHelper=i.renderer,i.registerFindHook(_),i.registerUploadHook(T),i.registerUploadHook(y),i}return function(e,t){function i(){this.constructor=e}h(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}(t,e),t}(g),b=function(){function e(e){this.maxMilliseconds=e,this.frameStart=0}return e.prototype.beginFrame=function(){this.frameStart=Date.now()},e.prototype.allowedToUpload=function(){return Date.now()-this.frameStart<this.maxMilliseconds},e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aHQxMS8uL25vZGVfbW9kdWxlcy9AcGl4aS9wcmVwYXJlL2xpYi9wcmVwYXJlLmVzLmpzIl0sIm5hbWVzIjpbInNldHRpbmdzIiwiZXh0ZW5kU3RhdGljcyIsImQiLCJiIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIkNvdW50TGltaXRlciIsIm1heEl0ZW1zUGVyRnJhbWUiLCJ0aGlzIiwiaXRlbXNMZWZ0IiwicHJvdG90eXBlIiwiYmVnaW5GcmFtZSIsImFsbG93ZWRUb1VwbG9hZCIsImZpbmRNdWx0aXBsZUJhc2VUZXh0dXJlcyIsIml0ZW0iLCJxdWV1ZSIsInJlc3VsdCIsIl90ZXh0dXJlcyIsImxlbmd0aCIsImkiLCJUZXh0dXJlIiwiYmFzZVRleHR1cmUiLCJpbmRleE9mIiwicHVzaCIsImZpbmRCYXNlVGV4dHVyZSIsIkJhc2VUZXh0dXJlIiwidGV4dHVyZSIsImZpbmRUZXh0dXJlIiwiX3RleHR1cmUiLCJkcmF3VGV4dCIsIl9oZWxwZXIiLCJUZXh0IiwidXBkYXRlVGV4dCIsImNhbGN1bGF0ZVRleHRTdHlsZSIsIlRleHRTdHlsZSIsImZvbnQiLCJ0b0ZvbnRTdHJpbmciLCJUZXh0TWV0cmljcyIsImZpbmRUZXh0Iiwic3R5bGUiLCJmaW5kVGV4dFN0eWxlIiwiQmFzZVByZXBhcmUiLCJyZW5kZXJlciIsIl90aGlzIiwibGltaXRlciIsInVwbG9hZEhvb2tIZWxwZXIiLCJhZGRIb29rcyIsInVwbG9hZEhvb2tzIiwiY29tcGxldGVzIiwidGlja2luZyIsImRlbGF5ZWRUaWNrIiwicHJlcGFyZUl0ZW1zIiwicmVnaXN0ZXJGaW5kSG9vayIsInJlZ2lzdGVyVXBsb2FkSG9vayIsInVwbG9hZCIsImRvbmUiLCJhZGQiLCJUaWNrZXIiLCJ0aWNrIiwiVVBEQVRFX1BSSU9SSVRZIiwic2V0VGltZW91dCIsInVwbG9hZGVkIiwiX2Rlc3Ryb3llZCIsImxlbiIsInNoaWZ0Iiwic2xpY2UiLCJhZGRIb29rIiwidXBsb2FkSG9vayIsIkNvbnRhaW5lciIsImNoaWxkcmVuIiwiZGVzdHJveSIsInVwbG9hZEJhc2VUZXh0dXJlcyIsIl9nbFRleHR1cmVzIiwiQ09OVEVYVF9VSUQiLCJiaW5kIiwidXBsb2FkR3JhcGhpY3MiLCJHcmFwaGljcyIsImdlb21ldHJ5IiwiZmluaXNoUG9seSIsInVwZGF0ZUJhdGNoZXMiLCJiYXRjaGVzIiwiYmF0Y2hhYmxlIiwiX3Jlc29sdmVEaXJlY3RTaGFkZXIiLCJmaW5kR3JhcGhpY3MiLCJQcmVwYXJlIiwiX3N1cGVyIiwiY2FsbCIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2V4dGVuZHMiLCJUaW1lTGltaXRlciIsIm1heE1pbGxpc2Vjb25kcyIsImZyYW1lU3RhcnQiLCJEYXRlIiwibm93Il0sIm1hcHBpbmdzIjoibW5CQXVCQSxFQUFBQSxTQUFBLGtCQUE2QixFQWtCN0IsSUFBSUMsRUFBZ0IsU0FBU0MsRUFBR0MsR0FJNUIsT0FIQUYsRUFBZ0JHLE9BQU9DLGdCQUNsQixDQUFFQyxVQUFXLGNBQWdCQyxPQUFTLFNBQVVMLEVBQUdDLEdBQUtELEVBQUVJLFVBQVlILElBQ3ZFLFNBQVVELEVBQUdDLEdBQUssSUFBSyxJQUFJSyxLQUFLTCxFQUFTQSxFQUFFTSxlQUFlRCxLQUFNTixFQUFFTSxHQUFLTCxFQUFFSyxNQUN4RE4sRUFBR0MsSUFnQjVCLElBQUlPLEVBQThCLFdBSTlCLFNBQVNBLEVBQWFDLEdBTWxCQyxLQUFLRCxpQkFBbUJBLEVBTXhCQyxLQUFLQyxVQUFZLEVBZXJCLE9BVkFILEVBQWFJLFVBQVVDLFdBQWEsV0FDaENILEtBQUtDLFVBQVlELEtBQUtELGtCQU0xQkQsRUFBYUksVUFBVUUsZ0JBQWtCLFdBQ3JDLE9BQU9KLEtBQUtDLGFBQWMsR0FFdkJILEVBL0JzQixHQTBDakMsU0FBU08sRUFBeUJDLEVBQU1DLEdBQ3BDLElBQUlDLEdBQVMsRUFFYixHQUFJRixHQUFRQSxFQUFLRyxXQUFhSCxF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QUFBOEQsV0FDaEI3RCxFQUFNUSxLQUFLVCxJQUNKLEdBbUNmLElBQUlzRSxFQUF5QixTQUFVQyxHQUtuQyxTQUFTRCxFQUFRMUMsR0FDYixJQUFJQyxFQUFRMEMsRUFBT0MsS0FBSzlFLEtBQU1rQyxJQUFhbEMsS0FNM0MsT0FMQW1DLEVBQU1FLGlCQUFtQkYsRUFBTUQsU0FFL0JDLEVBQU1TLGlCQUFpQitCLEdBQ3ZCeEMsRUFBTVUsbUJBQW1Ca0IsR0FDekI1QixFQUFNVSxtQkFBbUJzQixHQUNsQmhDLEVBRVgsT0E1aEJKLFNBQW1CN0MsRUFBR0MsR0FFbEIsU0FBU3dGLElBQU8vRSxLQUFLZ0YsWUFBYzFGLEVBRG5DRCxFQUFjQyxFQUFHQyxHQUVqQkQsRUFBRVksVUFBa0IsT0FBTlgsRUFBYUMsT0FBT3lGLE9BQU8xRixJQUFNd0YsRUFBRzdFLFVBQVlYLEVBQUVXLFVBQVcsSUFBSTZFLEdBNGdCL0VHLENBQVVOLEVBQVNDLEdBYVpELEVBZGlCLENBZTFCM0MsR0FTRWtELEVBQTZCLFdBSTdCLFNBQVNBLEVBQVlDLEdBTWpCcEYsS0FBS29GLGdCQUFrQkEsRUFNdkJwRixLQUFLcUYsV0FBYSxFQWV0QixPQVZBRixFQUFZakYsVUFBVUMsV0FBYSxXQUMvQkgsS0FBS3FGLFdBQWFDLEtBQUtDLE9BTTNCSixFQUFZakYsVUFBVUUsZ0JBQWtCLFdBQ3BDLE9BQU9rRixLQUFLQyxNQUFRdkYsS0FBS3FGLFdBQWFyRixLQUFLb0YsaUJBRXhDRCxFQS9CcUIiLCJmaWxlIjoiNzk0MmUyNTU5YmViMzNjM2MyYTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBwaXhpL3ByZXBhcmUgLSB2NS4zLjdcbiAqIENvbXBpbGVkIFR1ZSwgMjkgRGVjIDIwMjAgMTk6MzA6MTEgVVRDXG4gKlxuICogQHBpeGkvcHJlcGFyZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbmltcG9ydCB7IHNldHRpbmdzIH0gZnJvbSAnQHBpeGkvc2V0dGluZ3MnO1xuaW1wb3J0IHsgVGV4dHVyZSwgQmFzZVRleHR1cmUgfSBmcm9tICdAcGl4aS9jb3JlJztcbmltcG9ydCB7IEdyYXBoaWNzIH0gZnJvbSAnQHBpeGkvZ3JhcGhpY3MnO1xuaW1wb3J0IHsgVGlja2VyLCBVUERBVEVfUFJJT1JJVFkgfSBmcm9tICdAcGl4aS90aWNrZXInO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnQHBpeGkvZGlzcGxheSc7XG5pbXBvcnQgeyBUZXh0LCBUZXh0U3R5bGUsIFRleHRNZXRyaWNzIH0gZnJvbSAnQHBpeGkvdGV4dCc7XG5cbi8qKlxuICogRGVmYXVsdCBudW1iZXIgb2YgdXBsb2FkcyBwZXIgZnJhbWUgdXNpbmcgcHJlcGFyZSBwbHVnaW4uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBJWEkuc2V0dGluZ3NcbiAqIEBuYW1lIFVQTE9BRFNfUEVSX0ZSQU1FXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHQgNFxuICovXG5zZXR0aW5ncy5VUExPQURTX1BFUl9GUkFNRSA9IDQ7XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSB7IGlmIChiLmhhc093blByb3BlcnR5KHApKSB7IGRbcF0gPSBiW3BdOyB9IH0gfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxuXG4vKipcbiAqIENvdW50TGltaXRlciBsaW1pdHMgdGhlIG51bWJlciBvZiBpdGVtcyBoYW5kbGVkIGJ5IGEge0BsaW5rIFBJWEkuQmFzZVByZXBhcmV9IHRvIGEgc3BlY2lmaWVkXG4gKiBudW1iZXIgb2YgaXRlbXMgcGVyIGZyYW1lLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIENvdW50TGltaXRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4SXRlbXNQZXJGcmFtZSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0aGF0IGNhbiBiZSBwcmVwYXJlZCBlYWNoIGZyYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIENvdW50TGltaXRlcihtYXhJdGVtc1BlckZyYW1lKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgaXRlbXMgdGhhdCBjYW4gYmUgcHJlcGFyZWQgZWFjaCBmcmFtZS5cbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWF4SXRlbXNQZXJGcmFtZSA9IG1heEl0ZW1zUGVyRnJhbWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIHRoYXQgY2FuIGJlIHByZXBhcmVkIGluIHRoZSBjdXJyZW50IGZyYW1lLlxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pdGVtc0xlZnQgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgYW55IGNvdW50aW5nIHByb3BlcnRpZXMgdG8gc3RhcnQgZnJlc2ggb24gYSBuZXcgZnJhbWUuXG4gICAgICovXG4gICAgQ291bnRMaW1pdGVyLnByb3RvdHlwZS5iZWdpbkZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLml0ZW1zTGVmdCA9IHRoaXMubWF4SXRlbXNQZXJGcmFtZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB0byBzZWUgaWYgYW5vdGhlciBpdGVtIGNhbiBiZSB1cGxvYWRlZC4gVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb25jZSBwZXIgaXRlbS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBJZiB0aGUgaXRlbSBpcyBhbGxvd2VkIHRvIGJlIHVwbG9hZGVkLlxuICAgICAqL1xuICAgIENvdW50TGltaXRlci5wcm90b3R5cGUuYWxsb3dlZFRvVXBsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc0xlZnQtLSA+IDA7XG4gICAgfTtcbiAgICByZXR1cm4gQ291bnRMaW1pdGVyO1xufSgpKTtcblxuLyoqXG4gKiBCdWlsdC1pbiBob29rIHRvIGZpbmQgbXVsdGlwbGUgdGV4dHVyZXMgZnJvbSBvYmplY3RzIGxpa2UgQW5pbWF0ZWRTcHJpdGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gaXRlbSAtIERpc3BsYXkgb2JqZWN0IHRvIGNoZWNrXG4gKiBAcGFyYW0ge0FycmF5PCo+fSBxdWV1ZSAtIENvbGxlY3Rpb24gb2YgaXRlbXMgdG8gdXBsb2FkXG4gKiBAcmV0dXJuIHtib29sZWFufSBpZiBhIFBJWEkuVGV4dHVyZSBvYmplY3Qgd2FzIGZvdW5kLlxuICovXG5mdW5jdGlvbiBmaW5kTXVsdGlwbGVCYXNlVGV4dHVyZXMoaXRlbSwgcXVldWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgLy8gT2JqZWN0cyB3aXRoIG11bHRpcGxlIHRleHR1cmVzXG4gICAgaWYgKGl0ZW0gJiYgaXRlbS5fdGV4dHVyZXMgJiYgaXRlbS5fdGV4dHVyZXMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbS5fdGV4dHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpdGVtLl90ZXh0dXJlc1tpXSBpbnN0YW5jZW9mIFRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmFzZVRleHR1cmUgPSBpdGVtLl90ZXh0dXJlc1tpXS5iYXNlVGV4dHVyZTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUuaW5kZXhPZihiYXNlVGV4dHVyZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goYmFzZVRleHR1cmUpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBCdWlsdC1pbiBob29rIHRvIGZpbmQgQmFzZVRleHR1cmVzIGZyb20gVGV4dHVyZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtQSVhJLlRleHR1cmV9IGl0ZW0gLSBEaXNwbGF5IG9iamVjdCB0byBjaGVja1xuICogQHBhcmFtIHtBcnJheTwqPn0gcXVldWUgLSBDb2xsZWN0aW9uIG9mIGl0ZW1zIHRvIHVwbG9hZFxuICogQHJldHVybiB7Ym9vbGVhbn0gaWYgYSBQSVhJLlRleHR1cmUgb2JqZWN0IHdhcyBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gZmluZEJhc2VUZXh0dXJlKGl0ZW0sIHF1ZXVlKSB7XG4gICAgaWYgKGl0ZW0uYmFzZVRleHR1cmUgaW5zdGFuY2VvZiBCYXNlVGV4dHVyZSkge1xuICAgICAgICB2YXIgdGV4dHVyZSA9IGl0ZW0uYmFzZVRleHR1cmU7XG4gICAgICAgIGlmIChxdWV1ZS5pbmRleE9mKHRleHR1cmUpID09PSAtMSkge1xuICAgICAgICAgICAgcXVldWUucHVzaCh0ZXh0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBCdWlsdC1pbiBob29rIHRvIGZpbmQgdGV4dHVyZXMgZnJvbSBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gaXRlbSAtIERpc3BsYXkgb2JqZWN0IHRvIGNoZWNrXG4gKiBAcGFyYW0ge0FycmF5PCo+fSBxdWV1ZSAtIENvbGxlY3Rpb24gb2YgaXRlbXMgdG8gdXBsb2FkXG4gKiBAcmV0dXJuIHtib29sZWFufSBpZiBhIFBJWEkuVGV4dHVyZSBvYmplY3Qgd2FzIGZvdW5kLlxuICovXG5mdW5jdGlvbiBmaW5kVGV4dHVyZShpdGVtLCBxdWV1ZSkge1xuICAgIGlmIChpdGVtLl90ZXh0dXJlICYmIGl0ZW0uX3RleHR1cmUgaW5zdGFuY2VvZiBUZXh0dXJlKSB7XG4gICAgICAgIHZhciB0ZXh0dXJlID0gaXRlbS5fdGV4dHVyZS5iYXNlVGV4dHVyZTtcbiAgICAgICAgaWYgKHF1ZXVlLmluZGV4T2YodGV4dHVyZSkgPT09IC0xKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKHRleHR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEJ1aWx0LWluIGhvb2sgdG8gZHJhdyBQSVhJLlRleHQgdG8gaXRzIHRleHR1cmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UElYSS5BYnN0cmFjdFJlbmRlcmVyfFBJWEkuQmFzZVByZXBhcmV9IGhlbHBlciAtIE5vdCB1c2VkIGJ5IHRoaXMgdXBsb2FkIGhhbmRsZXJcbiAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBpdGVtIC0gSXRlbSB0byBjaGVja1xuICogQHJldHVybiB7Ym9vbGVhbn0gSWYgaXRlbSB3YXMgdXBsb2FkZWQuXG4gKi9cbmZ1bmN0aW9uIGRyYXdUZXh0KF9oZWxwZXIsIGl0ZW0pIHtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFRleHQpIHtcbiAgICAgICAgLy8gdXBkYXRpbmcgdGV4dCB3aWxsIHJldHVybiBlYXJseSBpZiBpdCBpcyBub3QgZGlydHlcbiAgICAgICAgaXRlbS51cGRhdGVUZXh0KHRydWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBCdWlsdC1pbiBob29rIHRvIGNhbGN1bGF0ZSBhIHRleHQgc3R5bGUgZm9yIGEgUElYSS5UZXh0IG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtQSVhJLkFic3RyYWN0UmVuZGVyZXJ8UElYSS5CYXNlUHJlcGFyZX0gaGVscGVyIC0gTm90IHVzZWQgYnkgdGhpcyB1cGxvYWQgaGFuZGxlclxuICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IGl0ZW0gLSBJdGVtIHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtib29sZWFufSBJZiBpdGVtIHdhcyB1cGxvYWRlZC5cbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlVGV4dFN0eWxlKF9oZWxwZXIsIGl0ZW0pIHtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFRleHRTdHlsZSkge1xuICAgICAgICB2YXIgZm9udCA9IGl0ZW0udG9Gb250U3RyaW5nKCk7XG4gICAgICAgIFRleHRNZXRyaWNzLm1lYXN1cmVGb250KGZvbnQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBCdWlsdC1pbiBob29rIHRvIGZpbmQgVGV4dCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gaXRlbSAtIERpc3BsYXkgb2JqZWN0IHRvIGNoZWNrXG4gKiBAcGFyYW0ge0FycmF5PCo+fSBxdWV1ZSAtIENvbGxlY3Rpb24gb2YgaXRlbXMgdG8gdXBsb2FkXG4gKiBAcmV0dXJuIHtib29sZWFufSBpZiBhIFBJWEkuVGV4dCBvYmplY3Qgd2FzIGZvdW5kLlxuICovXG5mdW5jdGlvbiBmaW5kVGV4dChpdGVtLCBxdWV1ZSkge1xuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgVGV4dCkge1xuICAgICAgICAvLyBwdXNoIHRoZSB0ZXh0IHN0eWxlIHRvIHByZXBhcmUgaXQgLSB0aGlzIGNhbiBiZSByZWFsbHkgZXhwZW5zaXZlXG4gICAgICAgIGlmIChxdWV1ZS5pbmRleE9mKGl0ZW0uc3R5bGUpID09PSAtMSkge1xuICAgICAgICAgICAgcXVldWUucHVzaChpdGVtLnN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhbHNvIHB1c2ggdGhlIHRleHQgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIHJlbmRlciBpdCAodG8gY2FudmFzL3RleHR1cmUpIGlmIG5lZWRlZFxuICAgICAgICBpZiAocXVldWUuaW5kZXhPZihpdGVtKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWxzbyBwdXNoIHRoZSBUZXh0J3MgdGV4dHVyZSBmb3IgdXBsb2FkIHRvIEdQVVxuICAgICAgICB2YXIgdGV4dHVyZSA9IGl0ZW0uX3RleHR1cmUuYmFzZVRleHR1cmU7XG4gICAgICAgIGlmIChxdWV1ZS5pbmRleE9mKHRleHR1cmUpID09PSAtMSkge1xuICAgICAgICAgICAgcXVldWUucHVzaCh0ZXh0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBCdWlsdC1pbiBob29rIHRvIGZpbmQgVGV4dFN0eWxlIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UElYSS5UZXh0U3R5bGV9IGl0ZW0gLSBEaXNwbGF5IG9iamVjdCB0byBjaGVja1xuICogQHBhcmFtIHtBcnJheTwqPn0gcXVldWUgLSBDb2xsZWN0aW9uIG9mIGl0ZW1zIHRvIHVwbG9hZFxuICogQHJldHVybiB7Ym9vbGVhbn0gaWYgYSBQSVhJLlRleHRTdHlsZSBvYmplY3Qgd2FzIGZvdW5kLlxuICovXG5mdW5jdGlvbiBmaW5kVGV4dFN0eWxlKGl0ZW0sIHF1ZXVlKSB7XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBUZXh0U3R5bGUpIHtcbiAgICAgICAgaWYgKHF1ZXVlLmluZGV4T2YoaXRlbSkgPT09IC0xKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFRoZSBwcmVwYXJlIG1hbmFnZXIgcHJvdmlkZXMgZnVuY3Rpb25hbGl0eSB0byB1cGxvYWQgY29udGVudCB0byB0aGUgR1BVLlxuICpcbiAqIEJhc2VQcmVwYXJlIGhhbmRsZXMgYmFzaWMgcXVldWluZyBmdW5jdGlvbmFsaXR5IGFuZCBpcyBleHRlbmRlZCBieVxuICoge0BsaW5rIFBJWEkuUHJlcGFyZX0gYW5kIHtAbGluayBQSVhJLkNhbnZhc1ByZXBhcmV9XG4gKiB0byBwcm92aWRlIHByZXBhcmF0aW9uIGNhcGFiaWxpdGllcyBzcGVjaWZpYyB0byB0aGVpciByZXNwZWN0aXZlIHJlbmRlcmVycy5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ3JlYXRlIGEgc3ByaXRlXG4gKiBjb25zdCBzcHJpdGUgPSBQSVhJLlNwcml0ZS5mcm9tKCdzb21ldGhpbmcucG5nJyk7XG4gKlxuICogLy8gTG9hZCBvYmplY3QgaW50byBHUFVcbiAqIGFwcC5yZW5kZXJlci5wbHVnaW5zLnByZXBhcmUudXBsb2FkKHNwcml0ZSwgKCkgPT4ge1xuICpcbiAqICAgICAvL1RleHR1cmUocykgaGFzIGJlZW4gdXBsb2FkZWQgdG8gR1BVXG4gKiAgICAgYXBwLnN0YWdlLmFkZENoaWxkKHNwcml0ZSk7XG4gKlxuICogfSlcbiAqXG4gKiBAYWJzdHJhY3RcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIEJhc2VQcmVwYXJlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UElYSS5BYnN0cmFjdFJlbmRlcmVyfSByZW5kZXJlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHJlbmRlcmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gQmFzZVByZXBhcmUocmVuZGVyZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsaW1pdGVyIHRvIGJlIHVzZWQgdG8gY29udHJvbCBob3cgcXVpY2tseSBpdGVtcyBhcmUgcHJlcGFyZWQuXG4gICAgICAgICAqIEB0eXBlIHtQSVhJLkNvdW50TGltaXRlcnxQSVhJLlRpbWVMaW1pdGVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saW1pdGVyID0gbmV3IENvdW50TGltaXRlcihzZXR0aW5ncy5VUExPQURTX1BFUl9GUkFNRSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHJlbmRlcmVyLlxuICAgICAgICAgKiBAdHlwZSB7UElYSS5BYnN0cmFjdFJlbmRlcmVyfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgb25seSByZWFsIGRpZmZlcmVuY2UgYmV0d2VlbiBDYW52YXNQcmVwYXJlIGFuZCBQcmVwYXJlIGlzIHdoYXQgdGhleSBwYXNzXG4gICAgICAgICAqIHRvIHVwbG9hZCBob29rcy4gVGhhdCBkaWZmZXJlbnQgcGFyYW1ldGVyIGlzIHN0b3JlZCBoZXJlLlxuICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwbG9hZEhvb2tIZWxwZXIgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiBpdGVtcyB0byB1cGxvYWRzIGF0IG9uY2UuXG4gICAgICAgICAqIEB0eXBlIHtBcnJheTwqPn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbGxlY3Rpb24gb2YgYWRkaXRpb25hbCBob29rcyBmb3IgZmluZGluZyBhc3NldHMuXG4gICAgICAgICAqIEB0eXBlIHtBcnJheTxGdW5jdGlvbj59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFkZEhvb2tzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2xsZWN0aW9uIG9mIGFkZGl0aW9uYWwgaG9va3MgZm9yIHByb2Nlc3NpbmcgYXNzZXRzLlxuICAgICAgICAgKiBAdHlwZSB7QXJyYXk8RnVuY3Rpb24+fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGxvYWRIb29rcyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGJhY2sgdG8gY2FsbCBhZnRlciBjb21wbGV0ZWQuXG4gICAgICAgICAqIEB0eXBlIHtBcnJheTxGdW5jdGlvbj59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbXBsZXRlcyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgcHJlcGFyZSBpcyB0aWNraW5nIChydW5uaW5nKS5cbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqICdib3VuZCcgY2FsbCBmb3IgcHJlcGFyZUl0ZW1zKCkuXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVsYXllZFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB1bmxpa2VseSwgYnV0IGluIGNhc2Ugd2Ugd2VyZSBkZXN0cm95ZWQgYmV0d2VlbiB0aWNrKCkgYW5kIGRlbGF5ZWRUaWNrKClcbiAgICAgICAgICAgIGlmICghX3RoaXMucXVldWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5wcmVwYXJlSXRlbXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gaG9va3MgdG8gZmluZCB0aGUgY29ycmVjdCB0ZXh0dXJlXG4gICAgICAgIHRoaXMucmVnaXN0ZXJGaW5kSG9vayhmaW5kVGV4dCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJGaW5kSG9vayhmaW5kVGV4dFN0eWxlKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckZpbmRIb29rKGZpbmRNdWx0aXBsZUJhc2VUZXh0dXJlcyk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJGaW5kSG9vayhmaW5kQmFzZVRleHR1cmUpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRmluZEhvb2soZmluZFRleHR1cmUpO1xuICAgICAgICAvLyB1cGxvYWQgaG9va3NcbiAgICAgICAgdGhpcy5yZWdpc3RlclVwbG9hZEhvb2soZHJhd1RleHQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyVXBsb2FkSG9vayhjYWxjdWxhdGVUZXh0U3R5bGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgYWxsIHRoZSB0ZXh0dXJlcyBhbmQgZ3JhcGhpY3MgdG8gdGhlIEdQVS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258UElYSS5EaXNwbGF5T2JqZWN0fFBJWEkuQ29udGFpbmVyfFBJWEkuQmFzZVRleHR1cmV8UElYSS5UZXh0dXJlfFBJWEkuR3JhcGhpY3N8UElYSS5UZXh0fSBpdGVtIC1cbiAgICAgKiAgICAgICAgRWl0aGVyIHRoZSBjb250YWluZXIgb3IgZGlzcGxheSBvYmplY3QgdG8gc2VhcmNoIGZvciBpdGVtcyB0byB1cGxvYWQsIHRoZSBpdGVtcyB0byB1cGxvYWQgdGhlbXNlbHZlcyxcbiAgICAgKiAgICAgICAgb3IgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLCBpZiBpdGVtcyBoYXZlIGJlZW4gYWRkZWQgdXNpbmcgYHByZXBhcmUuYWRkYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZG9uZV0gLSBPcHRpb25hbCBjYWxsYmFjayB3aGVuIGFsbCBxdWV1ZWQgdXBsb2FkcyBoYXZlIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIEJhc2VQcmVwYXJlLnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbiAoaXRlbSwgZG9uZSkge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGRvbmUgPSBpdGVtO1xuICAgICAgICAgICAgaXRlbSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYSBkaXNwbGF5IG9iamVjdCwgc2VhcmNoIGZvciBpdGVtc1xuICAgICAgICAvLyB0aGF0IHdlIGNvdWxkIHVwbG9hZFxuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgdGhpcy5hZGQoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRoZSBpdGVtcyBmb3IgdXBsb2FkIGZyb20gdGhlIGRpc3BsYXlcbiAgICAgICAgaWYgKHRoaXMucXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVzLnB1c2goZG9uZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMudGlja2luZykge1xuICAgICAgICAgICAgICAgIHRoaXMudGlja2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgVGlja2VyLnN5c3RlbS5hZGRPbmNlKHRoaXMudGljaywgdGhpcywgVVBEQVRFX1BSSU9SSVRZLlVUSUxJVFkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRpY2sgdXBkYXRlXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEJhc2VQcmVwYXJlLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuZGVsYXllZFRpY2ssIDApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWN0dWFsbHkgcHJlcGFyZSBpdGVtcy4gVGhpcyBpcyBoYW5kbGVkIG91dHNpZGUgb2YgdGhlIHRpY2sgYmVjYXVzZSBpdCB3aWxsIHRha2UgYSB3aGlsZVxuICAgICAqIGFuZCB3ZSBkbyBOT1Qgd2FudCB0byBibG9jayB0aGUgY3VycmVudCBhbmltYXRpb24gZnJhbWUgZnJvbSByZW5kZXJpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEJhc2VQcmVwYXJlLnByb3RvdHlwZS5wcmVwYXJlSXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGltaXRlci5iZWdpbkZyYW1lKCk7XG4gICAgICAgIC8vIFVwbG9hZCB0aGUgZ3JhcGhpY3NcbiAgICAgICAgd2hpbGUgKHRoaXMucXVldWUubGVuZ3RoICYmIHRoaXMubGltaXRlci5hbGxvd2VkVG9VcGxvYWQoKSkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLnF1ZXVlWzBdO1xuICAgICAgICAgICAgdmFyIHVwbG9hZGVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoaXRlbSAmJiAhaXRlbS5fZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMudXBsb2FkSG9va3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudXBsb2FkSG9va3NbaV0odGhpcy51cGxvYWRIb29rSGVscGVyLCBpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXVwbG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdlJ3JlIGZpbmlzaGVkXG4gICAgICAgIGlmICghdGhpcy5xdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMudGlja2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGNvbXBsZXRlcyA9IHRoaXMuY29tcGxldGVzLnNsaWNlKDApO1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjb21wbGV0ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZXNbaV0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBub3QgZmluaXNoZWQsIG9uIHRoZSBuZXh0IHJBRiBkbyB0aGlzIGFnYWluXG4gICAgICAgICAgICBUaWNrZXIuc3lzdGVtLmFkZE9uY2UodGhpcy50aWNrLCB0aGlzLCBVUERBVEVfUFJJT1JJVFkuVVRJTElUWSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgaG9va3MgZm9yIGZpbmRpbmcgaXRlbXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhZGRIb29rIC0gRnVuY3Rpb24gY2FsbCB0aGF0IHRha2VzIHR3byBwYXJhbWV0ZXJzOiBgaXRlbToqLCBxdWV1ZTpBcnJheWBcbiAgICAgKiAgICAgICAgICBmdW5jdGlvbiBtdXN0IHJldHVybiBgdHJ1ZWAgaWYgaXQgd2FzIGFibGUgdG8gYWRkIGl0ZW0gdG8gdGhlIHF1ZXVlLlxuICAgICAqIEByZXR1cm4ge3RoaXN9IEluc3RhbmNlIG9mIHBsdWdpbiBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgQmFzZVByZXBhcmUucHJvdG90eXBlLnJlZ2lzdGVyRmluZEhvb2sgPSBmdW5jdGlvbiAoYWRkSG9vaykge1xuICAgICAgICBpZiAoYWRkSG9vaykge1xuICAgICAgICAgICAgdGhpcy5hZGRIb29rcy5wdXNoKGFkZEhvb2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBob29rcyBmb3IgdXBsb2FkaW5nIGl0ZW1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBsb2FkSG9vayAtIEZ1bmN0aW9uIGNhbGwgdGhhdCB0YWtlcyB0d28gcGFyYW1ldGVyczogYHByZXBhcmU6Q2FudmFzUHJlcGFyZSwgaXRlbToqYCBhbmRcbiAgICAgKiAgICAgICAgICBmdW5jdGlvbiBtdXN0IHJldHVybiBgdHJ1ZWAgaWYgaXQgd2FzIGFibGUgdG8gaGFuZGxlIHVwbG9hZCBvZiBpdGVtLlxuICAgICAqIEByZXR1cm4ge3RoaXN9IEluc3RhbmNlIG9mIHBsdWdpbiBmb3IgY2hhaW5pbmcuXG4gICAgICovXG4gICAgQmFzZVByZXBhcmUucHJvdG90eXBlLnJlZ2lzdGVyVXBsb2FkSG9vayA9IGZ1bmN0aW9uICh1cGxvYWRIb29rKSB7XG4gICAgICAgIGlmICh1cGxvYWRIb29rKSB7XG4gICAgICAgICAgICB0aGlzLnVwbG9hZEhvb2tzLnB1c2godXBsb2FkSG9vayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYW51YWxseSBhZGQgYW4gaXRlbSB0byB0aGUgdXBsb2FkaW5nIHF1ZXVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R8UElYSS5Db250YWluZXJ8UElYSS5CYXNlVGV4dHVyZXxQSVhJLlRleHR1cmV8UElYSS5HcmFwaGljc3xQSVhJLlRleHR8Kn0gaXRlbSAtIE9iamVjdCB0b1xuICAgICAqICAgICAgICBhZGQgdG8gdGhlIHF1ZXVlXG4gICAgICogQHJldHVybiB7dGhpc30gSW5zdGFuY2Ugb2YgcGx1Z2luIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBCYXNlUHJlcGFyZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgLy8gQWRkIGFkZGl0aW9uYWwgaG9va3MgZm9yIGZpbmRpbmcgZWxlbWVudHMgb24gc3BlY2lhbFxuICAgICAgICAvLyB0eXBlcyBvZiBvYmplY3RzIHRoYXRcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuYWRkSG9va3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFkZEhvb2tzW2ldKGl0ZW0sIHRoaXMucXVldWUpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IGNoaWxkcmVuIHJlY3Vyc2l2ZWx5XG4gICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gaXRlbS5jaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGl0ZW0uY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHBsdWdpbiwgZG9uJ3QgdXNlIGFmdGVyIHRoaXMuXG4gICAgICpcbiAgICAgKi9cbiAgICBCYXNlUHJlcGFyZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudGlja2luZykge1xuICAgICAgICAgICAgVGlja2VyLnN5c3RlbS5yZW1vdmUodGhpcy50aWNrLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGRIb29rcyA9IG51bGw7XG4gICAgICAgIHRoaXMudXBsb2FkSG9va3MgPSBudWxsO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb21wbGV0ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLnF1ZXVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5saW1pdGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy51cGxvYWRIb29rSGVscGVyID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBCYXNlUHJlcGFyZTtcbn0oKSk7XG5cbi8qKlxuICogQnVpbHQtaW4gaG9vayB0byB1cGxvYWQgUElYSS5UZXh0dXJlIG9iamVjdHMgdG8gdGhlIEdQVS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtQSVhJLlJlbmRlcmVyfSByZW5kZXJlciAtIGluc3RhbmNlIG9mIHRoZSB3ZWJnbCByZW5kZXJlclxuICogQHBhcmFtIHtQSVhJLkJhc2VUZXh0dXJlfSBpdGVtIC0gSXRlbSB0byBjaGVja1xuICogQHJldHVybiB7Ym9vbGVhbn0gSWYgaXRlbSB3YXMgdXBsb2FkZWQuXG4gKi9cbmZ1bmN0aW9uIHVwbG9hZEJhc2VUZXh0dXJlcyhyZW5kZXJlciwgaXRlbSkge1xuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgQmFzZVRleHR1cmUpIHtcbiAgICAgICAgLy8gaWYgdGhlIHRleHR1cmUgYWxyZWFkeSBoYXMgYSBHTCB0ZXh0dXJlLCB0aGVuIHRoZSB0ZXh0dXJlIGhhcyBiZWVuIHByZXBhcmVkIG9yIHJlbmRlcmVkXG4gICAgICAgIC8vIGJlZm9yZSBub3cuIElmIHRoZSB0ZXh0dXJlIGNoYW5nZWQsIHRoZW4gdGhlIGNoYW5nZXIgc2hvdWxkIGJlIGNhbGxpbmcgdGV4dHVyZS51cGRhdGUoKSB3aGljaFxuICAgICAgICAvLyByZXVwbG9hZHMgdGhlIHRleHR1cmUgd2l0aG91dCBuZWVkIGZvciBwcmVwYXJpbmcgaXQgYWdhaW5cbiAgICAgICAgaWYgKCFpdGVtLl9nbFRleHR1cmVzW3JlbmRlcmVyLkNPTlRFWFRfVUlEXSkge1xuICAgICAgICAgICAgcmVuZGVyZXIudGV4dHVyZS5iaW5kKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEJ1aWx0LWluIGhvb2sgdG8gdXBsb2FkIFBJWEkuR3JhcGhpY3MgdG8gdGhlIEdQVS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtQSVhJLlJlbmRlcmVyfSByZW5kZXJlciAtIGluc3RhbmNlIG9mIHRoZSB3ZWJnbCByZW5kZXJlclxuICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IGl0ZW0gLSBJdGVtIHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtib29sZWFufSBJZiBpdGVtIHdhcyB1cGxvYWRlZC5cbiAqL1xuZnVuY3Rpb24gdXBsb2FkR3JhcGhpY3MocmVuZGVyZXIsIGl0ZW0pIHtcbiAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgR3JhcGhpY3MpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGdlb21ldHJ5ID0gaXRlbS5nZW9tZXRyeTtcbiAgICAvLyB1cGRhdGUgZGlydHkgZ3JhcGhpY3MgdG8gZ2V0IGJhdGNoZXNcbiAgICBpdGVtLmZpbmlzaFBvbHkoKTtcbiAgICBnZW9tZXRyeS51cGRhdGVCYXRjaGVzKCk7XG4gICAgdmFyIGJhdGNoZXMgPSBnZW9tZXRyeS5iYXRjaGVzO1xuICAgIC8vIHVwbG9hZCBhbGwgdGV4dHVyZXMgZm91bmQgaW4gc3R5bGVzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0ZXh0dXJlID0gYmF0Y2hlc1tpXS5zdHlsZS50ZXh0dXJlO1xuICAgICAgICBpZiAodGV4dHVyZSkge1xuICAgICAgICAgICAgdXBsb2FkQmFzZVRleHR1cmVzKHJlbmRlcmVyLCB0ZXh0dXJlLmJhc2VUZXh0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBpZiBpdHMgbm90IGJhdGNoYWJsZSAtIHVwZGF0ZSB2YW8gZm9yIHBhcnRpY3VsYXIgc2hhZGVyXG4gICAgaWYgKCFnZW9tZXRyeS5iYXRjaGFibGUpIHtcbiAgICAgICAgcmVuZGVyZXIuZ2VvbWV0cnkuYmluZChnZW9tZXRyeSwgaXRlbS5fcmVzb2x2ZURpcmVjdFNoYWRlcihyZW5kZXJlcikpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogQnVpbHQtaW4gaG9vayB0byBmaW5kIGdyYXBoaWNzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gaXRlbSAtIERpc3BsYXkgb2JqZWN0IHRvIGNoZWNrXG4gKiBAcGFyYW0ge0FycmF5PCo+fSBxdWV1ZSAtIENvbGxlY3Rpb24gb2YgaXRlbXMgdG8gdXBsb2FkXG4gKiBAcmV0dXJuIHtib29sZWFufSBpZiBhIFBJWEkuR3JhcGhpY3Mgb2JqZWN0IHdhcyBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gZmluZEdyYXBoaWNzKGl0ZW0sIHF1ZXVlKSB7XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBHcmFwaGljcykge1xuICAgICAgICBxdWV1ZS5wdXNoKGl0ZW0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBUaGUgcHJlcGFyZSBwbHVnaW4gcHJvdmlkZXMgcmVuZGVyZXItc3BlY2lmaWMgcGx1Z2lucyBmb3IgcHJlLXJlbmRlcmluZyBEaXNwbGF5T2JqZWN0cy4gVGhlc2UgcGx1Z2lucyBhcmUgdXNlZnVsIGZvclxuICogYXN5bmNocm9ub3VzbHkgcHJlcGFyaW5nIGFuZCB1cGxvYWRpbmcgdG8gdGhlIEdQVSBhc3NldHMsIHRleHR1cmVzLCBncmFwaGljcyB3YWl0aW5nIHRvIGJlIGRpc3BsYXllZC5cbiAqXG4gKiBEbyBub3QgaW5zdGFudGlhdGUgdGhpcyBwbHVnaW4gZGlyZWN0bHkuIEl0IGlzIGF2YWlsYWJsZSBmcm9tIHRoZSBgcmVuZGVyZXIucGx1Z2luc2AgcHJvcGVydHkuXG4gKiBTZWUge0BsaW5rIFBJWEkuQ2FudmFzUmVuZGVyZXIjcGx1Z2luc30gb3Ige0BsaW5rIFBJWEkuUmVuZGVyZXIjcGx1Z2luc30uXG4gKiBAZXhhbXBsZVxuICogLy8gQ3JlYXRlIGEgbmV3IGFwcGxpY2F0aW9uXG4gKiBjb25zdCBhcHAgPSBuZXcgUElYSS5BcHBsaWNhdGlvbigpO1xuICogZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhcHAudmlldyk7XG4gKlxuICogLy8gRG9uJ3Qgc3RhcnQgcmVuZGVyaW5nIHJpZ2h0IGF3YXlcbiAqIGFwcC5zdG9wKCk7XG4gKlxuICogLy8gY3JlYXRlIGEgZGlzcGxheSBvYmplY3RcbiAqIGNvbnN0IHJlY3QgPSBuZXcgUElYSS5HcmFwaGljcygpXG4gKiAgICAgLmJlZ2luRmlsbCgweDAwZmYwMClcbiAqICAgICAuZHJhd1JlY3QoNDAsIDQwLCAyMDAsIDIwMCk7XG4gKlxuICogLy8gQWRkIHRvIHRoZSBzdGFnZVxuICogYXBwLnN0YWdlLmFkZENoaWxkKHJlY3QpO1xuICpcbiAqIC8vIERvbid0IHN0YXJ0IHJlbmRlcmluZyB1bnRpbCB0aGUgZ3JhcGhpYyBpcyB1cGxvYWRlZCB0byB0aGUgR1BVXG4gKiBhcHAucmVuZGVyZXIucGx1Z2lucy5wcmVwYXJlLnVwbG9hZChhcHAuc3RhZ2UsICgpID0+IHtcbiAqICAgICBhcHAuc3RhcnQoKTtcbiAqIH0pO1xuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUElYSS5CYXNlUHJlcGFyZVxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFByZXBhcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFByZXBhcmUsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlcmVyfSByZW5kZXJlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHJlbmRlcmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gUHJlcGFyZShyZW5kZXJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCByZW5kZXJlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudXBsb2FkSG9va0hlbHBlciA9IF90aGlzLnJlbmRlcmVyO1xuICAgICAgICAvLyBBZGQgdGV4dHVyZXMgYW5kIGdyYXBoaWNzIHRvIHVwbG9hZFxuICAgICAgICBfdGhpcy5yZWdpc3RlckZpbmRIb29rKGZpbmRHcmFwaGljcyk7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyVXBsb2FkSG9vayh1cGxvYWRCYXNlVGV4dHVyZXMpO1xuICAgICAgICBfdGhpcy5yZWdpc3RlclVwbG9hZEhvb2sodXBsb2FkR3JhcGhpY3MpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBQcmVwYXJlO1xufShCYXNlUHJlcGFyZSkpO1xuXG4vKipcbiAqIFRpbWVMaW1pdGVyIGxpbWl0cyB0aGUgbnVtYmVyIG9mIGl0ZW1zIGhhbmRsZWQgYnkgYSB7QGxpbmsgUElYSS5CYXNlUHJlcGFyZX0gdG8gYSBzcGVjaWZpZWRcbiAqIG51bWJlciBvZiBtaWxsaXNlY29uZHMgcGVyIGZyYW1lLlxuICpcbiAqIEBjbGFzc1xuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIFRpbWVMaW1pdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhNaWxsaXNlY29uZHMgLSBUaGUgbWF4aW11bSBtaWxsaXNlY29uZHMgdGhhdCBjYW4gYmUgc3BlbnQgcHJlcGFyaW5nIGl0ZW1zIGVhY2ggZnJhbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gVGltZUxpbWl0ZXIobWF4TWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbWF4aW11bSBtaWxsaXNlY29uZHMgdGhhdCBjYW4gYmUgc3BlbnQgcHJlcGFyaW5nIGl0ZW1zIGVhY2ggZnJhbWUuXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1heE1pbGxpc2Vjb25kcyA9IG1heE1pbGxpc2Vjb25kcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzdGFydCB0aW1lIG9mIHRoZSBjdXJyZW50IGZyYW1lLlxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mcmFtZVN0YXJ0ID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXRzIGFueSBjb3VudGluZyBwcm9wZXJ0aWVzIHRvIHN0YXJ0IGZyZXNoIG9uIGEgbmV3IGZyYW1lLlxuICAgICAqL1xuICAgIFRpbWVMaW1pdGVyLnByb3RvdHlwZS5iZWdpbkZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZyYW1lU3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRvIHNlZSBpZiBhbm90aGVyIGl0ZW0gY2FuIGJlIHVwbG9hZGVkLiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlIHBlciBpdGVtLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IElmIHRoZSBpdGVtIGlzIGFsbG93ZWQgdG8gYmUgdXBsb2FkZWQuXG4gICAgICovXG4gICAgVGltZUxpbWl0ZXIucHJvdG90eXBlLmFsbG93ZWRUb1VwbG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkgLSB0aGlzLmZyYW1lU3RhcnQgPCB0aGlzLm1heE1pbGxpc2Vjb25kcztcbiAgICB9O1xuICAgIHJldHVybiBUaW1lTGltaXRlcjtcbn0oKSk7XG5cbmV4cG9ydCB7IEJhc2VQcmVwYXJlLCBDb3VudExpbWl0ZXIsIFByZXBhcmUsIFRpbWVMaW1pdGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVwYXJlLmVzLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==