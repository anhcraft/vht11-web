(self.webpackChunkvht11=self.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\core\\MathDocument"],{"./node_modules/mathjax-full/js/core/MathDocument.js":function(t,e,r){"use strict";var o,n=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var o,n,i=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(o=i.next()).done;)a.push(o.value)}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}return a},s=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(a(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.AbstractMathDocument=e.RenderList=void 0;var u=r("./node_modules/mathjax-full/js/util/Options.js"),l=r("./node_modules/mathjax-full/js/core/InputJax.js"),c=r("./node_modules/mathjax-full/js/core/OutputJax.js"),h=r("./node_modules/mathjax-full/js/core/MathList.js"),p=r("./node_modules/mathjax-full/js/core/MathItem.js"),d=r("./node_modules/mathjax-full/js/core/MmlTree/MmlFactory.js"),f=r("./node_modules/mathjax-full/js/util/BitField.js"),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.create=function(t){var e,r,o=new this;try{for(var n=i(Object.keys(t)),s=n.next();!s.done;s=n.next()){var u=s.value,l=a(this.action(u,t[u]),2),c=l[0],h=l[1];h&&o.add(c,h)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(r=n.return)&&r.call(n)}finally{if(e)throw e.error}}return o},e.action=function(t,e){var r,o,n,i,s,u,l=!0,c=e[0];if(1===e.length||"boolean"==typeof e[1])2===e.length&&(l=e[1]),s=(r=a(this.methodActions(t),2))[0],u=r[1];else if("string"==typeof e[1])if("string"==typeof e[2]){4===e.length&&(l=e[3]);var h=a(e.slice(1),2),p=h[0],d=h[1];s=(o=a(this.methodActions(p,d),2))[0],u=o[1]}else 3===e.length&&(l=e[2]),s=(n=a(this.methodActions(e[1]),2))[0],u=n[1];else 4===e.length&&(l=e[3]),s=(i=a(e.slice(1),2))[0],u=i[1];return[{id:t,renderDoc:s,renderMath:u,convert:l},c]},e.methodActions=function(t,e){return void 0===e&&(e=t),[function(e){return t&&e[t](),!1},function(t,r){return e&&t[e](r),!1}]},e.prototype.renderDoc=function(t,e){var r,o;void 0===e&&(e=p.STATE.UNPROCESSED);try{for(var n=i(this.items),a=n.next();!a.done;a=n.next()){var s=a.value;if(s.priority>=e&&s.item.renderDoc(t))return}}catch(t){r={error:t}}finally{try{a&&!a.done&&(o=n.return)&&o.call(n)}finally{if(r)throw r.error}}},e.prototype.renderMath=function(t,e,r){var o,n;void 0===r&&(r=p.STATE.UNPROCESSED);try{for(var a=i(this.items),s=a.next();!s.done;s=a.next()){var u=s.value;if(u.priority>=r&&u.item.renderMath(t,e))return}}catch(t){o={error:t}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}},e.prototype.renderConvert=function(t,e,r){var o,n;void 0===r&&(r=p.STATE.LAST);try{for(var a=i(this.items),s=a.next();!s.done;s=a.next()){var u=s.value;if(u.priority>r)return;if(u.item.convert&&u.item.renderMath(t,e))return}}catch(t){o={error:t}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}},e.prototype.findID=function(t){var e,r;try{for(var o=i(this.items),n=o.next();!n.done;n=o.next()){var a=n.value;if(a.item.id===t)return a.item}}catch(t){e={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}return null},e}(r("./node_modules/mathjax-full/js/util/PrioritizedList.js").PrioritizedList);e.RenderList=y;var m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.compile=function(t){return null},e}(l.AbstractInputJax),v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.typeset=function(t,e){return void 0===e&&(e=null),null},e.prototype.escaped=function(t,e){return null},e}(c.AbstractOutputJax),x=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(h.AbstractMathList),M=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(p.AbstractMathItem),A=function(){function t(e,r,o){var n=this,i=this.constructor;this.document=e,this.options=u.userOptions(u.defaultOptions({},i.OPTIONS),o),this.math=new(this.options.MathList||x),this.renderActions=y.create(this.options.renderActions),this.processed=new t.ProcessBits,this.outputJax=this.options.OutputJax||new v;var a=this.options.InputJax||[new m];Array.isArray(a)||(a=[a]),this.inputJax=a,this.adaptor=r,this.outputJax.setAdaptor(r),this.inputJax.map((function(t){return t.setAdaptor(r)})),this.mmlFactory=this.options.MmlFactory||new d.MmlFactory,this.inputJax.map((function(t){return t.setMmlFactory(n.mmlFactory)})),this.outputJax.initialize(),this.inputJax.map((function(t){return t.initialize()}))}return Object.defineProperty(t.prototype,"kind",{get:function(){return this.constructor.KIND},enumerable:!1,configurable:!0}),t.prototype.addRenderAction=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var o=a(y.action(t,e),2),n=o[0],i=o[1];this.renderActions.add(n,i)},t.prototype.removeRenderAction=function(t){var e=this.renderActions.findID(t);e&&this.renderActions.remove(e)},t.prototype.render=function(){return this.renderActions.renderDoc(this),this},t.prototype.rerender=function(t){return void 0===t&&(t=p.STATE.RERENDER),this.state(t-1),this.render(),this},t.prototype.convert=function(t,e){void 0===e&&(e={});var r=u.userOptions({format:this.inputJax[0].name,display:!0,end:p.STATE.LAST,em:16,ex:8,containerWidth:null,lineWidth:1e6,scale:1,family:""},e),o=r.format,n=r.display,i=r.end,a=r.ex,s=r.em,l=r.containerWidth,c=r.lineWidth,h=r.scale,d=r.family;null===l&&(l=80*a);var f=this.inputJax.reduce((function(t,e){return e.name===o?e:t}),null),y=new this.options.MathItem(t,f,n);return y.start.node=this.adaptor.body(this.document),y.setMetrics(s,a,l,c,h),this.outputJax.options.mtextInheritFont&&(y.outputData.mtextFamily=d),this.outputJax.options.merrorInheritFont&&(y.outputData.merrorFamily=d),y.convert(this,i),y.typesetRoot||y.root},t.prototype.findMath=function(t){return void 0===t&&(t=null),this.processed.set("findMath"),this},t.prototype.compile=function(){var t,e,r,o;if(!this.processed.isSet("compile")){var n=[];try{for(var a=i(this.math),s=a.next();!s.done;s=a.next()){var u=s.value;this.compileMath(u),void 0!==u.inputData.recompile&&n.push(u)}}catch(e){t={error:e}}finally{try{s&&!s.done&&(e=a.return)&&e.call(a)}finally{if(t)throw t.error}}try{for(var l=i(n),c=l.next();!c.done;c=l.next()){var h=(u=c.value).inputData.recompile;u.state(h.state),u.inputData.recompile=h,this.compileMath(u)}}catch(t){r={error:t}}finally{try{c&&!c.done&&(o=l.return)&&o.call(l)}finally{if(r)throw r.error}}this.processed.set("compile")}return this},t.prototype.compileMath=function(t){try{t.compile(this)}catch(e){if(e.retry||e.restart)throw e;this.options.compileError(this,t,e),t.inputData.error=e}},t.prototype.compileError=function(t,e){t.root=this.mmlFactory.create("math",null,[this.mmlFactory.create("merror",{"data-mjx-error":e.message,title:e.message},[this.mmlFactory.create("mtext",null,[this.mmlFactory.create("text").setText("Math input error")])])]),t.display&&t.root.attributes.set("display","block"),t.inputData.error=e.message},t.prototype.typeset=function(){var t,e;if(!this.processed.isSet("typeset")){try{for(var r=i(this.math),o=r.next();!o.done;o=r.next()){var n=o.value;try{n.typeset(this)}catch(t){if(t.retry||t.restart)throw t;this.options.typesetError(this,n,t),n.outputData.error=t}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}this.processed.set("typeset")}return this},t.prototype.typesetError=function(t,e){t.typesetRoot=this.adaptor.node("mjx-container",{class:"MathJax mjx-output-error",jax:this.outputJax.name},[this.adaptor.node("span",{"data-mjx-error":e.message,title:e.message,style:{color:"red","background-color":"yellow","line-height":"normal"}},[this.adaptor.text("Math output error")])]),t.display&&this.adaptor.setAttributes(t.typesetRoot,{style:{display:"block",margin:"1em 0","text-align":"center"}}),t.outputData.error=e.message},t.prototype.getMetrics=function(){return this.processed.isSet("getMetrics")||(this.outputJax.getMetrics(this),this.processed.set("getMetrics")),this},t.prototype.updateDocument=function(){var t,e;if(!this.processed.isSet("updateDocument")){try{for(var r=i(this.math.reversed()),o=r.next();!o.done;o=r.next()){o.value.updateDocument(this)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}this.processed.set("updateDocument")}return this},t.prototype.removeFromDocument=function(t){return void 0===t&&(t=!1),this},t.prototype.state=function(t,e){var r,o;void 0===e&&(e=!1);try{for(var n=i(this.math),a=n.next();!a.done;a=n.next()){a.value.state(t,e)}}catch(t){r={error:t}}finally{try{a&&!a.done&&(o=n.return)&&o.call(n)}finally{if(r)throw r.error}}return t<p.STATE.INSERTED&&this.processed.clear("updateDocument"),t<p.STATE.TYPESET&&(this.processed.clear("typeset"),this.processed.clear("getMetrics")),t<p.STATE.COMPILED&&this.processed.clear("compile"),this},t.prototype.reset=function(){return this.processed.reset(),this},t.prototype.clear=function(){return this.reset(),this.math.clear(),this},t.prototype.concat=function(t){return this.math.merge(t),this},t.prototype.clearMathItemsWithin=function(t){var e;(e=this.math).remove.apply(e,s(this.getMathItemsWithin(t)))},t.prototype.getMathItemsWithin=function(t){var e,r,o,n;Array.isArray(t)||(t=[t]);var a=this.adaptor,s=[],u=a.getElements(t,this.document);try{t:for(var l=i(this.math),c=l.next();!c.done;c=l.next()){var h=c.value;try{for(var p=(o=void 0,i(u)),d=p.next();!d.done;d=p.next()){var f=d.value;if(h.start.node&&a.contains(f,h.start.node)){s.push(h);continue t}}}catch(t){o={error:t}}finally{try{d&&!d.done&&(n=p.return)&&n.call(p)}finally{if(o)throw o.error}}}}catch(t){e={error:t}}finally{try{c&&!c.done&&(r=l.return)&&r.call(l)}finally{if(e)throw e.error}}return s},t.KIND="MathDocument",t.OPTIONS={OutputJax:null,InputJax:null,MmlFactory:null,MathList:x,MathItem:M,compileError:function(t,e,r){t.compileError(e,r)},typesetError:function(t,e,r){t.typesetError(e,r)},renderActions:u.expandable({find:[p.STATE.FINDMATH,"findMath","",!1],compile:[p.STATE.COMPILED],metrics:[p.STATE.METRICS,"getMetrics","",!1],typeset:[p.STATE.TYPESET],update:[p.STATE.INSERTED,"updateDocument",!1]})},t.ProcessBits=f.BitFieldClass("findMath","compile","getMetrics","typeset","updateDocument"),t}();e.AbstractMathDocument=A}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,