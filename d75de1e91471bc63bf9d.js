(self.webpackChunkvht11=self.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\input\\mathml\\MathMLCompile"],{"./node_modules/mathjax-full/js/input/mathml/MathMLCompile.js":function(t,e,r){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var a in e=arguments[r])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}).apply(this,arguments)},a=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],i=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.MathMLCompile=void 0;var o=r("./node_modules/mathjax-full/js/core/MmlTree/MmlNode.js"),s=r("./node_modules/mathjax-full/js/util/Options.js"),n=r("./node_modules/mathjax-full/js/util/Entities.js"),l=function(){function t(t){void 0===t&&(t={});var e=this.constructor;this.options=s.userOptions(s.defaultOptions({},e.OPTIONS),t)}return t.prototype.setMmlFactory=function(t){this.factory=t},t.prototype.compile=function(t){var e=this.makeNode(t);return e.verifyTree(this.options.verify),e.setInheritedAttributes({},!1,0,!1),e.walkTree(this.markMrows),e},t.prototype.makeNode=function(t){var e,r,i=this.adaptor,s=!1,n=i.kind(t).replace(/^.*:/,""),l=i.getAttribute(t,"data-mjx-texclass")||"";l&&(l=this.filterAttribute("data-mjx-texclass",l)||"");var h=l&&"mrow"===n?"TeXAtom":n;try{for(var d=a(this.filterClassList(i.allClasses(t))),u=d.next();!u.done;u=d.next()){var c=u.value;c.match(/^MJX-TeXAtom-/)?(l=c.substr(12),h="TeXAtom"):"MJX-fixedlimits"===c&&(s=!0)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(r=d.return)&&r.call(d)}finally{if(e)throw e.error}}this.factory.getNodeClass(h)||this.error('Unknown node type "'+h+'"');var p=this.factory.create(h);return"TeXAtom"===h?this.texAtom(p,l,s):l&&(p.texClass=o.TEXCLASS[l],p.setProperty("texClass",p.texClass)),this.addAttributes(p,t),this.checkClass(p,t),this.addChildren(p,t),p},t.prototype.addAttributes=function(t,e){var r,i,o=!1;try{for(var s=a(this.adaptor.allAttributes(e)),n=s.next();!n.done;n=s.next()){var l=n.value,h=l.name,d=this.filterAttribute(h,l.value);if(null===d)return;if("data-mjx-"===h.substr(0,9))"data-mjx-alternate"===h?t.setProperty("variantForm",!0):"data-mjx-variant"===h&&(t.attributes.set("mathvariant",d),o=!0);else if("class"!==h){var u=d.toLowerCase();"true"===u||"false"===u?t.attributes.set(h,"true"===u):o&&"mathvariant"===h||t.attributes.set(h,d)}}}catch(t){r={error:t}}finally{try{n&&!n.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}},t.prototype.filterAttribute=function(t,e){return e},t.prototype.filterClassList=function(t){return t},t.prototype.addChildren=function(t,e){var r,i;if(0!==t.arity){var o=this.adaptor;try{for(var s=a(o.childNodes(e)),n=s.next();!n.done;n=s.next()){var l=n.value,h=o.kind(l);if("#comment"!==h)if("#text"===h)this.addText(t,l);else if(t.isKind("annotation-xml"))t.appendChild(this.factory.create("XML").setXML(l,o));else{var d=t.appendChild(this.makeNode(l));0===d.arity&&o.childNodes(l).length&&(this.options.fixMisplacedChildren?this.addChildren(t,l):d.mError("There should not be children for "+d.kind+" nodes",this.options.verify,!0))}}}catch(t){r={error:t}}finally{try{n&&!n.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}}},t.prototype.addText=function(t,e){var r=this.adaptor.value(e);(t.isToken||t.getProperty("isChars"))&&t.arity?(t.isToken&&(r=n.translate(r),r=this.trimSpace(r)),t.appendChild(this.factory.create("text").setText(r))):r.match(/\S/)&&this.error('Unexpected text node "'+r+'"')},t.prototype.checkClass=function(t,e){var r,i,o=[];try{for(var s=a(this.filterClassList(this.adaptor.allClasses(e))),n=s.next();!n.done;n=s.next()){var l=n.value;"MJX-"===l.substr(0,4)?"MJX-variant"===l?t.setProperty("variantForm",!0):"MJX-TeXAtom"!==l.substr(0,11)&&t.attributes.set("mathvariant",this.fixCalligraphic(l.substr(3))):o.push(l)}}catch(t){r={error:t}}finally{try{n&&!n.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}o.length&&t.attributes.set("class",o.join(" "))},t.prototype.fixCalligraphic=function(t){return t.replace(/caligraphic/,"calligraphic")},t.prototype.texAtom=function(t,e,r){t.texClass=o.TEXCLASS[e],t.setProperty("texClass",t.texClass),"OP"!==e||r||(t.setProperty("movesupsub",!0),t.attributes.setInherited("movablelimits",!0))},t.prototype.markMrows=function(t){if(t.isKind("mrow")&&!t.isInferred&&t.childNodes.length>=2){var e=t.childNodes[0],r=t.childNodes[t.childNodes.length-1];e.isKind("mo")&&e.attributes.get("fence")&&r.isKind("mo")&&r.attributes.get("fence")&&(e.childNodes.length&&t.setProperty("open",e.getText()),r.childNodes.length&&t.setProperty("close",r.getText()))}},t.prototype.trimSpace=function(t){return t.replace(/[\t\n\r]/g," ").replace(/^ +/,"").replace(/ +$/,"").replace(/  +/g," ")},t.prototype.error=function(t){throw new Error(t)},t.OPTIONS={MmlFactory:null,fixMisplacedChildren:!0,verify:i({},o.AbstractMmlNode.verifyDefaults),translateEntities:!0},t}();e.MathMLCompile=l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,