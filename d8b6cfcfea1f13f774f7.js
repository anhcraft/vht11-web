(self.webpackChunkvht11=self.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\handlers\\html\\HTMLDocument"],{"./node_modules/mathjax-full/js/handlers/html/HTMLDocument.js":function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),a=this&&this.__assign||function(){return(a=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},i=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,a=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i},s=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.HTMLDocument=void 0;var l=r("./node_modules/mathjax-full/js/core/MathDocument.js"),h=r("./node_modules/mathjax-full/js/util/Options.js"),u=r("./node_modules/mathjax-full/js/handlers/html/HTMLMathItem.js"),d=r("./node_modules/mathjax-full/js/handlers/html/HTMLMathList.js"),c=r("./node_modules/mathjax-full/js/handlers/html/HTMLDomStrings.js"),p=r("./node_modules/mathjax-full/js/core/MathItem.js"),f=function(t){function e(e,r,n){var o=this,a=i(h.separateOptions(n,c.HTMLDomStrings.OPTIONS),2),s=a[0],l=a[1];return(o=t.call(this,e,r,s)||this).domStrings=o.options.DomStrings||new c.HTMLDomStrings(l),o.domStrings.adaptor=r,o.styles=[],o}return o(e,t),e.prototype.findPosition=function(t,e,r,n){var o,a,l=this.adaptor;try{for(var h=s(n[t]),u=h.next();!u.done;u=h.next()){var d=u.value,c=i(d,2),p=c[0],f=c[1];if(e<=f&&"#text"===l.kind(p))return{node:p,n:Math.max(e,0),delim:r};e-=f}}catch(t){o={error:t}}finally{try{u&&!u.done&&(a=h.return)&&a.call(h)}finally{if(o)throw o.error}}return{node:null,n:0,delim:r}},e.prototype.mathItem=function(t,e,r){var n=t.math,o=this.findPosition(t.n,t.start.n,t.open,r),a=this.findPosition(t.n,t.end.n,t.close,r);return new this.options.MathItem(n,e,t.display,o,a)},e.prototype.findMath=function(t){var e,r,n,o,a,l,u,d,c;if(!this.processed.isSet("findMath")){this.adaptor.document=this.document,t=h.userOptions({elements:this.options.elements||[this.adaptor.body(this.document)]},t);try{for(var p=s(this.adaptor.getElements(t.elements,this.document)),f=p.next();!f.done;f=p.next()){var m=f.value,y=i([null,null],2),v=y[0],S=y[1];try{for(var M=(n=void 0,s(this.inputJax)),x=M.next();!x.done;x=M.next()){var j=x.value,T=new this.options.MathList;if(j.processStrings){null===v&&(v=(a=i(this.domStrings.find(m),2))[0],S=a[1]);try{for(var _=(l=void 0,s(j.findMath(v))),g=_.next();!g.done;g=_.next()){var b=g.value;T.push(this.mathItem(b,j,S))}}catch(t){l={error:t}}finally{try{g&&!g.done&&(u=_.return)&&u.call(_)}finally{if(l)throw l.error}}}else try{for(var D=(d=void 0,s(j.findMath(m))),O=D.next();!O.done;O=D.next()){b=O.value;var w=new this.options.MathItem(b.math,j,b.display,b.start,b.end);T.push(w)}}catch(t){d={error:t}}finally{try{O&&!O.done&&(c=D.return)&&c.call(D)}finally{if(d)throw d.error}}this.math.merge(T)}}catch(t){n={error:t}}finally{try{x&&!x.done&&(o=M.return)&&o.call(M)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{f&&!f.done&&(r=p.return)&&r.call(p)}finally{if(e)throw e.error}}this.processed.set("findMath")}return this},e.prototype.updateDocument=function(){return this.processed.isSet("updateDocument")||(this.addPageElements(),this.addStyleSheet(),t.prototype.updateDocument.call(this),this.processed.set("updateDocument")),this},e.prototype.addPageElements=function(){var t=this.adaptor.body(this.document),e=this.documentPageElements();e&&this.adaptor.append(t,e)},e.prototype.addStyleSheet=function(){var t=this.documentStyleSheet();if(t){var e=this.adaptor.head(this.document),r=this.findSheet(e,this.adaptor.getAttribute(t,"id"));r?this.adaptor.replace(t,r):this.adaptor.append(e,t)}},e.prototype.findSheet=function(t,e){var r,n;if(e)try{for(var o=s(this.adaptor.tags(t,"style")),a=o.next();!a.done;a=o.next()){var i=a.value;if(this.adaptor.getAttribute(i,"id")===e)return i}}catch(t){r={error:t}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return null},e.prototype.removeFromDocument=function(t){var e,r;if(void 0===t&&(t=!1),this.processed.isSet("updateDocument"))try{for(var n=s(this.math),o=n.next();!o.done;o=n.next()){var a=o.value;a.state()>=p.STATE.INSERTED&&a.state(p.STATE.TYPESET,t)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(e)throw e.error}}return this.processed.clear("updateDocument"),this},e.prototype.documentStyleSheet=function(){return this.outputJax.styleSheet(this)},e.prototype.documentPageElements=function(){return this.outputJax.pageElements(this)},e.prototype.addStyles=function(t){this.styles.push(t)},e.prototype.getStyles=function(){return this.styles},e.KIND="HTML",e.OPTIONS=a(a({},l.AbstractMathDocument.OPTIONS),{renderActions:h.expandable(a(a({},l.AbstractMathDocument.OPTIONS.renderActions),{styles:[p.STATE.INSERTED+1,"","updateStyleSheet",!1]})),MathList:d.HTMLMathList,MathItem:u.HTMLMathItem,DomStrings:null}),e}(l.AbstractMathDocument);e.HTMLDocument=f}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,