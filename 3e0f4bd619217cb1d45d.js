(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\output\\common\\Wrapper"],{"./node_modules/mathjax-full/js/output/common/Wrapper.js":function(t,e,i){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,i=e&&t[e],o=0;if(i)return i.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__read||function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var o,r,n=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(o=n.next()).done;)s.push(o.value)}catch(t){r={error:t}}finally{try{o&&!o.done&&(i=n.return)&&i.call(n)}finally{if(r)throw r.error}}return s},a=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(s(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.CommonWrapper=void 0;var l=i("./node_modules/mathjax-full/js/core/Tree/Wrapper.js"),h=i("./node_modules/mathjax-full/js/core/MmlTree/MmlNode.js"),c=i("./node_modules/mathjax-full/js/util/string.js"),p=i("./node_modules/mathjax-full/js/util/lengths.js"),f=i("./node_modules/mathjax-full/js/util/Styles.js"),u=i("./node_modules/mathjax-full/js/util/BBox.js"),d=i("./node_modules/mathjax-full/js/output/common/FontData.js"),m=2/18;function y(t,e){return t?e<m?0:m:e}var b=function(t){function e(e,i,o){void 0===o&&(o=null);var r=t.call(this,e,i)||this;return r.parent=null,r.removedStyles=null,r.styles=null,r.variant="",r.bboxComputed=!1,r.stretch=d.NOSTRETCH,r.font=null,r.parent=o,r.font=e.jax.font,r.bbox=u.BBox.zero(),r.getStyles(),r.getVariant(),r.getScale(),r.getSpace(),r.childNodes=i.childNodes.map((function(t){var e=r.wrap(t);return e.bbox.pwidth&&(i.notParent||i.isKind("math"))&&(r.bbox.pwidth=u.BBox.fullWidth),e})),r}return r(e,t),Object.defineProperty(e.prototype,"jax",{get:function(){return this.factory.jax},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"adaptor",{get:function(){return this.factory.jax.adaptor},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"metrics",{get:function(){return this.factory.jax.math.metrics},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"fixesPWidth",{get:function(){return!this.node.notParent&&!this.node.isToken},enumerable:!1,configurable:!0}),e.prototype.wrap=function(t,e){void 0===e&&(e=null);var i=this.factory.wrap(t,e||this);return e&&e.childNodes.push(i),this.jax.nodeMap.set(t,i),i},e.prototype.getBBox=function(t){if(void 0===t&&(t=!0),this.bboxComputed)return this.bbox;var e=t?this.bbox:u.BBox.zero();return this.computeBBox(e),this.bboxComputed=t,e},e.prototype.computeBBox=function(t,e){var i,o;void 0===e&&(e=!1),t.empty();try{for(var r=n(this.childNodes),s=r.next();!s.done;s=r.next()){var a=s.value;t.append(a.getBBox())}}catch(t){i={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(i)throw i.error}}t.clean(),this.fixesPWidth&&this.setChildPWidths(e)&&this.computeBBox(t,!0)},e.prototype.setChildPWidths=function(t,e,i){var o,r;if(void 0===e&&(e=null),void 0===i&&(i=!0),t)return!1;i&&(this.bbox.pwidth="");var s=!1;try{for(var a=n(this.childNodes),l=a.next();!l.done;l=a.next()){var h=l.value,c=h.getBBox();c.pwidth&&h.setChildPWidths(t,null===e?c.w:e,i)&&(s=!0)}}catch(t){o={error:t}}finally{try{l&&!l.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return s},e.prototype.invalidateBBox=function(){this.bboxComputed&&(this.bboxComputed=!1,this.parent&&this.parent.invalidateBBox())},e.prototype.copySkewIC=function(t){var e=this.childNodes[0];e&&e.bbox.sk&&(t.sk=e.bbox.sk);var i=this.childNodes[this.childNodes.length-1];i&&i.bbox.ic&&(t.ic=i.bbox.ic,t.w+=t.ic)},e.prototype.getStyles=function(){var t=this.node.attributes.getExplicit("style");if(t)for(var i=this.styles=new f.Styles(t),o=0,r=e.removeStyles.length;o<r;o++){var n=e.removeStyles[o];i.get(n)&&(this.removedStyles||(this.removedStyles={}),this.removedStyles[n]=i.get(n),i.set(n,""))}},e.prototype.getVariant=function(){if(this.node.isToken){var t=this.node.attributes,i=t.get("mathvariant");if(!t.getExplicit("mathvariant")){var o=t.getList("fontfamily","fontweight","fontstyle");if(this.removedStyles){var r=this.removedStyles;r.fontFamily&&(o.family=r.fontFamily),r.fontWeight&&(o.weight=r.fontWeight),r.fontStyle&&(o.style=r.fontStyle)}o.fontfamily&&(o.family=o.fontfamily),o.fontweight&&(o.weight=o.fontweight),o.fontstyle&&(o.style=o.fontstyle),o.weight&&o.weight.match(/^\d+$/)&&(o.weight=parseInt(o.weight)>600?"bold":"normal"),o.family?i=this.explicitVariant(o.family,o.weight,o.style):(this.node.getProperty("variantForm")&&(i="-tex-variant"),i=(e.BOLDVARIANTS[o.weight]||{})[i]||i,i=(e.ITALICVARIANTS[o.style]||{})[i]||i)}this.variant=i}},e.prototype.explicitVariant=function(t,e,i){var o=this.styles;return o||(o=this.styles=new f.Styles),o.set("fontFamily",t),e&&o.set("fontWeight",e),i&&o.set("fontStyle",i),"-explicitFont"},e.prototype.getScale=function(){var t=1,e=this.parent,i=e?e.bbox.scale:1,o=this.node.attributes,r=Math.min(o.get("scriptlevel"),2),n=o.get("fontsize"),s=this.node.isToken||this.node.isKind("mstyle")?o.get("mathsize"):o.getInherited("mathsize");if(0!==r){t=Math.pow(o.get("scriptsizemultiplier"),r);var a=this.length2em(o.get("scriptminsize"),.8,1);t<a&&(t=a)}this.removedStyles&&this.removedStyles.fontSize&&!n&&(n=this.removedStyles.fontSize),n&&!o.getExplicit("mathsize")&&(s=n),"1"!==s&&(t*=this.length2em(s,1,1)),this.bbox.scale=t,this.bbox.rscale=t/i},e.prototype.getSpace=function(){var t=this.isTopEmbellished(),e=this.node.hasSpacingAttributes();this.jax.options.mathmlSpacing||e?t&&this.getMathMLSpacing():this.getTeXSpacing(t,e)},e.prototype.getMathMLSpacing=function(){var t=this.node.coreMO(),e=t.attributes,i=e.get("scriptlevel")>0;this.bbox.L=e.isSet("lspace")?Math.max(0,this.length2em(e.get("lspace"))):y(i,t.lspace),this.bbox.R=e.isSet("rspace")?Math.max(0,this.length2em(e.get("rspace"))):y(i,t.rspace)},e.prototype.getTeXSpacing=function(t,e){if(!e){var i=this.node.texSpacing();i&&(this.bbox.L=this.length2em(i))}if(t||e){var o=this.node.coreMO().attributes;o.isSet("lspace")&&(this.bbox.L=Math.max(0,this.length2em(o.get("lspace")))),o.isSet("rspace")&&(this.bbox.R=Math.max(0,this.length2em(o.get("rspace"))))}},e.prototype.isTopEmbellished=function(){return this.node.isEmbellished&&!(this.node.Parent&&this.node.Parent.isEmbellished)},e.prototype.core=function(){return this.jax.nodeMap.get(this.node.core())},e.prototype.coreMO=function(){return this.jax.nodeMap.get(this.node.coreMO())},e.prototype.getText=function(){var t,e,i="";if(this.node.isToken)try{for(var o=n(this.node.childNodes),r=o.next();!r.done;r=o.next()){var s=r.value;s instanceof h.TextNode&&(i+=s.getText())}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}return i},e.prototype.canStretch=function(t){if(this.stretch=d.NOSTRETCH,this.node.isEmbellished){var e=this.core();e&&e.node!==this.node&&e.canStretch(t)&&(this.stretch=e.stretch)}return 0!==this.stretch.dir},e.prototype.getAlignShift=function(){var t,e=(t=this.node.attributes).getList.apply(t,a(h.indentAttributes)),i=e.indentalign,o=e.indentshift,r=e.indentalignfirst,n=e.indentshiftfirst;return"indentalign"!==r&&(i=r),"auto"===i&&(i=this.jax.options.displayAlign),"indentshift"!==n&&(o=n),"auto"===o&&(o=this.jax.options.displayIndent,"right"!==i||o.match(/^\s*0[a-z]*\s*$/)||(o=("-"+o.trim()).replace(/^--/,""))),[i,this.length2em(o,this.metrics.containerWidth)]},e.prototype.getAlignX=function(t,e,i){return"right"===i?t-(e.w+e.R)*e.rscale:"left"===i?e.L*e.rscale:(t-e.w*e.rscale)/2},e.prototype.getAlignY=function(t,e,i,o,r){return"top"===r?t-i:"bottom"===r?o-e:"middle"===r?(t-i-(e-o))/2:0},e.prototype.getWrapWidth=function(t){return this.childNodes[t].getBBox().w},e.prototype.getChildAlign=function(t){return"left"},e.prototype.percent=function(t){return p.percent(t)},e.prototype.em=function(t){return p.em(t)},e.prototype.px=function(t,e){return void 0===e&&(e=-p.BIGDIMEN),p.px(t,e,this.metrics.em)},e.prototype.length2em=function(t,e,i){return void 0===e&&(e=1),void 0===i&&(i=null),null===i&&(i=this.bbox.scale),p.length2em(t,e,i,this.jax.pxPerEm)},e.prototype.unicodeChars=function(t,e){void 0===e&&(e=this.variant);var i=c.unicodeChars(t),o=this.font.getVariant(e);if(o&&o.chars){var r=o.chars;i=i.map((function(t){return((r[t]||[])[3]||{}).smp||t}))}return i},e.prototype.remapChars=function(t){return t},e.prototype.mmlText=function(t){return this.node.factory.create("text").setText(t)},e.prototype.mmlNode=function(t,e,i){return void 0===e&&(e={}),void 0===i&&(i=[]),this.node.factory.create(t,e,i)},e.prototype.createMo=function(t){var e=this.node.factory,i=e.create("text").setText(t),o=e.create("mo",{stretchy:!0},[i]);o.inheritAttributesFrom(this.node);var r=this.wrap(o);return r.parent=this,r},e.prototype.getVariantChar=function(t,e){var i=this.font.getChar(t,e)||[0,0,0,{unknown:!0}];return 3===i.length&&(i[3]={}),i},e.kind="unknown",e.styles={},e.removeStyles=["fontSize","fontFamily","fontWeight","fontStyle","fontVariant","font"],e.skipAttributes={fontfamily:!0,fontsize:!0,fontweight:!0,fontstyle:!0,color:!0,background:!0,class:!0,href:!0,style:!0,xmlns:!0},e.BOLDVARIANTS={bold:{normal:"bold",italic:"bold-italic",fraktur:"bold-fraktur",script:"bold-script","sans-serif":"bold-sans-serif","sans-serif-italic":"sans-serif-bold-italic"},normal:{bold:"normal","bold-italic":"italic","bold-fraktur":"fraktur","bold-script":"script","bold-sans-serif":"sans-serif","sans-serif-bold-italic":"sans-serif-italic"}},e.ITALICVARIANTS={italic:{normal:"italic",bold:"bold-italic","sans-serif":"sans-serif-italic","bold-sans-serif":"sans-serif-bold-italic"},normal:{italic:"normal","bold-italic":"bold","sans-serif-italic":"sans-serif","sans-serif-bold-italic":"bold-sans-serif"}},e}(l.AbstractWrapper);e.CommonWrapper=b}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aHQxMS8uL25vZGVfbW9kdWxlcy9tYXRoamF4LWZ1bGwvanMvb3V0cHV0L2NvbW1vbi9XcmFwcGVyLmpzIl0sIm5hbWVzIjpbImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJ0aGlzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImNyZWF0ZSIsIl9fdmFsdWVzIiwibyIsInMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm0iLCJpIiwiY2FsbCIsImxlbmd0aCIsIm5leHQiLCJ2YWx1ZSIsImRvbmUiLCJUeXBlRXJyb3IiLCJfX3JlYWQiLCJuIiwiciIsImUiLCJhciIsInB1c2giLCJlcnJvciIsIl9fc3ByZWFkIiwiYXJndW1lbnRzIiwiY29uY2F0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiQ29tbW9uV3JhcHBlciIsIldyYXBwZXJfanNfMSIsIk1tbE5vZGVfanNfMSIsInN0cmluZ19qc18xIiwiTEVOR1RIUyIsIlN0eWxlc19qc18xIiwiQkJveF9qc18xIiwiRm9udERhdGFfanNfMSIsIlNNQUxMU0laRSIsIk1hdGhNTFNwYWNlIiwic2NyaXB0Iiwic2l6ZSIsIl9zdXBlciIsImZhY3RvcnkiLCJub2RlIiwicGFyZW50IiwiX3RoaXMiLCJyZW1vdmVkU3R5bGVzIiwic3R5bGVzIiwidmFyaWFudCIsImJib3hDb21wdXRlZCIsInN0cmV0Y2giLCJOT1NUUkVUQ0giLCJmb250IiwiamF4IiwiYmJveCIsIkJCb3giLCJ6ZXJvIiwiZ2V0U3R5bGVzIiwiZ2V0VmFyaWFudCIsImdldFNjYWxlIiwiZ2V0U3BhY2UiLCJjaGlsZE5vZGVzIiwibWFwIiwiY2hpbGQiLCJ3cmFwcGVkIiwid3JhcCIsInB3aWR0aCIsIm5vdFBhcmVudCIsImlzS2luZCIsImZ1bGxXaWR0aCIsImdldCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJhZGFwdG9yIiwibWF0aCIsIm1ldHJpY3MiLCJpc1Rva2VuIiwibm9kZU1hcCIsInNldCIsImdldEJCb3giLCJzYXZlIiwiY29tcHV0ZUJCb3giLCJyZWNvbXB1dGUiLCJlXzEiLCJfYSIsImVtcHR5IiwiX2IiLCJfYyIsImFwcGVuZCIsImVfMV8xIiwicmV0dXJuIiwiY2xlYW4iLCJmaXhlc1BXaWR0aCIsInNldENoaWxkUFdpZHRocyIsInciLCJjbGVhciIsImVfMiIsImNoYW5nZWQiLCJjYm94IiwiZV8yXzEiLCJpbnZhbGlkYXRlQkJveCIsImNvcHlTa2V3SUMiLCJmaXJzdCIsInNrIiwibGFzdCIsImljIiwic3R5bGVTdHJpbmciLCJhdHRyaWJ1dGVzIiwiZ2V0RXhwbGljaXQiLCJzdHlsZSIsIlN0eWxlcyIsInJlbW92ZVN0eWxlcyIsImlkIiwidmFsdWVzIiwiZ2V0TGlzdCIsImZvbnRGYW1pbHkiLCJmYW1pbHkiLCJmb250V2VpZ2h0Iiwid2VpZ2h0IiwiZm9udFN0eWxlIiwiZm9udGZhbWlseSIsImZvbnR3ZWlnaHQiLCJmb250c3R5bGUiLCJtYXRjaCIsInBhcnNlSW50IiwiZXhwbGljaXRWYXJpYW50IiwiZ2V0UHJvcGVydHkiLCJCT0xEVkFSSUFOVFMiLCJJVEFMSUNWQVJJQU5UUyIsInNjYWxlIiwicHNjYWxlIiwic2NyaXB0bGV2ZWwiLCJNYXRoIiwibWluIiwiZm9udHNpemUiLCJtYXRoc2l6ZSIsImdldEluaGVyaXRlZCIsInBvdyIsInNjcmlwdG1pbnNpemUiLCJsZW5ndGgyZW0iLCJmb250U2l6ZSIsInJzY2FsZSIsImlzVG9wIiwiaXNUb3BFbWJlbGxpc2hlZCIsImhhc1NwYWNpbmciLCJoYXNTcGFjaW5nQXR0cmlidXRlcyIsIm9wdGlvbnMiLCJtYXRobWxTcGFjaW5nIiwiZ2V0TWF0aE1MU3BhY2luZyIsImdldFRlWFNwYWNpbmciLCJjb3JlTU8iLCJpc1NjcmlwdCIsIkwiLCJpc1NldCIsIm1heCIsImxzcGFjZSIsIlIiLCJyc3BhY2UiLCJzcGFjZSIsInRleFNwYWNpbmciLCJpc0VtYmVsbGlzaGVkIiwiUGFyZW50IiwiY29yZSIsImdldFRleHQiLCJlXzMiLCJ0ZXh0IiwiVGV4dE5vZGUiLCJlXzNfMSIsImNhblN0cmV0Y2giLCJkaXJlY3Rpb24iLCJkaXIiLCJnZXRBbGlnblNoaWZ0IiwiYXBwbHkiLCJpbmRlbnRBdHRyaWJ1dGVzIiwiaW5kZW50YWxpZ24iLCJpbmRlbnRzaGlmdCIsImluZGVudGFsaWduZmlyc3QiLCJpbmRlbnRzaGlmdGZpcnN0IiwiZGlzcGxheUFsaWduIiwiZGlzcGxheUluZGVudCIsInRyaW0iLCJyZXBsYWNlIiwiY29udGFpbmVyV2lkdGgiLCJnZXRBbGlnblgiLCJXIiwiYWxpZ24iLCJnZXRBbGlnblkiLCJIIiwiRCIsImgiLCJnZXRXcmFwV2lkdGgiLCJnZXRDaGlsZEFsaWduIiwiX2kiLCJwZXJjZW50IiwiZW0iLCJweCIsIk0iLCJCSUdESU1FTiIsInB4UGVyRW0iLCJ1bmljb2RlQ2hhcnMiLCJuYW1lIiwiY2hhcnMiLCJtYXBfMSIsInNtcCIsInJlbWFwQ2hhcnMiLCJtbWxUZXh0Iiwic2V0VGV4dCIsIm1tbE5vZGUiLCJraW5kIiwicHJvcGVydGllcyIsImNoaWxkcmVuIiwiY3JlYXRlTW8iLCJtbWxGYWN0b3J5IiwidGV4dE5vZGUiLCJtbWwiLCJzdHJldGNoeSIsImluaGVyaXRBdHRyaWJ1dGVzRnJvbSIsImdldFZhcmlhbnRDaGFyIiwiY2hhciIsImdldENoYXIiLCJ1bmtub3duIiwic2tpcEF0dHJpYnV0ZXMiLCJjb2xvciIsImJhY2tncm91bmQiLCJocmVmIiwieG1sbnMiLCJib2xkIiwibm9ybWFsIiwiaXRhbGljIiwiZnJha3R1ciIsIkFic3RyYWN0V3JhcHBlciJdLCJtYXBwaW5ncyI6InlQQUNBLElBQ1FBLEVBREpDLEVBQWFDLE1BQVFBLEtBQUtELFlBQ3RCRCxFQUFnQixTQUFVRyxFQUFHQyxHQUk3QixPQUhBSixFQUFnQkssT0FBT0MsZ0JBQ2xCLENBQUVDLFVBQVcsY0FB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QUN6Qm1HLEtBQU0sQ0FDRkMsT0FBUSxPQUNSQyxPQUFRLGNBQ1JDLFFBQVMsZUFDVDlMLE9BQVEsY0FDUixhQUFjLGtCQUNkLG9CQUFxQiwwQkFFekI0TCxPQUFRLENBQ0pELEtBQU0sU0FDTixjQUFlLFNBQ2YsZUFBZ0IsVUFDaEIsY0FBZSxTQUNmLGtCQUFtQixhQUNuQix5QkFBMEIsc0JBR2xDck0sRUFBY21HLGVBQWlCLENBQzNCb0csT0FBUSxDQUNKRCxPQUFRLFNBQ1JELEtBQU0sY0FDTixhQUFjLG9CQUNkLGtCQUFtQiwwQkFFdkJDLE9BQVEsQ0FDSkMsT0FBUSxTQUNSLGNBQWUsT0FDZixvQkFBcUIsYUFDckIseUJBQTBCLG9CQUczQnZNLEVBcmNTLENBc2NsQkMsRUFBYXdNLGlCQUNmMU0sRUFBUUMsY0FBZ0JBIiwiZmlsZSI6IjNlMGY0YmQ2MTkyMTdjYjFkNDVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZCA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWQpIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xuICAgIHJldHVybiBhcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbW1vbldyYXBwZXIgPSB2b2lkIDA7XG52YXIgV3JhcHBlcl9qc18xID0gcmVxdWlyZShcIi4uLy4uL2NvcmUvVHJlZS9XcmFwcGVyLmpzXCIpO1xudmFyIE1tbE5vZGVfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb3JlL01tbFRyZWUvTW1sTm9kZS5qc1wiKTtcbnZhciBzdHJpbmdfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL3N0cmluZy5qc1wiKTtcbnZhciBMRU5HVEhTID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvbGVuZ3Rocy5qc1wiKTtcbnZhciBTdHlsZXNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL1N0eWxlcy5qc1wiKTtcbnZhciBCQm94X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9CQm94LmpzXCIpO1xudmFyIEZvbnREYXRhX2pzXzEgPSByZXF1aXJlKFwiLi9Gb250RGF0YS5qc1wiKTtcbnZhciBTTUFMTFNJWkUgPSAyIC8gMTg7XG5mdW5jdGlvbiBNYXRoTUxTcGFjZShzY3JpcHQsIHNpemUpIHtcbiAgICByZXR1cm4gKHNjcmlwdCA/IHNpemUgPCBTTUFMTFNJWkUgPyAwIDogU01BTExTSVpFIDogc2l6ZSk7XG59XG52YXIgQ29tbW9uV3JhcHBlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbW1vbldyYXBwZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29tbW9uV3JhcHBlcihmYWN0b3J5LCBub2RlLCBwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gdm9pZCAwKSB7IHBhcmVudCA9IG51bGw7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZmFjdG9yeSwgbm9kZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgX3RoaXMucmVtb3ZlZFN0eWxlcyA9IG51bGw7XG4gICAgICAgIF90aGlzLnN0eWxlcyA9IG51bGw7XG4gICAgICAgIF90aGlzLnZhcmlhbnQgPSAnJztcbiAgICAgICAgX3RoaXMuYmJveENvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnN0cmV0Y2ggPSBGb250RGF0YV9qc18xLk5PU1RSRVRDSDtcbiAgICAgICAgX3RoaXMuZm9udCA9IG51bGw7XG4gICAgICAgIF90aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgX3RoaXMuZm9udCA9IGZhY3RvcnkuamF4LmZvbnQ7XG4gICAgICAgIF90aGlzLmJib3ggPSBCQm94X2pzXzEuQkJveC56ZXJvKCk7XG4gICAgICAgIF90aGlzLmdldFN0eWxlcygpO1xuICAgICAgICBfdGhpcy5nZXRWYXJpYW50KCk7XG4gICAgICAgIF90aGlzLmdldFNjYWxlKCk7XG4gICAgICAgIF90aGlzLmdldFNwYWNlKCk7XG4gICAgICAgIF90aGlzLmNoaWxkTm9kZXMgPSBub2RlLmNoaWxkTm9kZXMubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgdmFyIHdyYXBwZWQgPSBfdGhpcy53cmFwKGNoaWxkKTtcbiAgICAgICAgICAgIGlmICh3cmFwcGVkLmJib3gucHdpZHRoICYmIChub2RlLm5vdFBhcmVudCB8fCBub2RlLmlzS2luZCgnbWF0aCcpKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmJib3gucHdpZHRoID0gQkJveF9qc18xLkJCb3guZnVsbFdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21tb25XcmFwcGVyLnByb3RvdHlwZSwgXCJqYXhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhY3RvcnkuamF4O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbW1vbldyYXBwZXIucHJvdG90eXBlLCBcImFkYXB0b3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhY3RvcnkuamF4LmFkYXB0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tbW9uV3JhcHBlci5wcm90b3R5cGUsIFwibWV0cmljc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFjdG9yeS5qYXgubWF0aC5tZXRyaWNzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbW1vbldyYXBwZXIucHJvdG90eXBlLCBcImZpeGVzUFdpZHRoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMubm9kZS5ub3RQYXJlbnQgJiYgIXRoaXMubm9kZS5pc1Rva2VuO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChub2RlLCBwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gdm9pZCAwKSB7IHBhcmVudCA9IG51bGw7IH1cbiAgICAgICAgdmFyIHdyYXBwZWQgPSB0aGlzLmZhY3Rvcnkud3JhcChub2RlLCBwYXJlbnQgfHwgdGhpcyk7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHBhcmVudC5jaGlsZE5vZGVzLnB1c2god3JhcHBlZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5qYXgubm9kZU1hcC5zZXQobm9kZSwgd3JhcHBlZCk7XG4gICAgICAgIHJldHVybiB3cmFwcGVkO1xuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUuZ2V0QkJveCA9IGZ1bmN0aW9uIChzYXZlKSB7XG4gICAgICAgIGlmIChzYXZlID09PSB2b2lkIDApIHsgc2F2ZSA9IHRydWU7IH1cbiAgICAgICAgaWYgKHRoaXMuYmJveENvbXB1dGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYm94O1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYm94ID0gKHNhdmUgPyB0aGlzLmJib3ggOiBCQm94X2pzXzEuQkJveC56ZXJvKCkpO1xuICAgICAgICB0aGlzLmNvbXB1dGVCQm94KGJib3gpO1xuICAgICAgICB0aGlzLmJib3hDb21wdXRlZCA9IHNhdmU7XG4gICAgICAgIHJldHVybiBiYm94O1xuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUuY29tcHV0ZUJCb3ggPSBmdW5jdGlvbiAoYmJveCwgcmVjb21wdXRlKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICBpZiAocmVjb21wdXRlID09PSB2b2lkIDApIHsgcmVjb21wdXRlID0gZmFsc2U7IH1cbiAgICAgICAgYmJveC5lbXB0eSgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLmNoaWxkTm9kZXMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgYmJveC5hcHBlbmQoY2hpbGQuZ2V0QkJveCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIGJib3guY2xlYW4oKTtcbiAgICAgICAgaWYgKHRoaXMuZml4ZXNQV2lkdGggJiYgdGhpcy5zZXRDaGlsZFBXaWR0aHMocmVjb21wdXRlKSkge1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlQkJveChiYm94LCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUuc2V0Q2hpbGRQV2lkdGhzID0gZnVuY3Rpb24gKHJlY29tcHV0ZSwgdywgY2xlYXIpIHtcbiAgICAgICAgdmFyIGVfMiwgX2E7XG4gICAgICAgIGlmICh3ID09PSB2b2lkIDApIHsgdyA9IG51bGw7IH1cbiAgICAgICAgaWYgKGNsZWFyID09PSB2b2lkIDApIHsgY2xlYXIgPSB0cnVlOyB9XG4gICAgICAgIGlmIChyZWNvbXB1dGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xlYXIpIHtcbiAgICAgICAgICAgIHRoaXMuYmJveC5wd2lkdGggPSAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLmNoaWxkTm9kZXMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGNib3ggPSBjaGlsZC5nZXRCQm94KCk7XG4gICAgICAgICAgICAgICAgaWYgKGNib3gucHdpZHRoICYmIGNoaWxkLnNldENoaWxkUFdpZHRocyhyZWNvbXB1dGUsIHcgPT09IG51bGwgPyBjYm94LncgOiB3LCBjbGVhcikpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5pbnZhbGlkYXRlQkJveCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYmJveENvbXB1dGVkKSB7XG4gICAgICAgICAgICB0aGlzLmJib3hDb21wdXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW52YWxpZGF0ZUJCb3goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUuY29weVNrZXdJQyA9IGZ1bmN0aW9uIChiYm94KSB7XG4gICAgICAgIHZhciBmaXJzdCA9IHRoaXMuY2hpbGROb2Rlc1swXTtcbiAgICAgICAgaWYgKGZpcnN0ICYmIGZpcnN0LmJib3guc2spIHtcbiAgICAgICAgICAgIGJib3guc2sgPSBmaXJzdC5iYm94LnNrO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsYXN0ID0gdGhpcy5jaGlsZE5vZGVzW3RoaXMuY2hpbGROb2Rlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3QgJiYgbGFzdC5iYm94LmljKSB7XG4gICAgICAgICAgICBiYm94LmljID0gbGFzdC5iYm94LmljO1xuICAgICAgICAgICAgYmJveC53ICs9IGJib3guaWM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbW1vbldyYXBwZXIucHJvdG90eXBlLmdldFN0eWxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0eWxlU3RyaW5nID0gdGhpcy5ub2RlLmF0dHJpYnV0ZXMuZ2V0RXhwbGljaXQoJ3N0eWxlJyk7XG4gICAgICAgIGlmICghc3R5bGVTdHJpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGVzID0gbmV3IFN0eWxlc19qc18xLlN0eWxlcyhzdHlsZVN0cmluZyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBtID0gQ29tbW9uV3JhcHBlci5yZW1vdmVTdHlsZXMubGVuZ3RoOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSBDb21tb25XcmFwcGVyLnJlbW92ZVN0eWxlc1tpXTtcbiAgICAgICAgICAgIGlmIChzdHlsZS5nZXQoaWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlbW92ZWRTdHlsZXMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlZFN0eWxlcyA9IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlZFN0eWxlc1tpZF0gPSBzdHlsZS5nZXQoaWQpO1xuICAgICAgICAgICAgICAgIHN0eWxlLnNldChpZCwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5nZXRWYXJpYW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMubm9kZS5pc1Rva2VuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHRoaXMubm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgdmFyaWFudCA9IGF0dHJpYnV0ZXMuZ2V0KCdtYXRodmFyaWFudCcpO1xuICAgICAgICBpZiAoIWF0dHJpYnV0ZXMuZ2V0RXhwbGljaXQoJ21hdGh2YXJpYW50JykpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBhdHRyaWJ1dGVzLmdldExpc3QoJ2ZvbnRmYW1pbHknLCAnZm9udHdlaWdodCcsICdmb250c3R5bGUnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlbW92ZWRTdHlsZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLnJlbW92ZWRTdHlsZXM7XG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlLmZvbnRGYW1pbHkpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5mYW1pbHkgPSBzdHlsZS5mb250RmFtaWx5O1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZS5mb250V2VpZ2h0KVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMud2VpZ2h0ID0gc3R5bGUuZm9udFdlaWdodDtcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUuZm9udFN0eWxlKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuc3R5bGUgPSBzdHlsZS5mb250U3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWVzLmZvbnRmYW1pbHkpXG4gICAgICAgICAgICAgICAgdmFsdWVzLmZhbWlseSA9IHZhbHVlcy5mb250ZmFtaWx5O1xuICAgICAgICAgICAgaWYgKHZhbHVlcy5mb250d2VpZ2h0KVxuICAgICAgICAgICAgICAgIHZhbHVlcy53ZWlnaHQgPSB2YWx1ZXMuZm9udHdlaWdodDtcbiAgICAgICAgICAgIGlmICh2YWx1ZXMuZm9udHN0eWxlKVxuICAgICAgICAgICAgICAgIHZhbHVlcy5zdHlsZSA9IHZhbHVlcy5mb250c3R5bGU7XG4gICAgICAgICAgICBpZiAodmFsdWVzLndlaWdodCAmJiB2YWx1ZXMud2VpZ2h0Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcy53ZWlnaHQgPSAocGFyc2VJbnQodmFsdWVzLndlaWdodCkgPiA2MDAgPyAnYm9sZCcgOiAnbm9ybWFsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWVzLmZhbWlseSkge1xuICAgICAgICAgICAgICAgIHZhcmlhbnQgPSB0aGlzLmV4cGxpY2l0VmFyaWFudCh2YWx1ZXMuZmFtaWx5LCB2YWx1ZXMud2VpZ2h0LCB2YWx1ZXMuc3R5bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubm9kZS5nZXRQcm9wZXJ0eSgndmFyaWFudEZvcm0nKSlcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudCA9ICctdGV4LXZhcmlhbnQnO1xuICAgICAgICAgICAgICAgIHZhcmlhbnQgPSAoQ29tbW9uV3JhcHBlci5CT0xEVkFSSUFOVFNbdmFsdWVzLndlaWdodF0gfHwge30pW3ZhcmlhbnRdIHx8IHZhcmlhbnQ7XG4gICAgICAgICAgICAgICAgdmFyaWFudCA9IChDb21tb25XcmFwcGVyLklUQUxJQ1ZBUklBTlRTW3ZhbHVlcy5zdHlsZV0gfHwge30pW3ZhcmlhbnRdIHx8IHZhcmlhbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YXJpYW50ID0gdmFyaWFudDtcbiAgICB9O1xuICAgIENvbW1vbldyYXBwZXIucHJvdG90eXBlLmV4cGxpY2l0VmFyaWFudCA9IGZ1bmN0aW9uIChmb250RmFtaWx5LCBmb250V2VpZ2h0LCBmb250U3R5bGUpIHtcbiAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5zdHlsZXM7XG4gICAgICAgIGlmICghc3R5bGUpXG4gICAgICAgICAgICBzdHlsZSA9IHRoaXMuc3R5bGVzID0gbmV3IFN0eWxlc19qc18xLlN0eWxlcygpO1xuICAgICAgICBzdHlsZS5zZXQoJ2ZvbnRGYW1pbHknLCBmb250RmFtaWx5KTtcbiAgICAgICAgaWYgKGZvbnRXZWlnaHQpXG4gICAgICAgICAgICBzdHlsZS5zZXQoJ2ZvbnRXZWlnaHQnLCBmb250V2VpZ2h0KTtcbiAgICAgICAgaWYgKGZvbnRTdHlsZSlcbiAgICAgICAgICAgIHN0eWxlLnNldCgnZm9udFN0eWxlJywgZm9udFN0eWxlKTtcbiAgICAgICAgcmV0dXJuICctZXhwbGljaXRGb250JztcbiAgICB9O1xuICAgIENvbW1vbldyYXBwZXIucHJvdG90eXBlLmdldFNjYWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2NhbGUgPSAxLCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgdmFyIHBzY2FsZSA9IChwYXJlbnQgPyBwYXJlbnQuYmJveC5zY2FsZSA6IDEpO1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHRoaXMubm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgc2NyaXB0bGV2ZWwgPSBNYXRoLm1pbihhdHRyaWJ1dGVzLmdldCgnc2NyaXB0bGV2ZWwnKSwgMik7XG4gICAgICAgIHZhciBmb250c2l6ZSA9IGF0dHJpYnV0ZXMuZ2V0KCdmb250c2l6ZScpO1xuICAgICAgICB2YXIgbWF0aHNpemUgPSAodGhpcy5ub2RlLmlzVG9rZW4gfHwgdGhpcy5ub2RlLmlzS2luZCgnbXN0eWxlJykgP1xuICAgICAgICAgICAgYXR0cmlidXRlcy5nZXQoJ21hdGhzaXplJykgOiBhdHRyaWJ1dGVzLmdldEluaGVyaXRlZCgnbWF0aHNpemUnKSk7XG4gICAgICAgIGlmIChzY3JpcHRsZXZlbCAhPT0gMCkge1xuICAgICAgICAgICAgc2NhbGUgPSBNYXRoLnBvdyhhdHRyaWJ1dGVzLmdldCgnc2NyaXB0c2l6ZW11bHRpcGxpZXInKSwgc2NyaXB0bGV2ZWwpO1xuICAgICAgICAgICAgdmFyIHNjcmlwdG1pbnNpemUgPSB0aGlzLmxlbmd0aDJlbShhdHRyaWJ1dGVzLmdldCgnc2NyaXB0bWluc2l6ZScpLCAuOCwgMSk7XG4gICAgICAgICAgICBpZiAoc2NhbGUgPCBzY3JpcHRtaW5zaXplKVxuICAgICAgICAgICAgICAgIHNjYWxlID0gc2NyaXB0bWluc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZW1vdmVkU3R5bGVzICYmIHRoaXMucmVtb3ZlZFN0eWxlcy5mb250U2l6ZSAmJiAhZm9udHNpemUpIHtcbiAgICAgICAgICAgIGZvbnRzaXplID0gdGhpcy5yZW1vdmVkU3R5bGVzLmZvbnRTaXplO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb250c2l6ZSAmJiAhYXR0cmlidXRlcy5nZXRFeHBsaWNpdCgnbWF0aHNpemUnKSkge1xuICAgICAgICAgICAgbWF0aHNpemUgPSBmb250c2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0aHNpemUgIT09ICcxJykge1xuICAgICAgICAgICAgc2NhbGUgKj0gdGhpcy5sZW5ndGgyZW0obWF0aHNpemUsIDEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmJveC5zY2FsZSA9IHNjYWxlO1xuICAgICAgICB0aGlzLmJib3gucnNjYWxlID0gc2NhbGUgLyBwc2NhbGU7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5nZXRTcGFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzVG9wID0gdGhpcy5pc1RvcEVtYmVsbGlzaGVkKCk7XG4gICAgICAgIHZhciBoYXNTcGFjaW5nID0gdGhpcy5ub2RlLmhhc1NwYWNpbmdBdHRyaWJ1dGVzKCk7XG4gICAgICAgIGlmICh0aGlzLmpheC5vcHRpb25zLm1hdGhtbFNwYWNpbmcgfHwgaGFzU3BhY2luZykge1xuICAgICAgICAgICAgaXNUb3AgJiYgdGhpcy5nZXRNYXRoTUxTcGFjaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdldFRlWFNwYWNpbmcoaXNUb3AsIGhhc1NwYWNpbmcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5nZXRNYXRoTUxTcGFjaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZS5jb3JlTU8oKTtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICAgIHZhciBpc1NjcmlwdCA9IChhdHRyaWJ1dGVzLmdldCgnc2NyaXB0bGV2ZWwnKSA+IDApO1xuICAgICAgICB0aGlzLmJib3guTCA9IChhdHRyaWJ1dGVzLmlzU2V0KCdsc3BhY2UnKSA/XG4gICAgICAgICAgICBNYXRoLm1heCgwLCB0aGlzLmxlbmd0aDJlbShhdHRyaWJ1dGVzLmdldCgnbHNwYWNlJykpKSA6XG4gICAgICAgICAgICBNYXRoTUxTcGFjZShpc1NjcmlwdCwgbm9kZS5sc3BhY2UpKTtcbiAgICAgICAgdGhpcy5iYm94LlIgPSAoYXR0cmlidXRlcy5pc1NldCgncnNwYWNlJykgP1xuICAgICAgICAgICAgTWF0aC5tYXgoMCwgdGhpcy5sZW5ndGgyZW0oYXR0cmlidXRlcy5nZXQoJ3JzcGFjZScpKSkgOlxuICAgICAgICAgICAgTWF0aE1MU3BhY2UoaXNTY3JpcHQsIG5vZGUucnNwYWNlKSk7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5nZXRUZVhTcGFjaW5nID0gZnVuY3Rpb24gKGlzVG9wLCBoYXNTcGFjaW5nKSB7XG4gICAgICAgIGlmICghaGFzU3BhY2luZykge1xuICAgICAgICAgICAgdmFyIHNwYWNlID0gdGhpcy5ub2RlLnRleFNwYWNpbmcoKTtcbiAgICAgICAgICAgIGlmIChzcGFjZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmJveC5MID0gdGhpcy5sZW5ndGgyZW0oc3BhY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc1RvcCB8fCBoYXNTcGFjaW5nKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHRoaXMubm9kZS5jb3JlTU8oKS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuaXNTZXQoJ2xzcGFjZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYm94LkwgPSBNYXRoLm1heCgwLCB0aGlzLmxlbmd0aDJlbShhdHRyaWJ1dGVzLmdldCgnbHNwYWNlJykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmlzU2V0KCdyc3BhY2UnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmJveC5SID0gTWF0aC5tYXgoMCwgdGhpcy5sZW5ndGgyZW0oYXR0cmlidXRlcy5nZXQoJ3JzcGFjZScpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbW1vbldyYXBwZXIucHJvdG90eXBlLmlzVG9wRW1iZWxsaXNoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5ub2RlLmlzRW1iZWxsaXNoZWQgJiZcbiAgICAgICAgICAgICEodGhpcy5ub2RlLlBhcmVudCAmJiB0aGlzLm5vZGUuUGFyZW50LmlzRW1iZWxsaXNoZWQpKTtcbiAgICB9O1xuICAgIENvbW1vbldyYXBwZXIucHJvdG90eXBlLmNvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpheC5ub2RlTWFwLmdldCh0aGlzLm5vZGUuY29yZSgpKTtcbiAgICB9O1xuICAgIENvbW1vbldyYXBwZXIucHJvdG90eXBlLmNvcmVNTyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuamF4Lm5vZGVNYXAuZ2V0KHRoaXMubm9kZS5jb3JlTU8oKSk7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5nZXRUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8zLCBfYTtcbiAgICAgICAgdmFyIHRleHQgPSAnJztcbiAgICAgICAgaWYgKHRoaXMubm9kZS5pc1Rva2VuKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXModGhpcy5ub2RlLmNoaWxkTm9kZXMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBNbWxOb2RlX2pzXzEuVGV4dE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gY2hpbGQuZ2V0VGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzMpIHRocm93IGVfMy5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUuY2FuU3RyZXRjaCA9IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zdHJldGNoID0gRm9udERhdGFfanNfMS5OT1NUUkVUQ0g7XG4gICAgICAgIGlmICh0aGlzLm5vZGUuaXNFbWJlbGxpc2hlZCkge1xuICAgICAgICAgICAgdmFyIGNvcmUgPSB0aGlzLmNvcmUoKTtcbiAgICAgICAgICAgIGlmIChjb3JlICYmIGNvcmUubm9kZSAhPT0gdGhpcy5ub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuY2FuU3RyZXRjaChkaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZXRjaCA9IGNvcmUuc3RyZXRjaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyZXRjaC5kaXIgIT09IDA7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5nZXRBbGlnblNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBfYiA9IChfYSA9IHRoaXMubm9kZS5hdHRyaWJ1dGVzKS5nZXRMaXN0LmFwcGx5KF9hLCBfX3NwcmVhZChNbWxOb2RlX2pzXzEuaW5kZW50QXR0cmlidXRlcykpLCBpbmRlbnRhbGlnbiA9IF9iLmluZGVudGFsaWduLCBpbmRlbnRzaGlmdCA9IF9iLmluZGVudHNoaWZ0LCBpbmRlbnRhbGlnbmZpcnN0ID0gX2IuaW5kZW50YWxpZ25maXJzdCwgaW5kZW50c2hpZnRmaXJzdCA9IF9iLmluZGVudHNoaWZ0Zmlyc3Q7XG4gICAgICAgIGlmIChpbmRlbnRhbGlnbmZpcnN0ICE9PSAnaW5kZW50YWxpZ24nKSB7XG4gICAgICAgICAgICBpbmRlbnRhbGlnbiA9IGluZGVudGFsaWduZmlyc3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGVudGFsaWduID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIGluZGVudGFsaWduID0gdGhpcy5qYXgub3B0aW9ucy5kaXNwbGF5QWxpZ247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGVudHNoaWZ0Zmlyc3QgIT09ICdpbmRlbnRzaGlmdCcpIHtcbiAgICAgICAgICAgIGluZGVudHNoaWZ0ID0gaW5kZW50c2hpZnRmaXJzdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZW50c2hpZnQgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgaW5kZW50c2hpZnQgPSB0aGlzLmpheC5vcHRpb25zLmRpc3BsYXlJbmRlbnQ7XG4gICAgICAgICAgICBpZiAoaW5kZW50YWxpZ24gPT09ICdyaWdodCcgJiYgIWluZGVudHNoaWZ0Lm1hdGNoKC9eXFxzKjBbYS16XSpcXHMqJC8pKSB7XG4gICAgICAgICAgICAgICAgaW5kZW50c2hpZnQgPSAoJy0nICsgaW5kZW50c2hpZnQudHJpbSgpKS5yZXBsYWNlKC9eLS0vLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGgyZW0oaW5kZW50c2hpZnQsIHRoaXMubWV0cmljcy5jb250YWluZXJXaWR0aCk7XG4gICAgICAgIHJldHVybiBbaW5kZW50YWxpZ24sIHNoaWZ0XTtcbiAgICB9O1xuICAgIENvbW1vbldyYXBwZXIucHJvdG90eXBlLmdldEFsaWduWCA9IGZ1bmN0aW9uIChXLCBiYm94LCBhbGlnbikge1xuICAgICAgICByZXR1cm4gKGFsaWduID09PSAncmlnaHQnID8gVyAtIChiYm94LncgKyBiYm94LlIpICogYmJveC5yc2NhbGUgOlxuICAgICAgICAgICAgYWxpZ24gPT09ICdsZWZ0JyA/IGJib3guTCAqIGJib3gucnNjYWxlIDpcbiAgICAgICAgICAgICAgICAoVyAtIGJib3gudyAqIGJib3gucnNjYWxlKSAvIDIpO1xuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUuZ2V0QWxpZ25ZID0gZnVuY3Rpb24gKEgsIEQsIGgsIGQsIGFsaWduKSB7XG4gICAgICAgIHJldHVybiAoYWxpZ24gPT09ICd0b3AnID8gSCAtIGggOlxuICAgICAgICAgICAgYWxpZ24gPT09ICdib3R0b20nID8gZCAtIEQgOlxuICAgICAgICAgICAgICAgIGFsaWduID09PSAnbWlkZGxlJyA/ICgoSCAtIGgpIC0gKEQgLSBkKSkgLyAyIDpcbiAgICAgICAgICAgICAgICAgICAgMCk7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5nZXRXcmFwV2lkdGggPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzW2ldLmdldEJCb3goKS53O1xuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUuZ2V0Q2hpbGRBbGlnbiA9IGZ1bmN0aW9uIChfaSkge1xuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUucGVyY2VudCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiBMRU5HVEhTLnBlcmNlbnQobSk7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5lbSA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiBMRU5HVEhTLmVtKG0pO1xuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUucHggPSBmdW5jdGlvbiAobSwgTSkge1xuICAgICAgICBpZiAoTSA9PT0gdm9pZCAwKSB7IE0gPSAtTEVOR1RIUy5CSUdESU1FTjsgfVxuICAgICAgICByZXR1cm4gTEVOR1RIUy5weChtLCBNLCB0aGlzLm1ldHJpY3MuZW0pO1xuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUubGVuZ3RoMmVtID0gZnVuY3Rpb24gKGxlbmd0aCwgc2l6ZSwgc2NhbGUpIHtcbiAgICAgICAgaWYgKHNpemUgPT09IHZvaWQgMCkgeyBzaXplID0gMTsgfVxuICAgICAgICBpZiAoc2NhbGUgPT09IHZvaWQgMCkgeyBzY2FsZSA9IG51bGw7IH1cbiAgICAgICAgaWYgKHNjYWxlID09PSBudWxsKSB7XG4gICAgICAgICAgICBzY2FsZSA9IHRoaXMuYmJveC5zY2FsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTEVOR1RIUy5sZW5ndGgyZW0obGVuZ3RoLCBzaXplLCBzY2FsZSwgdGhpcy5qYXgucHhQZXJFbSk7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS51bmljb2RlQ2hhcnMgPSBmdW5jdGlvbiAodGV4dCwgbmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSB0aGlzLnZhcmlhbnQ7IH1cbiAgICAgICAgdmFyIGNoYXJzID0gc3RyaW5nX2pzXzEudW5pY29kZUNoYXJzKHRleHQpO1xuICAgICAgICB2YXIgdmFyaWFudCA9IHRoaXMuZm9udC5nZXRWYXJpYW50KG5hbWUpO1xuICAgICAgICBpZiAodmFyaWFudCAmJiB2YXJpYW50LmNoYXJzKSB7XG4gICAgICAgICAgICB2YXIgbWFwXzEgPSB2YXJpYW50LmNoYXJzO1xuICAgICAgICAgICAgY2hhcnMgPSBjaGFycy5tYXAoZnVuY3Rpb24gKG4pIHsgcmV0dXJuICgobWFwXzFbbl0gfHwgW10pWzNdIHx8IHt9KS5zbXAgfHwgbjsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYXJzO1xuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5wcm90b3R5cGUucmVtYXBDaGFycyA9IGZ1bmN0aW9uIChjaGFycykge1xuICAgICAgICByZXR1cm4gY2hhcnM7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5tbWxUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5mYWN0b3J5LmNyZWF0ZSgndGV4dCcpLnNldFRleHQodGV4dCk7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5tbWxOb2RlID0gZnVuY3Rpb24gKGtpbmQsIHByb3BlcnRpZXMsIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzID09PSB2b2lkIDApIHsgcHJvcGVydGllcyA9IHt9OyB9XG4gICAgICAgIGlmIChjaGlsZHJlbiA9PT0gdm9pZCAwKSB7IGNoaWxkcmVuID0gW107IH1cbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5mYWN0b3J5LmNyZWF0ZShraW5kLCBwcm9wZXJ0aWVzLCBjaGlsZHJlbik7XG4gICAgfTtcbiAgICBDb21tb25XcmFwcGVyLnByb3RvdHlwZS5jcmVhdGVNbyA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHZhciBtbWxGYWN0b3J5ID0gdGhpcy5ub2RlLmZhY3Rvcnk7XG4gICAgICAgIHZhciB0ZXh0Tm9kZSA9IG1tbEZhY3RvcnkuY3JlYXRlKCd0ZXh0Jykuc2V0VGV4dCh0ZXh0KTtcbiAgICAgICAgdmFyIG1tbCA9IG1tbEZhY3RvcnkuY3JlYXRlKCdtbycsIHsgc3RyZXRjaHk6IHRydWUgfSwgW3RleHROb2RlXSk7XG4gICAgICAgIG1tbC5pbmhlcml0QXR0cmlidXRlc0Zyb20odGhpcy5ub2RlKTtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLndyYXAobW1sKTtcbiAgICAgICAgbm9kZS5wYXJlbnQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9O1xuICAgIENvbW1vbldyYXBwZXIucHJvdG90eXBlLmdldFZhcmlhbnRDaGFyID0gZnVuY3Rpb24gKHZhcmlhbnQsIG4pIHtcbiAgICAgICAgdmFyIGNoYXIgPSB0aGlzLmZvbnQuZ2V0Q2hhcih2YXJpYW50LCBuKSB8fCBbMCwgMCwgMCwgeyB1bmtub3duOiB0cnVlIH1dO1xuICAgICAgICBpZiAoY2hhci5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIGNoYXJbM10gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhcjtcbiAgICB9O1xuICAgIENvbW1vbldyYXBwZXIua2luZCA9ICd1bmtub3duJztcbiAgICBDb21tb25XcmFwcGVyLnN0eWxlcyA9IHt9O1xuICAgIENvbW1vbldyYXBwZXIucmVtb3ZlU3R5bGVzID0gW1xuICAgICAgICAnZm9udFNpemUnLCAnZm9udEZhbWlseScsICdmb250V2VpZ2h0JyxcbiAgICAgICAgJ2ZvbnRTdHlsZScsICdmb250VmFyaWFudCcsICdmb250J1xuICAgIF07XG4gICAgQ29tbW9uV3JhcHBlci5za2lwQXR0cmlidXRlcyA9IHtcbiAgICAgICAgZm9udGZhbWlseTogdHJ1ZSwgZm9udHNpemU6IHRydWUsIGZvbnR3ZWlnaHQ6IHRydWUsIGZvbnRzdHlsZTogdHJ1ZSxcbiAgICAgICAgY29sb3I6IHRydWUsIGJhY2tncm91bmQ6IHRydWUsXG4gICAgICAgICdjbGFzcyc6IHRydWUsIGhyZWY6IHRydWUsIHN0eWxlOiB0cnVlLFxuICAgICAgICB4bWxuczogdHJ1ZVxuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5CT0xEVkFSSUFOVFMgPSB7XG4gICAgICAgIGJvbGQ6IHtcbiAgICAgICAgICAgIG5vcm1hbDogJ2JvbGQnLFxuICAgICAgICAgICAgaXRhbGljOiAnYm9sZC1pdGFsaWMnLFxuICAgICAgICAgICAgZnJha3R1cjogJ2JvbGQtZnJha3R1cicsXG4gICAgICAgICAgICBzY3JpcHQ6ICdib2xkLXNjcmlwdCcsXG4gICAgICAgICAgICAnc2Fucy1zZXJpZic6ICdib2xkLXNhbnMtc2VyaWYnLFxuICAgICAgICAgICAgJ3NhbnMtc2VyaWYtaXRhbGljJzogJ3NhbnMtc2VyaWYtYm9sZC1pdGFsaWMnXG4gICAgICAgIH0sXG4gICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgYm9sZDogJ25vcm1hbCcsXG4gICAgICAgICAgICAnYm9sZC1pdGFsaWMnOiAnaXRhbGljJyxcbiAgICAgICAgICAgICdib2xkLWZyYWt0dXInOiAnZnJha3R1cicsXG4gICAgICAgICAgICAnYm9sZC1zY3JpcHQnOiAnc2NyaXB0JyxcbiAgICAgICAgICAgICdib2xkLXNhbnMtc2VyaWYnOiAnc2Fucy1zZXJpZicsXG4gICAgICAgICAgICAnc2Fucy1zZXJpZi1ib2xkLWl0YWxpYyc6ICdzYW5zLXNlcmlmLWl0YWxpYydcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tbW9uV3JhcHBlci5JVEFMSUNWQVJJQU5UUyA9IHtcbiAgICAgICAgaXRhbGljOiB7XG4gICAgICAgICAgICBub3JtYWw6ICdpdGFsaWMnLFxuICAgICAgICAgICAgYm9sZDogJ2JvbGQtaXRhbGljJyxcbiAgICAgICAgICAgICdzYW5zLXNlcmlmJzogJ3NhbnMtc2VyaWYtaXRhbGljJyxcbiAgICAgICAgICAgICdib2xkLXNhbnMtc2VyaWYnOiAnc2Fucy1zZXJpZi1ib2xkLWl0YWxpYydcbiAgICAgICAgfSxcbiAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICBpdGFsaWM6ICdub3JtYWwnLFxuICAgICAgICAgICAgJ2JvbGQtaXRhbGljJzogJ2JvbGQnLFxuICAgICAgICAgICAgJ3NhbnMtc2VyaWYtaXRhbGljJzogJ3NhbnMtc2VyaWYnLFxuICAgICAgICAgICAgJ3NhbnMtc2VyaWYtYm9sZC1pdGFsaWMnOiAnYm9sZC1zYW5zLXNlcmlmJ1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29tbW9uV3JhcHBlcjtcbn0oV3JhcHBlcl9qc18xLkFic3RyYWN0V3JhcHBlcikpO1xuZXhwb3J0cy5Db21tb25XcmFwcGVyID0gQ29tbW9uV3JhcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdyYXBwZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==