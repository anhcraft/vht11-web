(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\pixi.js\\lib\\pixi.es"],{"./node_modules/pixi.js/lib/pixi.es.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{utils:()=>i,AccessibilityManager:()=>a.AccessibilityManager,accessibleTarget:()=>a.accessibleTarget,InteractionData:()=>n.InteractionData,InteractionEvent:()=>n.InteractionEvent,InteractionManager:()=>n.InteractionManager,InteractionTrackingData:()=>n.InteractionTrackingData,interactiveTarget:()=>n.interactiveTarget,Application:()=>o.Application,AbstractBatchRenderer:()=>s.AbstractBatchRenderer,AbstractRenderer:()=>s.AbstractRenderer,Attribute:()=>s.Attribute,BaseRenderTexture:()=>s.BaseRenderTexture,BaseTexture:()=>s.BaseTexture,BatchDrawCall:()=>s.BatchDrawCall,BatchGeometry:()=>s.BatchGeometry,BatchPluginFactory:()=>s.BatchPluginFactory,BatchRenderer:()=>s.BatchRenderer,BatchShaderGenerator:()=>s.BatchShaderGenerator,BatchTextureArray:()=>s.BatchTextureArray,Buffer:()=>s.Buffer,Filter:()=>s.Filter,FilterState:()=>s.FilterState,Framebuffer:()=>s.Framebuffer,GLFramebuffer:()=>s.GLFramebuffer,GLProgram:()=>s.GLProgram,GLTexture:()=>s.GLTexture,Geometry:()=>s.Geometry,IGLUniformData:()=>s.IGLUniformData,MaskData:()=>s.MaskData,ObjectRenderer:()=>s.ObjectRenderer,Program:()=>s.Program,Quad:()=>s.Quad,QuadUv:()=>s.QuadUv,RenderTexture:()=>s.RenderTexture,RenderTexturePool:()=>s.RenderTexturePool,Renderer:()=>s.Renderer,Shader:()=>s.Shader,SpriteMaskFilter:()=>s.SpriteMaskFilter,State:()=>s.State,System:()=>s.System,Texture:()=>s.Texture,TextureMatrix:()=>s.TextureMatrix,TextureUvs:()=>s.TextureUvs,UniformGroup:()=>s.UniformGroup,ViewableBuffer:()=>s.ViewableBuffer,autoDetectRenderer:()=>s.autoDetectRenderer,checkMaxIfStatementsInShader:()=>s.checkMaxIfStatementsInShader,defaultFilterVertex:()=>s.defaultFilterVertex,defaultVertex:()=>s.defaultVertex,resources:()=>s.resources,systems:()=>s.systems,uniformParsers:()=>s.uniformParsers,Extract:()=>c.Extract,AppLoaderPlugin:()=>d.AppLoaderPlugin,Loader:()=>d.Loader,LoaderResource:()=>d.LoaderResource,TextureLoader:()=>d.TextureLoader,ParticleContainer:()=>p.ParticleContainer,ParticleRenderer:()=>p.ParticleRenderer,BasePrepare:()=>l.BasePrepare,CountLimiter:()=>l.CountLimiter,Prepare:()=>l.Prepare,TimeLimiter:()=>l.TimeLimiter,Spritesheet:()=>u.Spritesheet,SpritesheetLoader:()=>u.SpritesheetLoader,TilingSprite:()=>I.TilingSprite,TilingSpriteRenderer:()=>I.TilingSpriteRenderer,BitmapFont:()=>m.BitmapFont,BitmapFontData:()=>m.BitmapFontData,BitmapFontLoader:()=>m.BitmapFontLoader,BitmapText:()=>m.BitmapText,Ticker:()=>P.Ticker,TickerPlugin:()=>P.TickerPlugin,UPDATE_PRIORITY:()=>P.UPDATE_PRIORITY,ALPHA_MODES:()=>y.ALPHA_MODES,BLEND_MODES:()=>y.BLEND_MODES,BUFFER_BITS:()=>y.BUFFER_BITS,CLEAR_MODES:()=>y.CLEAR_MODES,DRAW_MODES:()=>y.DRAW_MODES,ENV:()=>y.ENV,FORMATS:()=>y.FORMATS,GC_MODES:()=>y.GC_MODES,MASK_TYPES:()=>y.MASK_TYPES,MIPMAP_MODES:()=>y.MIPMAP_MODES,MSAA_QUALITY:()=>y.MSAA_QUALITY,PRECISION:()=>y.PRECISION,RENDERER_TYPE:()=>y.RENDERER_TYPE,SCALE_MODES:()=>y.SCALE_MODES,TARGETS:()=>y.TARGETS,TYPES:()=>y.TYPES,WRAP_MODES:()=>y.WRAP_MODES,Bounds:()=>T.Bounds,Container:()=>T.Container,DisplayObject:()=>T.DisplayObject,TemporaryDisplayObject:()=>T.TemporaryDisplayObject,FillStyle:()=>X.FillStyle,GRAPHICS_CURVES:()=>X.GRAPHICS_CURVES,Graphics:()=>X.Graphics,GraphicsData:()=>X.GraphicsData,GraphicsGeometry:()=>X.GraphicsGeometry,LINE_CAP:()=>X.LINE_CAP,LINE_JOIN:()=>X.LINE_JOIN,LineStyle:()=>X.LineStyle,graphicsUtils:()=>X.graphicsUtils,Circle:()=>R.Circle,DEG_TO_RAD:()=>R.DEG_TO_RAD,Ellipse:()=>R.Ellipse,Matrix:()=>R.Matrix,ObservablePoint:()=>R.ObservablePoint,PI_2:()=>R.PI_2,Point:()=>R.Point,Polygon:()=>R.Polygon,RAD_TO_DEG:()=>R.RAD_TO_DEG,Rectangle:()=>R.Rectangle,RoundedRectangle:()=>R.RoundedRectangle,SHAPES:()=>R.SHAPES,Transform:()=>R.Transform,groupD8:()=>R.groupD8,Mesh:()=>v.Mesh,MeshBatchUvs:()=>v.MeshBatchUvs,MeshGeometry:()=>v.MeshGeometry,MeshMaterial:()=>v.MeshMaterial,NineSlicePlane:()=>M.NineSlicePlane,PlaneGeometry:()=>M.PlaneGeometry,RopeGeometry:()=>M.RopeGeometry,SimpleMesh:()=>M.SimpleMesh,SimplePlane:()=>M.SimplePlane,SimpleRope:()=>M.SimpleRope,Runner:()=>_.Runner,Sprite:()=>A.Sprite,AnimatedSprite:()=>F.AnimatedSprite,TEXT_GRADIENT:()=>E.TEXT_GRADIENT,Text:()=>E.Text,TextMetrics:()=>E.TextMetrics,TextStyle:()=>E.TextStyle,isMobile:()=>B.isMobile,settings:()=>B.settings,VERSION:()=>j,filters:()=>C,useDeprecated:()=>G});r("./node_modules/@pixi/polyfill/lib/polyfill.es.js");var i=r("./node_modules/@pixi/utils/lib/utils.es.js"),a=r("./node_modules/@pixi/accessibility/lib/accessibility.es.js"),n=r("./node_modules/@pixi/interaction/lib/interaction.es.js"),o=r("./node_modules/@pixi/app/lib/app.es.js"),s=r("./node_modules/@pixi/core/lib/core.es.js"),c=r("./node_modules/@pixi/extract/lib/extract.es.js"),d=r("./node_modules/@pixi/loaders/lib/loaders.es.js"),p=r("./node_modules/@pixi/particles/lib/particles.es.js"),l=r("./node_modules/@pixi/prepare/lib/prepare.es.js"),u=r("./node_modules/@pixi/spritesheet/lib/spritesheet.es.js"),I=r("./node_modules/@pixi/sprite-tiling/lib/sprite-tiling.es.js"),m=r("./node_modules/@pixi/text-bitmap/lib/text-bitmap.es.js"),P=r("./node_modules/@pixi/ticker/lib/ticker.es.js"),h=r("./node_modules/@pixi/filter-alpha/lib/filter-alpha.es.js"),f=r("./node_modules/@pixi/filter-blur/lib/filter-blur.es.js"),g=r("./node_modules/@pixi/filter-color-matrix/lib/filter-color-matrix.es.js"),x=r("./node_modules/@pixi/filter-displacement/lib/filter-displacement.es.js"),S=r("./node_modules/@pixi/filter-fxaa/lib/filter-fxaa.es.js"),b=r("./node_modules/@pixi/filter-noise/lib/filter-noise.es.js"),y=(r("./node_modules/@pixi/mixin-cache-as-bitmap/lib/mixin-cache-as-bitmap.es.js"),r("./node_modules/@pixi/mixin-get-child-by-name/lib/mixin-get-child-by-name.es.js"),r("./node_modules/@pixi/mixin-get-global-position/lib/mixin-get-global-position.es.js"),r("./node_modules/@pixi/constants/lib/constants.es.js")),T=r("./node_modules/@pixi/display/lib/display.es.js"),X=r("./node_modules/@pixi/graphics/lib/graphics.es.js"),R=r("./node_modules/@pixi/math/lib/math.es.js"),v=r("./node_modules/@pixi/mesh/lib/mesh.es.js"),M=r("./node_modules/@pixi/mesh-extras/lib/mesh-extras.es.js"),_=r("./node_modules/@pixi/runner/lib/runner.es.js"),A=r("./node_modules/@pixi/sprite/lib/sprite.es.js"),F=r("./node_modules/@pixi/sprite-animated/lib/sprite-animated.es.js"),E=r("./node_modules/@pixi/text/lib/text.es.js"),B=r("./node_modules/@pixi/settings/lib/settings.es.js"),L=function(e,t){return(L=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};function D(e,t){function r(){this.constructor=e}L(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var O="5.0.0";function G(){var e=this;Object.defineProperties(e,{SVG_SIZE:{get:function(){return(0,i.deprecation)(O,"PIXI.utils.SVG_SIZE property has moved to PIXI.resources.SVGResource.SVG_SIZE"),e.SVGResource.SVG_SIZE}},TransformStatic:{get:function(){return(0,i.deprecation)(O,"PIXI.TransformStatic class has been removed, use PIXI.Transform"),e.Transform}},TransformBase:{get:function(){return(0,i.deprecation)(O,"PIXI.TransformBase class has been removed, use PIXI.Transform"),e.Transform}},TRANSFORM_MODE:{get:function(){return(0,i.deprecation)(O,"PIXI.TRANSFORM_MODE property has been removed"),{STATIC:0,DYNAMIC:1}}},WebGLRenderer:{get:function(){return(0,i.deprecation)(O,"PIXI.WebGLRenderer class has moved to PIXI.Renderer"),e.Renderer}},CanvasRenderTarget:{get:function(){return(0,i.deprecation)(O,"PIXI.CanvasRenderTarget class has moved to PIXI.utils.CanvasRenderTarget"),e.utils.CanvasRenderTarget}},loader:{get:function(){return(0,i.deprecation)(O,"PIXI.loader instance has moved to PIXI.Loader.shared"),e.Loader.shared}},FilterManager:{get:function(){return(0,i.deprecation)(O,"PIXI.FilterManager class has moved to PIXI.systems.FilterSystem"),e.systems.FilterSystem}},CanvasTinter:{get:function(){return(0,i.deprecation)("5.2.0","PIXI.CanvasTinter namespace has moved to PIXI.canvasUtils"),e.canvasUtils}},GroupD8:{get:function(){return(0,i.deprecation)("5.2.0","PIXI.GroupD8 namespace has moved to PIXI.groupD8"),e.groupD8}}}),e.accessibility={},Object.defineProperties(e.accessibility,{AccessibilityManager:{get:function(){return(0,i.deprecation)("5.3.0","PIXI.accessibility.AccessibilityManager moved to PIXI.AccessibilityManager"),e.AccessibilityManager}}}),e.interaction={},Object.defineProperties(e.interaction,{InteractionManager:{get:function(){return(0,i.deprecation)("5.3.0","PIXI.interaction.InteractionManager moved to PIXI.InteractionManager"),e.InteractionManager}},InteractionData:{get:function(){return(0,i.deprecation)("5.3.0","PIXI.interaction.InteractionData moved to PIXI.InteractionData"),e.InteractionData}},InteractionEvent:{get:function(){return(0,i.deprecation)("5.3.0","PIXI.interaction.InteractionEvent moved to PIXI.InteractionEvent"),e.InteractionEvent}}}),e.prepare={},Object.defineProperties(e.prepare,{BasePrepare:{get:function(){return(0,i.deprecation)("5.2.1","PIXI.prepare.BasePrepare moved to PIXI.BasePrepare"),e.BasePrepare}},Prepare:{get:function(){return(0,i.deprecation)("5.2.1","PIXI.prepare.Prepare moved to PIXI.Prepare"),e.Prepare}},CanvasPrepare:{get:function(){return(0,i.deprecation)("5.2.1","PIXI.prepare.CanvasPrepare moved to PIXI.CanvasPrepare"),e.CanvasPrepare}}}),e.extract={},Object.defineProperties(e.extract,{Extract:{get:function(){return(0,i.deprecation)("5.2.1","PIXI.extract.Extract moved to PIXI.Extract"),e.Extract}},CanvasExtract:{get:function(){return(0,i.deprecation)("5.2.1","PIXI.extract.CanvasExtract moved to PIXI.CanvasExtract"),e.CanvasExtract}}}),e.extras={},Object.defineProperties(e.extras,{TilingSprite:{get:function(){return(0,i.deprecation)(O,"PIXI.extras.TilingSprite class has moved to PIXI.TilingSprite"),e.TilingSprite}},TilingSpriteRenderer:{get:function(){return(0,i.deprecation)(O,"PIXI.extras.TilingSpriteRenderer class has moved to PIXI.TilingSpriteRenderer"),e.TilingSpriteRenderer}},AnimatedSprite:{get:function(){return(0,i.deprecation)(O,"PIXI.extras.AnimatedSprite class has moved to PIXI.AnimatedSprite"),e.AnimatedSprite}},BitmapText:{get:function(){return(0,i.deprecation)(O,"PIXI.extras.BitmapText class has moved to PIXI.BitmapText"),e.BitmapText}}}),e.TilingSprite.fromFrame=function(t,r,a){return(0,i.deprecation)("5.3.0","TilingSprite.fromFrame is deprecated, use TilingSprite.from"),e.TilingSprite.from(t,{width:r,height:a})},e.TilingSprite.fromImage=function(t,r,a,n){return void 0===n&&(n={}),(0,i.deprecation)("5.3.0","TilingSprite.fromImage is deprecated, use TilingSprite.from"),n&&"object"!=typeof n&&(n={scaleMode:arguments[4],resourceOptions:{crossorigin:arguments[3]}}),n.width=r,n.height=a,e.TilingSprite.from(t,n)},Object.defineProperties(e.utils,{getSvgSize:{get:function(){return(0,i.deprecation)(O,"PIXI.utils.getSvgSize function has moved to PIXI.resources.SVGResource.getSize"),e.resources.SVGResource.getSize}}}),e.mesh={},Object.defineProperties(e.mesh,{Mesh:{get:function(){return(0,i.deprecation)(O,"PIXI.mesh.Mesh class has moved to PIXI.SimpleMesh"),e.SimpleMesh}},NineSlicePlane:{get:function(){return(0,i.deprecation)(O,"PIXI.mesh.NineSlicePlane class has moved to PIXI.NineSlicePlane"),e.NineSlicePlane}},Plane:{get:function(){return(0,i.deprecation)(O,"PIXI.mesh.Plane class has moved to PIXI.SimplePlane"),e.SimplePlane}},Rope:{get:function(){return(0,i.deprecation)(O,"PIXI.mesh.Rope class has moved to PIXI.SimpleRope"),e.SimpleRope}},RawMesh:{get:function(){return(0,i.deprecation)(O,"PIXI.mesh.RawMesh class has moved to PIXI.Mesh"),e.Mesh}},CanvasMeshRenderer:{get:function(){return(0,i.deprecation)(O,"PIXI.mesh.CanvasMeshRenderer class has moved to PIXI.CanvasMeshRenderer"),e.CanvasMeshRenderer}},MeshRenderer:{get:function(){return(0,i.deprecation)(O,"PIXI.mesh.MeshRenderer class has moved to PIXI.MeshRenderer"),e.MeshRenderer}}}),e.particles={},Object.defineProperties(e.particles,{ParticleContainer:{get:function(){return(0,i.deprecation)(O,"PIXI.particles.ParticleContainer class has moved to PIXI.ParticleContainer"),e.ParticleContainer}},ParticleRenderer:{get:function(){return(0,i.deprecation)(O,"PIXI.particles.ParticleRenderer class has moved to PIXI.ParticleRenderer"),e.ParticleRenderer}}}),e.ticker={},Object.defineProperties(e.ticker,{Ticker:{get:function(){return(0,i.deprecation)(O,"PIXI.ticker.Ticker class has moved to PIXI.Ticker"),e.Ticker}},shared:{get:function(){return(0,i.deprecation)(O,"PIXI.ticker.shared instance has moved to PIXI.Ticker.shared"),e.Ticker.shared}}}),e.loaders={},Object.defineProperties(e.loaders,{Loader:{get:function(){return(0,i.deprecation)(O,"PIXI.loaders.Loader class has moved to PIXI.Loader"),e.Loader}},Resource:{get:function(){return(0,i.deprecation)(O,"PIXI.loaders.Resource class has moved to PIXI.LoaderResource"),e.LoaderResource}},bitmapFontParser:{get:function(){return(0,i.deprecation)(O,"PIXI.loaders.bitmapFontParser function has moved to PIXI.BitmapFontLoader.use"),e.BitmapFontLoader.use}},parseBitmapFontData:{get:function(){(0,i.deprecation)(O,"PIXI.loaders.parseBitmapFontData function has removed")}},spritesheetParser:{get:function(){return(0,i.deprecation)(O,"PIXI.loaders.spritesheetParser function has moved to PIXI.SpritesheetLoader.use"),e.SpritesheetLoader.use}},getResourcePath:{get:function(){return(0,i.deprecation)(O,"PIXI.loaders.getResourcePath property has moved to PIXI.SpritesheetLoader.getResourcePath"),e.SpritesheetLoader.getResourcePath}}}),e.Loader.addPixiMiddleware=function(t){return(0,i.deprecation)(O,"PIXI.loaders.Loader.addPixiMiddleware function is deprecated, use PIXI.loaders.Loader.registerPlugin"),e.loaders.Loader.registerPlugin({use:t()})};var t=function(e){return"on"+e.charAt(0).toUpperCase()+e.slice(1)};Object.assign(e.Loader.prototype,{on:function(e){var r=t(e);(0,i.deprecation)(O,"PIXI.Loader#on is completely deprecated, use PIXI.Loader#"+r+".add")},once:function(e){var r=t(e);(0,i.deprecation)(O,"PIXI.Loader#once is completely deprecated, use PIXI.Loader#"+r+".once")},off:function(e){var r=t(e);(0,i.deprecation)(O,"PIXI.Loader#off is completely deprecated, use PIXI.Loader#"+r+".detach")}}),Object.defineProperty(e.extract,"WebGLExtract",{get:function(){return(0,i.deprecation)(O,"PIXI.extract.WebGLExtract method has moved to PIXI.Extract"),e.Extract}}),Object.defineProperty(e.prepare,"WebGLPrepare",{get:function(){return(0,i.deprecation)(O,"PIXI.prepare.WebGLPrepare class has moved to PIXI.Prepare"),e.Prepare}}),e.Container.prototype._renderWebGL=function(e){(0,i.deprecation)(O,"PIXI.Container._renderWebGL method has moved to PIXI.Container._render"),this._render(e)},e.Container.prototype.renderWebGL=function(e){(0,i.deprecation)(O,"PIXI.Container.renderWebGL method has moved to PIXI.Container.render"),this.render(e)},e.DisplayObject.prototype.renderWebGL=function(e){(0,i.deprecation)(O,"PIXI.DisplayObject.renderWebGL method has moved to PIXI.DisplayObject.render"),this.render(e)},e.Container.prototype.renderAdvancedWebGL=function(e){(0,i.deprecation)(O,"PIXI.Container.renderAdvancedWebGL method has moved to PIXI.Container.renderAdvanced"),this.renderAdvanced(e)},Object.defineProperties(e.settings,{TRANSFORM_MODE:{get:function(){return(0,i.deprecation)(O,"PIXI.settings.TRANSFORM_MODE property has been removed"),0},set:function(){(0,i.deprecation)(O,"PIXI.settings.TRANSFORM_MODE property has been removed")}}});var r=e.BaseTexture;r.prototype.loadSource=function(t){(0,i.deprecation)(O,"PIXI.BaseTexture.loadSource method has been deprecated");var r=e.resources.autoDetectResource(t);r.internal=!0,this.setResource(r),this.update()};var a=!1;Object.defineProperties(r.prototype,{hasLoaded:{get:function(){return(0,i.deprecation)(O,"PIXI.BaseTexture.hasLoaded property has been removed, use PIXI.BaseTexture.valid"),this.valid}},imageUrl:{get:function(){var e;return(0,i.deprecation)(O,"PIXI.BaseTexture.imageUrl property has been removed, use PIXI.BaseTexture.resource.url"),null===(e=this.resource)||void 0===e?void 0:e.url},set:function(e){(0,i.deprecation)(O,"PIXI.BaseTexture.imageUrl property has been removed, use PIXI.BaseTexture.resource.url"),this.resource&&(this.resource.url=e)}},source:{get:function(){return(0,i.deprecation)(O,"PIXI.BaseTexture.source property has been moved, use `PIXI.BaseTexture.resource.source`"),this.resource.source},set:function(e){(0,i.deprecation)(O,"PIXI.BaseTexture.source property has been moved, use `PIXI.BaseTexture.resource.source` if you want to set HTMLCanvasElement. Otherwise, create new BaseTexture."),this.resource&&(this.resource.source=e)}},premultiplyAlpha:{get:function(){return(0,i.deprecation)("5.2.0","PIXI.BaseTexture.premultiplyAlpha property has been changed to `alphaMode`, see `PIXI.ALPHA_MODES`"),0!==this.alphaMode},set:function(e){(0,i.deprecation)("5.2.0","PIXI.BaseTexture.premultiplyAlpha property has been changed to `alphaMode`, see `PIXI.ALPHA_MODES`"),this.alphaMode=Number(e)}},_id:{get:function(){return a||((0,i.deprecation)("5.2.0","PIXI.BaseTexture._id batch local field has been changed to `_batchLocation`"),a=!0),this._batchLocation},set:function(e){this._batchLocation=e}}}),r.fromImage=function(e,t,a,n){(0,i.deprecation)(O,"PIXI.BaseTexture.fromImage method has been replaced with PIXI.BaseTexture.from");var o={scale:n,crossorigin:t};return r.from(e,{scaleMode:a,resourceOptions:o})},r.fromCanvas=function(e,t){return(0,i.deprecation)(O,"PIXI.BaseTexture.fromCanvas method has been replaced with PIXI.BaseTexture.from"),r.from(e,{scaleMode:t})},r.fromSVG=function(e,t,a,n){(0,i.deprecation)(O,"PIXI.BaseTexture.fromSVG method has been replaced with PIXI.BaseTexture.from");var o={scale:n,crossorigin:t};return r.from(e,{scaleMode:a,resourceOptions:o})},Object.defineProperties(e.resources.ImageResource.prototype,{premultiplyAlpha:{get:function(){return(0,i.deprecation)("5.2.0","PIXI.resources.ImageResource.premultiplyAlpha property has been changed to `alphaMode`, see `PIXI.ALPHA_MODES`"),0!==this.alphaMode},set:function(e){(0,i.deprecation)("5.2.0","PIXI.resources.ImageResource.premultiplyAlpha property has been changed to `alphaMode`, see `PIXI.ALPHA_MODES`"),this.alphaMode=Number(e)}}}),e.Point.prototype.copy=function(e){return(0,i.deprecation)(O,"PIXI.Point.copy method has been replaced with PIXI.Point.copyFrom"),this.copyFrom(e)},e.ObservablePoint.prototype.copy=function(e){return(0,i.deprecation)(O,"PIXI.ObservablePoint.copy method has been replaced with PIXI.ObservablePoint.copyFrom"),this.copyFrom(e)},e.Rectangle.prototype.copy=function(e){return(0,i.deprecation)(O,"PIXI.Rectangle.copy method has been replaced with PIXI.Rectangle.copyFrom"),this.copyFrom(e)},e.Matrix.prototype.copy=function(e){return(0,i.deprecation)(O,"PIXI.Matrix.copy method has been replaced with PIXI.Matrix.copyTo"),this.copyTo(e)},e.systems.StateSystem.prototype.setState=function(e){return(0,i.deprecation)("v5.1.0","StateSystem.setState has been renamed to StateSystem.set"),this.set(e)},Object.assign(e.systems.FilterSystem.prototype,{getRenderTarget:function(e,t){return(0,i.deprecation)(O,"PIXI.FilterManager.getRenderTarget method has been replaced with PIXI.systems.FilterSystem#getFilterTexture"),this.getFilterTexture(null,t)},returnRenderTarget:function(e){(0,i.deprecation)(O,"PIXI.FilterManager.returnRenderTarget method has been replaced with PIXI.systems.FilterSystem.returnFilterTexture"),this.returnFilterTexture(e)},calculateScreenSpaceMatrix:function(e){(0,i.deprecation)(O,"PIXI.systems.FilterSystem.calculateScreenSpaceMatrix method is removed, use `(vTextureCoord * inputSize.xy) + outputFrame.xy` instead");var t=e.identity(),r=this.activeState,a=r.sourceFrame,n=r.destinationFrame;return t.translate(a.x/n.width,a.y/n.height),t.scale(n.width,n.height),t},calculateNormalizedScreenSpaceMatrix:function(e){(0,i.deprecation)(O,"PIXI.systems.FilterManager.calculateNormalizedScreenSpaceMatrix method is removed, use `((vTextureCoord * inputSize.xy) + outputFrame.xy) / outputFrame.zw` instead.");var t=this.activeState,r=t.sourceFrame,a=t.destinationFrame,n=e.identity();n.translate(r.x/a.width,r.y/a.height);var o=a.width/r.width,s=a.height/r.height;return n.scale(o,s),n}}),Object.defineProperties(e.RenderTexture.prototype,{sourceFrame:{get:function(){return(0,i.deprecation)(O,"PIXI.RenderTexture.sourceFrame property has been removed"),this.filterFrame}},size:{get:function(){return(0,i.deprecation)(O,"PIXI.RenderTexture.size property has been removed"),this._frame}}});var n=function(e){function t(t,r,a,n){return(0,i.deprecation)(O,"PIXI.filters.BlurXFilter class is deprecated, use PIXI.filters.BlurFilterPass"),e.call(this,!0,t,r,a,n)||this}return D(t,e),t}(e.filters.BlurFilterPass),o=function(e){function t(t,r,a,n){return(0,i.deprecation)(O,"PIXI.filters.BlurYFilter class is deprecated, use PIXI.filters.BlurFilterPass"),e.call(this,!1,t,r,a,n)||this}return D(t,e),t}(e.filters.BlurFilterPass);Object.assign(e.filters,{BlurXFilter:n,BlurYFilter:o});var s=e.Sprite,c=e.Texture,d=e.Graphics;function p(e,t,r,a){return(0,i.deprecation)(O,"PIXI.Sprite."+e+" method is deprecated, use PIXI.Sprite.from"),s.from(t,{resourceOptions:{scale:a,crossorigin:r}})}function l(e,t,r,a){return(0,i.deprecation)(O,"PIXI.Texture."+e+" method is deprecated, use PIXI.Texture.from"),c.from(t,{resourceOptions:{scale:a,crossorigin:r}})}d.prototype.generateCanvasTexture||(d.prototype.generateCanvasTexture=function(){(0,i.deprecation)(O,'PIXI.Graphics.generateCanvasTexture method is only available in "pixi.js-legacy"')}),Object.defineProperty(d.prototype,"graphicsData",{get:function(){return(0,i.deprecation)(O,"PIXI.Graphics.graphicsData property is deprecated, use PIXI.Graphics.geometry.graphicsData"),this.geometry.graphicsData}}),s.fromImage=p.bind(null,"fromImage"),s.fromSVG=p.bind(null,"fromSVG"),s.fromCanvas=p.bind(null,"fromCanvas"),s.fromVideo=p.bind(null,"fromVideo"),s.fromFrame=p.bind(null,"fromFrame"),c.fromImage=l.bind(null,"fromImage"),c.fromSVG=l.bind(null,"fromSVG"),c.fromCanvas=l.bind(null,"fromCanvas"),c.fromVideo=l.bind(null,"fromVideo"),c.fromFrame=l.bind(null,"fromFrame"),Object.defineProperty(e.AbstractRenderer.prototype,"autoResize",{get:function(){return(0,i.deprecation)(O,"PIXI.AbstractRenderer.autoResize property is deprecated, use PIXI.AbstractRenderer.autoDensity"),this.autoDensity},set:function(e){(0,i.deprecation)(O,"PIXI.AbstractRenderer.autoResize property is deprecated, use PIXI.AbstractRenderer.autoDensity"),this.autoDensity=e}}),Object.defineProperty(e.Renderer.prototype,"textureManager",{get:function(){return(0,i.deprecation)(O,"PIXI.Renderer.textureManager property is deprecated, use PIXI.Renderer.texture"),this.texture}}),e.utils.mixins={mixin:function(){(0,i.deprecation)(O,"PIXI.utils.mixins.mixin function is no longer available")},delayMixin:function(){(0,i.deprecation)(O,"PIXI.utils.mixins.delayMixin function is no longer available")},performMixins:function(){(0,i.deprecation)(O,"PIXI.utils.mixins.performMixins function is no longer available")}},Object.defineProperty(e.BitmapText.prototype,"font",{get:function(){return(0,i.deprecation)("5.3.0","PIXI.BitmapText.font property is deprecated, use fontName, fontSize, tint or align properties"),{name:this._fontName,size:this._fontSize,tint:this._tint,align:this._align}},set:function(t){if((0,i.deprecation)("5.3.0","PIXI.BitmapText.font property is deprecated, use fontName, fontSize, tint or align properties"),t){var r={font:t};this._upgradeStyle(r),r.fontSize=r.fontSize||e.BitmapFont.available[r.fontName].size,this._fontName=r.fontName,this._fontSize=r.fontSize,this.dirty=!0}}})}s.Renderer.registerPlugin("accessibility",a.AccessibilityManager),s.Renderer.registerPlugin("extract",c.Extract),s.Renderer.registerPlugin("interaction",n.InteractionManager),s.Renderer.registerPlugin("particle",p.ParticleRenderer),s.Renderer.registerPlugin("prepare",l.Prepare),s.Renderer.registerPlugin("batch",s.BatchRenderer),s.Renderer.registerPlugin("tilingSprite",I.TilingSpriteRenderer),d.Loader.registerPlugin(m.BitmapFontLoader),d.Loader.registerPlugin(u.SpritesheetLoader),o.Application.registerPlugin(P.TickerPlugin),o.Application.registerPlugin(d.AppLoaderPlugin);var j="5.3.7",C={AlphaFilter:h.AlphaFilter,BlurFilter:f.BlurFilter,BlurFilterPass:f.BlurFilterPass,ColorMatrixFilter:g.ColorMatrixFilter,DisplacementFilter:x.DisplacementFilter,FXAAFilter:S.FXAAFilter,NoiseFilter:b.NoiseFilter}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,