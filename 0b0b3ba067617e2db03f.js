(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\pixi-projection\\dist\\pixi-projection"],{"./node_modules/pixi-projection/dist/pixi-projection.js":function(){!function(t){!function(t){t.getIntersectionFactor=function(t,e,r,i,o){var n=e.x-t.x,a=r.x-i.x,s=r.x-t.x,c=e.y-t.y,u=r.y-i.y,l=r.y-t.y,p=n*u-c*a;if(Math.abs(p)<1e-7)return o.x=n,o.y=c,0;var h=(s*u-l*a)/p,f=(n*l-c*s)/p;return f<1e-6||f-1>-1e-6?-1:(o.x=t.x+h*(e.x-t.x),o.y=t.y+h*(e.y-t.y),1)},t.getPositionFromQuad=function(t,e,r){r=r||new PIXI.Point;var i=1-e.x,o=1-i,n=1-e.y,a=1-n;return r.x=(t[0].x*i+t[1].x*o)*n+(t[3].x*i+t[2].x*o)*a,r.y=(t[0].y*i+t[1].y*o)*n+(t[3].y*i+t[2].y*o)*a,r}}(t.utils||(t.utils={}))}(e||(e={})),PIXI.projection=e,function(t){var e=function(){function t(t,e){void 0===e&&(e=!0),this._enabled=!1,this.legacy=t,e&&(this.enabled=!0),this.legacy.proj=this}return Object.defineProperty(t.prototype,"enabled",{get:function(){return this._enabled},set:function(t){this._enabled=t},enumerable:!0,configurable:!0}),t.prototype.clear=function(){},t}();t.AbstractProjection=e,function(t){t[t.NONE=0]="NONE",t[t.BEFORE_PROJ=4]="BEFORE_PROJ",t[t.PROJ=5]="PROJ",t[t.ALL=9]="ALL"}(t.TRANSFORM_STEP||(t.TRANSFORM_STEP={}))}(e||(e={}));var t,e,r=this&&this.__extends||(t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(e,r)},function(e,r){function i(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(i.prototype=r.prototype,new i)});!function(t){function e(t){var e=this.proj,r=this,i=t._worldID,o=r.localTransform,n=e.scaleAfterAffine&&e.affine>=2;r._localID!==r._currentLocalID&&(n?(o.a=r._cx,o.b=r._sx,o.c=r._cy,o.d=r._sy,o.tx=r.position._x,o.ty=r.position._y):(o.a=r._cx*r.scale._x,o.b=r._sx*r.scale._x,o.c=r._cy*r.scale._y,o.d=r._sy*r.scale._y,o.tx=r.position._x-(r.pivot._x*o.a+r.pivot._y*o.c),o.ty=r.position._y-(r.pivot._x*o.b+r.pivot._y*o.d)),r._currentLocalID=r._localID,e._currentProjID=-1);var a=e._projID;if(e._currentProjID!==a&&(e._currentProjID=a,e.updateLocalTransform(o),r._parentID=-1),r._parentID!==i){var s=t.proj;s&&!s._affine?e.world.setToMult(s.world,e.local):e.world.setToMultLegacy(t.worldTransform,e.local);var c=r.worldTransform;e.world.copyTo(c,e._affine,e.affinePreserveOrientation),n&&(c.a*=r.scale._x,c.b*=r.scale._x,c.c*=r.scale._y,c.d*=r.scale._y,c.tx-=r.pivot._x*c.a+r.pivot._y*c.c,c.ty-=r.pivot._x*c.b+r.pivot._y*c.d),r._parentID=i,r._worldID++}}var i=function(i){function o(){var e=null!==i&&i.apply(this,arguments)||this;return e._projID=0,e._currentProjID=-1,e._affine=t.AFFINE.NONE,e.affinePreserveOrientation=!1,e.scaleAfterAffine=!0,e}return r(o,i),o.prototype.updateLocalTransform=function(t){},Object.defineProperty(o.prototype,"affine",{get:function(){return this._affine},set:function(t){this._affine!=t&&(this._affine=t,this._currentProjID=-1,this.legacy._currentLocalID=-1)},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"enabled",{set:function(t){t!==this._enabled&&(this._enabled=t,t?(this.legacy.updateTransform=e,this.legacy._parentID=-1):(this.legacy.updateTransform=PIXI.Transform.prototype.updateTransform,this.legacy._parentID=-1))},enumerable:!0,configurable:!0}),o.prototype.clear=function(){this._currentProjID=-1,this._projID=0},o}(t.AbstractProjection);t.LinearProjection=i}(e||(e={})),function(t){var e=PIXI.TYPES,i=PIXI.utils.premultiplyTint,o=function(t){function i(r){void 0===r&&(r=!1);var i=t.call(this)||this;return i._buffer=new PIXI.Buffer(null,r,!1),i._indexBuffer=new PIXI.Buffer(null,r,!0),i.addAttribute("aVertexPosition",i._buffer,3,!1,e.FLOAT).addAttribute("aTextureCoord",i._buffer,2,!1,e.FLOAT).addAttribute("aColor",i._buffer,4,!0,e.UNSIGNED_BYTE).addAttribute("aTextureId",i._buffer,1,!0,e.FLOAT).addIndex(i._indexBuffer),i}return r(i,t),i}(PIXI.Geometry);t.Batch3dGeometry=o;var n=function(){function t(){}return t.create=function(t){var e=Object.assign({vertex:"precision highp float;\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\n\tgl_Position.xyw = projectionMatrix * aVertexPosition;\n\tgl_Position.z = 0.0;\n\n\tvTextureCoord = aTextureCoord;\n\tvTextureId = aTextureId;\n\tvColor = aColor;\n}\n",fragment:"\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nvarying float vTextureId;\nuniform sampler2D uSamplers[%count%];\n\nvoid main(void){\nvec4 color;\n%forloop%\ngl_FragColor = color * vColor;\n}",geometryClass:o,vertexSize:7},t),n=e.vertex,a=e.fragment,s=e.vertexSize,c=e.geometryClass;return function(t){function e(e){var r=t.call(this,e)||this;return r.shaderGenerator=new PIXI.BatchShaderGenerator(n,a),r.geometryClass=c,r.vertexSize=s,r}return r(e,t),e.prototype.packInterleavedGeometry=function(t,e,r,o,n){var a=e.uint32View,s=e.float32View,c=o/this.vertexSize,u=t.uvs,l=t.indices,p=t.vertexData,h=t.vertexData2d,f=t._texture.baseTexture._batchLocation,d=Math.min(t.worldAlpha,1),y=d<1&&t._texture.baseTexture.alphaMode?i(t._tintRGB,d):t._tintRGB+(255*d<<24);if(h)for(var m=0,v=0;v<h.length;v+=3,m+=2)s[o++]=h[v],s[o++]=h[v+1],s[o++]=h[v+2],s[o++]=u[m],s[o++]=u[m+1],a[o++]=y,s[o++]=f;else for(v=0;v<p.length;v+=2)s[o++]=p[v],s[o++]=p[v+1],s[o++]=1,s[o++]=u[v],s[o++]=u[v+1],a[o++]=y,s[o++]=f;for(v=0;v<l.length;v++)r[n++]=c+l[v]},e}(PIXI.AbstractBatchRenderer)},t}();t.Batch2dPluginFactory=n,PIXI.Renderer.registerPlugin("batch2d",n.create({}))}(e||(e={})),function(t){var e=PIXI.AbstractBatchRenderer,i=PIXI.utils.premultiplyBlendMode,o=function(t){function o(){var e=null!==t&&t.apply(this,arguments)||this;return e.forceMaxTextures=0,e.defUniforms={},e}return r(o,t),o.prototype.getUniforms=function(t){return this.defUniforms},o.prototype.syncUniforms=function(t){if(t){var e=this._shader;for(var r in t)e.uniforms[r]=t[r]}},o.prototype.buildDrawCalls=function(t,r,o){var n=this,a=this,s=a._bufferedElements,c=a._attributeBuffer,u=a._indexBuffer,l=a.vertexSize,p=e._drawCallPool,h=this._dcIndex,f=this._aIndex,d=this._iIndex,y=p[h];y.start=this._iIndex,y.texArray=t;for(var m=r;m<o;++m){var v=s[m],x=v._texture.baseTexture,_=i[x.alphaMode?1:0][v.blendMode],g=this.getUniforms(v);s[m]=null,r<m&&(y.blend!==_||y.uniforms!==g)&&(y.size=d-y.start,r=m,(y=p[++h]).texArray=t,y.start=d),this.packInterleavedGeometry(v,c,u,f,d),f+=v.vertexData.length/2*l,d+=v.indices.length,y.blend=_,y.uniforms=g}r<o&&(y.size=d-y.start,++h),n._dcIndex=h,n._aIndex=f,n._iIndex=d},o.prototype.drawBatches=function(){for(var t=this._dcIndex,r=this.renderer,i=r.gl,o=r.state,n=r.shader,a=e._drawCallPool,s=null,c=null,u=0;u<t;u++){var l=a[u],p=l.texArray,h=l.type,f=l.size,d=l.start,y=l.blend,m=l.uniforms;c!==p&&(c=p,this.bindAndClearTexArray(p)),s!==m&&(s=m,this.syncUniforms(m),n.syncUniformGroup(this._shader.uniformGroup)),this.state.blendMode=y,o.set(this.state),i.drawElements(h,f,i.UNSIGNED_SHORT,2*d)}},o.prototype.contextChange=function(){if(!this.forceMaxTextures)return t.prototype.contextChange.call(this),void this.syncUniforms(this.defUniforms);this.renderer.gl;var e=this;e.MAX_TEXTURES=this.forceMaxTextures,this._shader=e.shaderGenerator.generateShader(this.MAX_TEXTURES),this.syncUniforms(this.defUniforms);for(var r=0;r<e._packedGeometryPoolSize;r++)e._packedGeometries[r]=new this.geometryClass;this.initFlushBuffers()},o}(e);t.UniformBatchRenderer=o}(e||(e={})),function(t){var e=[new PIXI.Point,new PIXI.Point,new PIXI.Point,new PIXI.Point],r=[0,0,0,0],i=function(){function t(){this.surfaceID="default",this._updateID=0,this.vertexSrc="",this.fragmentSrc=""}return t.prototype.fillUniforms=function(t){},t.prototype.clear=function(){},t.prototype.boundsQuad=function(t,i,o){for(var n=i[0],a=i[1],s=i[0],c=i[1],u=2;u<8;u+=2)n>i[u]&&(n=i[u]),s<i[u]&&(s=i[u]),a>i[u+1]&&(a=i[u+1]),c<i[u+1]&&(c=i[u+1]);if(e[0].set(n,a),this.apply(e[0],e[0]),e[1].set(s,a),this.apply(e[1],e[1]),e[2].set(s,c),this.apply(e[2],e[2]),e[3].set(n,c),this.apply(e[3],e[3]),o)o.apply(e[0],e[0]),o.apply(e[1],e[1]),o.apply(e[2],e[2]),o.apply(e[3],e[3]),i[0]=e[0].x,i[1]=e[0].y,i[2]=e[1].x,i[3]=e[1].y,i[4]=e[2].x,i[5]=e[2].y,i[6]=e[3].x,i[7]=e[3].y;else{for(u=1;u<=3;u++)if(e[u].y<e[0].y||e[u].y==e[0].y&&e[u].x<e[0].x){var l=e[0];e[0]=e[u],e[u]=l}for(u=1;u<=3;u++)r[u]=Math.atan2(e[u].y-e[0].y,e[u].x-e[0].x);for(u=1;u<=3;u++)for(var p=u+1;p<=3;p++)if(r[u]>r[p]){l=e[u];e[u]=e[p],e[p]=l;var h=r[u];r[u]=r[p],r[p]=h}if(i[0]=e[0].x,i[1]=e[0].y,i[2]=e[1].x,i[3]=e[1].y,i[4]=e[2].x,i[5]=e[2].y,i[6]=e[3].x,i[7]=e[3].y,(e[3].x-e[2].x)*(e[1].y-e[2].y)-(e[1].x-e[2].x)*(e[3].y-e[2].y)<0)return i[4]=e[3].x,void(i[5]=e[3].y)}},t}();t.Surface=i}(e||(e={})),function(t){var e=new PIXI.Matrix,i=new PIXI.Rectangle,o=new PIXI.Point,n=function(t){function n(){var e=t.call(this)||this;return e.distortion=new PIXI.Point,e}return r(n,t),n.prototype.clear=function(){this.distortion.set(0,0)},n.prototype.apply=function(t,e){e=e||new PIXI.Point;var r=this.distortion,i=t.x*t.y;return e.x=t.x+r.x*i,e.y=t.y+r.y*i,e},n.prototype.applyInverse=function(t,e){e=e||new PIXI.Point;var r=t.x,i=t.y,o=this.distortion.x,n=this.distortion.y;if(0==o)e.x=r,e.y=i/(1+n*r);else if(0==n)e.y=i,e.x=r/(1+o*i);else{var a=.5*(i*o-r*n+1)/n,s=a*a+r/n;if(s<=1e-5)return e.set(NaN,NaN),e;e.x=n>0?-a+Math.sqrt(s):-a-Math.sqrt(s),e.y=(r/e.x-1)/o}return e},n.prototype.mapSprite=function(t,e,r){var o=t.texture;return i.x=-t.anchor.x*o.orig.width,i.y=-t.anchor.y*o.orig.height,i.width=o.orig.width,i.height=o.orig.height,this.mapQuad(i,e,r||t.transform)},n.prototype.mapQuad=function(t,r,i){var n=-t.x/t.width,a=-t.y/t.height,s=(1-t.x)/t.width,c=(1-t.y)/t.height,u=r[0].x*(1-n)+r[1].x*n,l=r[0].y*(1-n)+r[1].y*n,p=r[0].x*(1-s)+r[1].x*s,h=r[0].y*(1-s)+r[1].y*s,f=r[3].x*(1-n)+r[2].x*n,d=r[3].y*(1-n)+r[2].y*n,y=r[3].x*(1-s)+r[2].x*s,m=r[3].y*(1-s)+r[2].y*s,v=u*(1-a)+f*a,x=l*(1-a)+d*a,_=p*(1-a)+y*a,g=h*(1-a)+m*a,I=u*(1-c)+f*c,b=l*(1-c)+d*c,T=p*(1-c)+y*c,P=h*(1-c)+m*c,j=e;return j.tx=v,j.ty=x,j.a=_-v,j.b=g-x,j.c=I-v,j.d=b-x,o.set(T,P),j.applyInverse(o,o),this.distortion.set(o.x-1,o.y-1),i.setFromMatrix(j),this},n.prototype.fillUniforms=function(t){t.distortion=t.distortion||new Float32Array([0,0,0,0]);var e=Math.abs(this.distortion.x),r=Math.abs(this.distortion.y);t.distortion[0]=1e4*e<=r?0:this.distortion.x,t.distortion[1]=1e4*r<=e?0:this.distortion.y,t.distortion[2]=1/t.distortion[0],t.distortion[3]=1/t.distortion[1]},n}(t.Surface);t.BilinearSurface=n}(e||(e={})),function(t){var e=function(e){function i(){var r=e.call(this)||this;return r.proj=new t.ProjectionSurface(r.transform),r}return r(i,e),Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj},enumerable:!0,configurable:!0}),i}(PIXI.Container);t.Container2s=e}(e||(e={})),function(t){var e=PIXI.Transform.prototype.updateTransform;function i(t){var r=this.proj,i=t.proj;return i?i._surface?(r._activeProjection=i,this.updateLocalTransform(),this.localTransform.copyTo(this.worldTransform),void(this._parentID<0&&++this._worldID)):(e.call(this,t),void(r._activeProjection=i._activeProjection)):(e.call(this,t),void(r._activeProjection=null))}var o=function(e){function o(t,r){var i=e.call(this,t,r)||this;return i._surface=null,i._activeProjection=null,i._currentSurfaceID=-1,i._currentLegacyID=-1,i._lastUniforms=null,i}return r(o,e),Object.defineProperty(o.prototype,"enabled",{set:function(t){t!==this._enabled&&(this._enabled=t,t?(this.legacy.updateTransform=i,this.legacy._parentID=-1):(this.legacy.updateTransform=PIXI.Transform.prototype.updateTransform,this.legacy._parentID=-1))},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"surface",{get:function(){return this._surface},set:function(t){this._surface!=t&&(this._surface=t||null,this.legacy._parentID=-1)},enumerable:!0,configurable:!0}),o.prototype.applyPartial=function(t,e){return null!==this._activeProjection?(e=this.legacy.worldTransform.apply(t,e),this._activeProjection.surface.apply(e,e)):null!==this._surface?this.surface.apply(t,e):this.legacy.worldTransform.apply(t,e)},o.prototype.apply=function(t,e){return null!==this._activeProjection?(e=this.legacy.worldTransform.apply(t,e),this._activeProjection.surface.apply(e,e),this._activeProjection.legacy.worldTransform.apply(e,e)):null!==this._surface?(e=this.surface.apply(t,e),this.legacy.worldTransform.apply(e,e)):this.legacy.worldTransform.apply(t,e)},o.prototype.applyInverse=function(t,e){return null!==this._activeProjection?(e=this._activeProjection.legacy.worldTransform.applyInverse(t,e),this._activeProjection._surface.applyInverse(e,e),this.legacy.worldTransform.applyInverse(e,e)):null!==this._surface?(e=this.legacy.worldTransform.applyInverse(t,e),this._surface.applyInverse(e,e)):this.legacy.worldTransform.applyInverse(t,e)},o.prototype.mapBilinearSprite=function(e,r){this._surface instanceof t.BilinearSurface||(this.surface=new t.BilinearSurface),this.surface.mapSprite(e,r,this.legacy)},o.prototype.clear=function(){this.surface&&this.surface.clear()},Object.defineProperty(o.prototype,"uniforms",{get:function(){return this._currentLegacyID===this.legacy._worldID&&this._currentSurfaceID===this.surface._updateID||(this._lastUniforms=this._lastUniforms||{},this._lastUniforms.translationMatrix=this.legacy.worldTransform,this._surface.fillUniforms(this._lastUniforms)),this._lastUniforms},enumerable:!0,configurable:!0}),o}(t.AbstractProjection);t.ProjectionSurface=o}(e||(e={})),function(t){var e=PIXI.TYPES,i=PIXI.utils.premultiplyTint,o=function(t){function i(r){void 0===r&&(r=!1);var i=t.call(this)||this;return i._buffer=new PIXI.Buffer(null,r,!1),i._indexBuffer=new PIXI.Buffer(null,r,!0),i.addAttribute("aVertexPosition",i._buffer,2,!1,e.FLOAT).addAttribute("aTrans1",i._buffer,3,!1,e.FLOAT).addAttribute("aTrans2",i._buffer,3,!1,e.FLOAT).addAttribute("aSamplerSize",i._buffer,2,!1,e.FLOAT).addAttribute("aFrame",i._buffer,4,!1,e.FLOAT).addAttribute("aColor",i._buffer,4,!0,e.UNSIGNED_BYTE).addAttribute("aTextureId",i._buffer,1,!0,e.FLOAT).addIndex(i._indexBuffer),i}return r(i,t),i}(PIXI.Geometry);t.BatchBilineardGeometry=o;var n=function(){function e(){}return e.create=function(e){var n=Object.assign({vertex:"precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec3 aTrans1;\nattribute vec3 aTrans2;\nattribute vec2 aSamplerSize;\nattribute vec4 aFrame;\nattribute vec4 aColor;\nattribute float aTextureId;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\n\nvarying vec2 vertexPosition;\nvarying vec3 vTrans1;\nvarying vec3 vTrans2;\nvarying vec2 vSamplerSize;\nvarying vec4 vFrame;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nvoid main(void){\n\tgl_Position.xyw = projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0);\n\tgl_Position.z = 0.0;\n\n\tvertexPosition = aVertexPosition;\n\tvTrans1 = aTrans1;\n\tvTrans2 = aTrans2;\n\tvTextureId = aTextureId;\n\tvColor = aColor;\n\tvSamplerSize = aSamplerSize;\n\tvFrame = aFrame;\n}\n",fragment:"precision highp float;\nvarying vec2 vertexPosition;\nvarying vec3 vTrans1;\nvarying vec3 vTrans2;\nvarying vec2 vSamplerSize;\nvarying vec4 vFrame;\nvarying vec4 vColor;\nvarying float vTextureId;\n\nuniform sampler2D uSamplers[%count%];\nuniform vec4 distortion;\n\nvoid main(void){\nvec2 surface;\nvec2 surface2;\n\nfloat vx = vertexPosition.x;\nfloat vy = vertexPosition.y;\nfloat dx = distortion.x;\nfloat dy = distortion.y;\nfloat revx = distortion.z;\nfloat revy = distortion.w;\n\nif (distortion.x == 0.0) {\n\tsurface.x = vx;\n\tsurface.y = vy / (1.0 + dy * vx);\n\tsurface2 = surface;\n} else\nif (distortion.y == 0.0) {\n\tsurface.y = vy;\n\tsurface.x = vx / (1.0 + dx * vy);\n\tsurface2 = surface;\n} else {\n\tfloat c = vy * dx - vx * dy;\n\tfloat b = (c + 1.0) * 0.5;\n\tfloat b2 = (-c + 1.0) * 0.5;\n\tfloat d = b * b + vx * dy;\n\tif (d < -0.00001) {\n\t    discard;\n\t}\n\td = sqrt(max(d, 0.0));\n\tsurface.x = (- b + d) * revy;\n\tsurface2.x = (- b - d) * revy;\n\tsurface.y = (- b2 + d) * revx;\n\tsurface2.y = (- b2 - d) * revx;\n}\n\nvec2 uv;\nuv.x = vTrans1.x * surface.x + vTrans1.y * surface.y + vTrans1.z;\nuv.y = vTrans2.x * surface.x + vTrans2.y * surface.y + vTrans2.z;\n\nvec2 pixels = uv * vSamplerSize;\n\nif (pixels.x < vFrame.x || pixels.x > vFrame.z ||\n\tpixels.y < vFrame.y || pixels.y > vFrame.w) {\n\tuv.x = vTrans1.x * surface2.x + vTrans1.y * surface2.y + vTrans1.z;\n\tuv.y = vTrans2.x * surface2.x + vTrans2.y * surface2.y + vTrans2.z;\n\tpixels = uv * vSamplerSize;\n\n   if (pixels.x < vFrame.x || pixels.x > vFrame.z ||\n       pixels.y < vFrame.y || pixels.y > vFrame.w) {\n       discard;\n   }\n}\n\nvec4 edge;\nedge.xy = clamp(pixels - vFrame.xy + 0.5, vec2(0.0, 0.0), vec2(1.0, 1.0));\nedge.zw = clamp(vFrame.zw - pixels + 0.5, vec2(0.0, 0.0), vec2(1.0, 1.0));\n\nfloat alpha = 1.0; //edge.x * edge.y * edge.z * edge.w;\nvec4 rColor = vColor * alpha;\n\nfloat textureId = floor(vTextureId+0.5);\nvec2 vTextureCoord = uv;\nvec4 color;\n%forloop%\ngl_FragColor = color * rColor;\n}",geometryClass:o,vertexSize:16},e),a=n.vertex,s=n.fragment,c=n.vertexSize,u=n.geometryClass;return function(t){function e(e){var r=t.call(this,e)||this;return r.defUniforms={translationMatrix:new PIXI.Matrix,distortion:new Float32Array([0,0,1/0,1/0])},r.size=1e3,r.forceMaxTextures=1,r.shaderGenerator=new PIXI.BatchShaderGenerator(a,s),r.geometryClass=u,r.vertexSize=c,r}return r(e,t),e.prototype.getUniforms=function(t){var e=t.proj;return null!==e.surface?e.uniforms:null!==e._activeProjection?e._activeProjection.uniforms:this.defUniforms},e.prototype.packInterleavedGeometry=function(t,e,r,o,n){for(var a=e.uint32View,s=e.float32View,c=o/this.vertexSize,u=t.indices,l=t.vertexData,p=t._texture._frame,h=t.aTrans,f=t._texture.baseTexture,d=f._batchLocation,y=f.realWidth,m=f.realHeight,v=f.resolution,x=Math.min(t.worldAlpha,1),_=x<1&&t._texture.baseTexture.alphaMode?i(t._tintRGB,x):t._tintRGB+(255*x<<24),g=0;g<l.length;g+=2)s[o]=l[g],s[o+1]=l[g+1],s[o+2]=h.a,s[o+3]=h.c,s[o+4]=h.tx,s[o+5]=h.b,s[o+6]=h.d,s[o+7]=h.ty,s[o+8]=y,s[o+9]=m,s[o+10]=p.x*v,s[o+11]=p.y*v,s[o+12]=(p.x+p.width)*v,s[o+13]=(p.y+p.height)*v,a[o+14]=_,s[o+15]=d,o+=16;for(g=0;g<u.length;g++)r[n++]=c+u[g]},e}(t.UniformBatchRenderer)},e}();t.BatchBilinearPluginFactory=n,PIXI.Renderer.registerPlugin("batch_bilinear",n.create({}))}(e||(e={})),function(t){var e=function(e){function i(r){var i=e.call(this,r)||this;return i.aTrans=new PIXI.Matrix,i.proj=new t.ProjectionSurface(i.transform),i.pluginName="batch_bilinear",i}return r(i,e),i.prototype._calculateBounds=function(){this.calculateTrimmedVertices(),this._bounds.addQuad(this.vertexTrimmedData)},i.prototype.calculateVertices=function(){var t=this.transform._worldID,e=this._texture._updateID;if(this._transformID!==t||this._textureID!==e){this._transformID=t,this._textureID=e;var r=this._texture,i=this.vertexData,o=r.trim,n=r.orig,a=this._anchor,s=0,c=0,u=0,l=0;if(o?(s=(c=o.x-a._x*n.width)+o.width,u=(l=o.y-a._y*n.height)+o.height):(s=(c=-a._x*n.width)+n.width,u=(l=-a._y*n.height)+n.height),this.proj._surface)i[0]=c,i[1]=l,i[2]=s,i[3]=l,i[4]=s,i[5]=u,i[6]=c,i[7]=u,this.proj._surface.boundsQuad(i,i);else{var p=this.transform.worldTransform,h=p.a,f=p.b,d=p.c,y=p.d,m=p.tx,v=p.ty;i[0]=h*c+d*l+m,i[1]=y*l+f*c+v,i[2]=h*s+d*l+m,i[3]=y*l+f*s+v,i[4]=h*s+d*u+m,i[5]=y*u+f*s+v,i[6]=h*c+d*u+m,i[7]=y*u+f*c+v,this.proj._activeProjection&&this.proj._activeProjection.surface.boundsQuad(i,i)}r.uvMatrix||(r.uvMatrix=new PIXI.TextureMatrix(r)),r.uvMatrix.update();var x=this.aTrans;x.set(n.width,0,0,n.height,c,l),null===this.proj._surface&&x.prepend(this.transform.worldTransform),x.invert(),x.prepend(r.uvMatrix.mapCoord)}},i.prototype.calculateTrimmedVertices=function(){var t=this.transform._worldID,e=this._texture._updateID;if(this.vertexTrimmedData){if(this._transformTrimmedID===t&&this._textureTrimmedID===e)return}else this.vertexTrimmedData=new Float32Array(8);this._transformTrimmedID=t,this._textureTrimmedID=e;var r=this._texture,i=this.vertexTrimmedData,o=r.orig,n=this._anchor,a=-n._x*o.width,s=a+o.width,c=-n._y*o.height,u=c+o.height;if(this.proj._surface)i[0]=a,i[1]=c,i[2]=s,i[3]=c,i[4]=s,i[5]=u,i[6]=a,i[7]=u,this.proj._surface.boundsQuad(i,i,this.transform.worldTransform);else{var l=this.transform.worldTransform,p=l.a,h=l.b,f=l.c,d=l.d,y=l.tx,m=l.ty;i[0]=p*a+f*c+y,i[1]=d*c+h*a+m,i[2]=p*s+f*c+y,i[3]=d*c+h*s+m,i[4]=p*s+f*u+y,i[5]=d*u+h*s+m,i[6]=p*a+f*u+y,i[7]=d*u+h*a+m,this.proj._activeProjection&&this.proj._activeProjection.surface.boundsQuad(i,i,this.proj._activeProjection.legacy.worldTransform)}},Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj},enumerable:!0,configurable:!0}),i}(PIXI.Sprite);t.Sprite2s=e}(e||(e={})),function(t){var e=function(e){function i(r,i,o){var n=e.call(this,r,i,o)||this;return n.aTrans=new PIXI.Matrix,n.proj=new t.ProjectionSurface(n.transform),n.pluginName="batch_bilinear",n}return r(i,e),Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj},enumerable:!0,configurable:!0}),i}(PIXI.Text);t.Text2s=e,e.prototype.calculateVertices=t.Sprite2s.prototype.calculateVertices,e.prototype.calculateTrimmedVertices=t.Sprite2s.prototype.calculateTrimmedVertices,e.prototype._calculateBounds=t.Sprite2s.prototype._calculateBounds}(e||(e={})),function(t){PIXI.Sprite.prototype.convertTo2s=function(){this.proj||(this.pluginName="sprite_bilinear",this.aTrans=new PIXI.Matrix,this.calculateVertices=t.Sprite2s.prototype.calculateVertices,this.calculateTrimmedVertices=t.Sprite2s.prototype.calculateTrimmedVertices,this._calculateBounds=t.Sprite2s.prototype._calculateBounds,PIXI.Container.prototype.convertTo2s.call(this))},PIXI.Container.prototype.convertTo2s=function(){this.proj||(this.proj=new t.Projection2d(this.transform),Object.defineProperty(this,"worldTransform",{get:function(){return this.proj},enumerable:!0,configurable:!0}))},PIXI.Container.prototype.convertSubtreeTo2s=function(){this.convertTo2s();for(var t=0;t<this.children.length;t++)this.children[t].convertSubtreeTo2s()}}(e||(e={})),function(t){t.container2dWorldTransform=function(){return this.proj.affine?this.transform.worldTransform:this.proj.world};var e=function(e){function i(){var r=e.call(this)||this;return r.proj=new t.Projection2d(r.transform),r}return r(i,e),i.prototype.toLocal=function(e,r,i,o,n){return void 0===n&&(n=t.TRANSFORM_STEP.ALL),r&&(e=r.toGlobal(e,i,o)),o||this._recursivePostUpdateTransform(),n>=t.TRANSFORM_STEP.PROJ?(o||this.displayObjectUpdateTransform(),this.proj.affine?this.transform.worldTransform.applyInverse(e,i):this.proj.world.applyInverse(e,i)):(this.parent?i=this.parent.worldTransform.applyInverse(e,i):i.copyFrom(e),n===t.TRANSFORM_STEP.NONE?i:this.transform.localTransform.applyInverse(i,i))},Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj.affine?this.transform.worldTransform:this.proj.world},enumerable:!0,configurable:!0}),i}(PIXI.Container);t.Container2d=e,t.container2dToLocal=e.prototype.toLocal}(e||(e={})),function(t){var e,r=PIXI.Point,i=[1,0,0,0,1,0,0,0,1];!function(t){t[t.NONE=0]="NONE",t[t.FREE=1]="FREE",t[t.AXIS_X=2]="AXIS_X",t[t.AXIS_Y=3]="AXIS_Y",t[t.POINT=4]="POINT",t[t.AXIS_XR=5]="AXIS_XR"}(e=t.AFFINE||(t.AFFINE={}));var o=function(){function t(t){this.floatArray=null,this.mat3=new Float64Array(t||i)}return Object.defineProperty(t.prototype,"a",{get:function(){return this.mat3[0]/this.mat3[8]},set:function(t){this.mat3[0]=t*this.mat3[8]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"b",{get:function(){return this.mat3[1]/this.mat3[8]},set:function(t){this.mat3[1]=t*this.mat3[8]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"c",{get:function(){return this.mat3[3]/this.mat3[8]},set:function(t){this.mat3[3]=t*this.mat3[8]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"d",{get:function(){return this.mat3[4]/this.mat3[8]},set:function(t){this.mat3[4]=t*this.mat3[8]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"tx",{get:function(){return this.mat3[6]/this.mat3[8]},set:function(t){this.mat3[6]=t*this.mat3[8]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ty",{get:function(){return this.mat3[7]/this.mat3[8]},set:function(t){this.mat3[7]=t*this.mat3[8]},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e,r,i,o,n){var a=this.mat3;return a[0]=t,a[1]=e,a[2]=0,a[3]=r,a[4]=i,a[5]=0,a[6]=o,a[7]=n,a[8]=1,this},t.prototype.toArray=function(t,e){this.floatArray||(this.floatArray=new Float32Array(9));var r=e||this.floatArray,i=this.mat3;return t?(r[0]=i[0],r[1]=i[1],r[2]=i[2],r[3]=i[3],r[4]=i[4],r[5]=i[5],r[6]=i[6],r[7]=i[7],r[8]=i[8]):(r[0]=i[0],r[1]=i[3],r[2]=i[6],r[3]=i[1],r[4]=i[4],r[5]=i[7],r[6]=i[2],r[7]=i[5],r[8]=i[8]),r},t.prototype.apply=function(t,e){e=e||new PIXI.Point;var r=this.mat3,i=t.x,o=t.y,n=1/(r[2]*i+r[5]*o+r[8]);return e.x=n*(r[0]*i+r[3]*o+r[6]),e.y=n*(r[1]*i+r[4]*o+r[7]),e},t.prototype.translate=function(t,e){var r=this.mat3;return r[0]+=t*r[2],r[1]+=e*r[2],r[3]+=t*r[5],r[4]+=e*r[5],r[6]+=t*r[8],r[7]+=e*r[8],this},t.prototype.scale=function(t,e){var r=this.mat3;return r[0]*=t,r[1]*=e,r[3]*=t,r[4]*=e,r[6]*=t,r[7]*=e,this},t.prototype.scaleAndTranslate=function(t,e,r,i){var o=this.mat3;o[0]=t*o[0]+r*o[2],o[1]=e*o[1]+i*o[2],o[3]=t*o[3]+r*o[5],o[4]=e*o[4]+i*o[5],o[6]=t*o[6]+r*o[8],o[7]=e*o[7]+i*o[8]},t.prototype.applyInverse=function(t,e){e=e||new r;var i=this.mat3,o=t.x,n=t.y,a=i[0],s=i[3],c=i[6],u=i[1],l=i[4],p=i[7],h=i[2],f=i[5],d=i[8],y=(d*l-p*f)*o+(-d*s+c*f)*n+(p*s-c*l),m=(-d*u+p*h)*o+(d*a-c*h)*n+(-p*a+c*u),v=(f*u-l*h)*o+(-f*a+s*h)*n+(l*a-s*u);return e.x=y/v,e.y=m/v,e},t.prototype.invert=function(){var t=this.mat3,e=t[0],r=t[1],i=t[2],o=t[3],n=t[4],a=t[5],s=t[6],c=t[7],u=t[8],l=u*n-a*c,p=-u*o+a*s,h=c*o-n*s,f=e*l+r*p+i*h;return f?(f=1/f,t[0]=l*f,t[1]=(-u*r+i*c)*f,t[2]=(a*r-i*n)*f,t[3]=p*f,t[4]=(u*e-i*s)*f,t[5]=(-a*e+i*o)*f,t[6]=h*f,t[7]=(-c*e+r*s)*f,t[8]=(n*e-r*o)*f,this):this},t.prototype.identity=function(){var t=this.mat3;return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,this},t.prototype.clone=function(){return new t(this.mat3)},t.prototype.copyTo2dOr3d=function(t){var e=this.mat3,r=t.mat3;return r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],t},t.prototype.copyTo=function(t,r,i){var o=this.mat3,n=1/o[8],a=o[6]*n,s=o[7]*n;if(t.a=(o[0]-o[2]*a)*n,t.b=(o[1]-o[2]*s)*n,t.c=(o[3]-o[5]*a)*n,t.d=(o[4]-o[5]*s)*n,t.tx=a,t.ty=s,r>=2){var c=t.a*t.d-t.b*t.c;i||(c=Math.abs(c)),r===e.POINT?(c=c>0?1:-1,t.a=c,t.b=0,t.c=0,t.d=c):r===e.AXIS_X?(c/=Math.sqrt(t.b*t.b+t.d*t.d),t.c=0,t.d=c):r===e.AXIS_Y?(c/=Math.sqrt(t.a*t.a+t.c*t.c),t.a=c,t.c=0):r===e.AXIS_XR&&(t.a=t.d*c,t.c=-t.b*c)}return t},t.prototype.copyFrom=function(t){var e=this.mat3;return e[0]=t.a,e[1]=t.b,e[2]=0,e[3]=t.c,e[4]=t.d,e[5]=0,e[6]=t.tx,e[7]=t.ty,e[8]=1,this},t.prototype.setToMultLegacy=function(t,e){var r=this.mat3,i=e.mat3,o=t.a,n=t.b,a=t.c,s=t.d,c=t.tx,u=t.ty,l=i[0],p=i[1],h=i[2],f=i[3],d=i[4],y=i[5],m=i[6],v=i[7],x=i[8];return r[0]=l*o+p*a+h*c,r[1]=l*n+p*s+h*u,r[2]=h,r[3]=f*o+d*a+y*c,r[4]=f*n+d*s+y*u,r[5]=y,r[6]=m*o+v*a+x*c,r[7]=m*n+v*s+x*u,r[8]=x,this},t.prototype.setToMultLegacy2=function(t,e){var r=this.mat3,i=t.mat3,o=i[0],n=i[1],a=i[2],s=i[3],c=i[4],u=i[5],l=i[6],p=i[7],h=i[8],f=e.a,d=e.b,y=e.c,m=e.d,v=e.tx,x=e.ty;return r[0]=f*o+d*s,r[1]=f*n+d*c,r[2]=f*a+d*u,r[3]=y*o+m*s,r[4]=y*n+m*c,r[5]=y*a+m*u,r[6]=v*o+x*s+l,r[7]=v*n+x*c+p,r[8]=v*a+x*u+h,this},t.prototype.setToMult=function(t,e){var r=this.mat3,i=t.mat3,o=e.mat3,n=i[0],a=i[1],s=i[2],c=i[3],u=i[4],l=i[5],p=i[6],h=i[7],f=i[8],d=o[0],y=o[1],m=o[2],v=o[3],x=o[4],_=o[5],g=o[6],I=o[7],b=o[8];return r[0]=d*n+y*c+m*p,r[1]=d*a+y*u+m*h,r[2]=d*s+y*l+m*f,r[3]=v*n+x*c+_*p,r[4]=v*a+x*u+_*h,r[5]=v*s+x*l+_*f,r[6]=g*n+I*c+b*p,r[7]=g*a+I*u+b*h,r[8]=g*s+I*l+b*f,this},t.prototype.prepend=function(t){return t.mat3?this.setToMult(t,this):this.setToMultLegacy(t,this)},t.IDENTITY=new t,t.TEMP_MATRIX=new t,t}();t.Matrix2d=o}(e||(e={})),function(t){var e=new PIXI.Point,i=[new PIXI.Point,new PIXI.Point,new PIXI.Point,new PIXI.Point],o=new PIXI.Rectangle,n=new t.Matrix2d,a=function(a){function s(e,r){var i=a.call(this,e,r)||this;return i.matrix=new t.Matrix2d,i.pivot=new PIXI.ObservablePoint(i.onChange,i,0,0),i.reverseLocalOrder=!1,i.local=new t.Matrix2d,i.world=new t.Matrix2d,i}return r(s,a),s.prototype.onChange=function(){var t=this.pivot,e=this.matrix.mat3;e[6]=-(t._x*e[0]+t._y*e[3]),e[7]=-(t._x*e[1]+t._y*e[4]),this._projID++},s.prototype.setAxisX=function(t,e){void 0===e&&(e=1);var r=t.x,i=t.y,o=Math.sqrt(r*r+i*i),n=this.matrix.mat3;n[0]=r/o,n[1]=i/o,n[2]=e/o,this.onChange()},s.prototype.setAxisY=function(t,e){void 0===e&&(e=1);var r=t.x,i=t.y,o=Math.sqrt(r*r+i*i),n=this.matrix.mat3;n[3]=r/o,n[4]=i/o,n[5]=e/o,this.onChange()},s.prototype.mapSprite=function(t,e){var r=t.texture;return o.x=-t.anchor.x*r.orig.width,o.y=-t.anchor.y*r.orig.height,o.width=r.orig.width,o.height=r.orig.height,this.mapQuad(o,e)},s.prototype.mapQuad=function(r,o){i[0].set(r.x,r.y),i[1].set(r.x+r.width,r.y),i[2].set(r.x+r.width,r.y+r.height),i[3].set(r.x,r.y+r.height);var a=1,s=2,c=3;if(0!==t.utils.getIntersectionFactor(o[0],o[2],o[1],o[3],e)){a=1,s=3,c=2;var u=Math.sqrt((o[0].x-e.x)*(o[0].x-e.x)+(o[0].y-e.y)*(o[0].y-e.y)),l=Math.sqrt((o[a].x-e.x)*(o[a].x-e.x)+(o[a].y-e.y)*(o[a].y-e.y)),p=Math.sqrt((o[s].x-e.x)*(o[s].x-e.x)+(o[s].y-e.y)*(o[s].y-e.y)),h=Math.sqrt((o[c].x-e.x)*(o[c].x-e.x)+(o[c].y-e.y)*(o[c].y-e.y)),f=(u+h)/h,d=(l+p)/p,y=(l+p)/l,m=this.matrix.mat3;m[0]=i[0].x*f,m[1]=i[0].y*f,m[2]=f,m[3]=i[a].x*d,m[4]=i[a].y*d,m[5]=d,m[6]=i[s].x*y,m[7]=i[s].y*y,m[8]=y,this.matrix.invert(),(m=n.mat3)[0]=o[0].x,m[1]=o[0].y,m[2]=1,m[3]=o[a].x,m[4]=o[a].y,m[5]=1,m[6]=o[s].x,m[7]=o[s].y,m[8]=1,this.matrix.setToMult(n,this.matrix),this._projID++}},s.prototype.updateLocalTransform=function(t){0!==this._projID?this.reverseLocalOrder?this.local.setToMultLegacy2(this.matrix,t):this.local.setToMultLegacy(t,this.matrix):this.local.copyFrom(t)},s.prototype.clear=function(){a.prototype.clear.call(this),this.matrix.identity(),this.pivot.set(0,0)},s}(t.LinearProjection);t.Projection2d=a}(e||(e={})),function(t){var e=function(e){function i(r,i,o,n){var a=e.call(this,r,i,o,n)||this;return a.vertexData2d=null,a.proj=new t.Projection2d(a.transform),a}return r(i,e),i.prototype.calculateVertices=function(){if(this.proj._affine)return this.vertexData2d=null,void e.prototype.calculateVertices.call(this);var t=this.geometry,r=t.buffers[0].data,i=this;if(t.vertexDirtyId!==i.vertexDirty||i._transformID!==i.transform._worldID){i._transformID=i.transform._worldID,i.vertexData.length!==r.length&&(i.vertexData=new Float32Array(r.length)),this.vertexData2d&&this.vertexData2d.length===3*r.length/2||(this.vertexData2d=new Float32Array(3*r.length));for(var o=this.proj.world.mat3,n=this.vertexData2d,a=i.vertexData,s=0;s<a.length/2;s++){var c=r[2*s],u=r[2*s+1],l=o[0]*c+o[3]*u+o[6],p=o[1]*c+o[4]*u+o[7],h=o[2]*c+o[5]*u+o[8];n[3*s]=l,n[3*s+1]=p,n[3*s+2]=h,a[2*s]=l/h,a[2*s+1]=p/h}i.vertexDirty=t.vertexDirtyId}},i.prototype._renderDefault=function(t){var e=this.shader;e.alpha=this.worldAlpha,e.update&&e.update(),t.batch.flush(),e.program.uniformData.translationMatrix&&(e.uniforms.translationMatrix=this.worldTransform.toArray(!0)),t.shader.bind(e,!1),t.state.set(this.state),t.geometry.bind(this.geometry,e),t.geometry.draw(this.drawMode,this.size,this.start,this.geometry.instanceCount)},i.prototype.toLocal=function(e,r,i,o,n){return void 0===n&&(n=t.TRANSFORM_STEP.ALL),t.container2dToLocal.call(this,e,r,i,o,n)},Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj.affine?this.transform.worldTransform:this.proj.world},enumerable:!0,configurable:!0}),i.defaultVertexShader="precision highp float;\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform mat3 uTextureMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n\tgl_Position.xyw = projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0);\n\tgl_Position.z = 0.0;\n\n\tvTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\n}\n",i.defaultFragmentShader="\nvarying vec2 vTextureCoord;\nuniform vec4 uColor;\n\nuniform sampler2D uSampler;\n\nvoid main(void)\n{\n\tgl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\n}",i}(PIXI.Mesh);t.Mesh2d=e;var i=function(t){function i(r,i,o,n,a){var s=t.call(this,new PIXI.MeshGeometry(i,o,n),new PIXI.MeshMaterial(r,{program:PIXI.Program.from(e.defaultVertexShader,e.defaultFragmentShader),pluginName:"batch2d"}),null,a)||this;return s.autoUpdate=!0,s.geometry.getBuffer("aVertexPosition").static=!1,s}return r(i,t),Object.defineProperty(i.prototype,"vertices",{get:function(){return this.geometry.getBuffer("aVertexPosition").data},set:function(t){this.geometry.getBuffer("aVertexPosition").data=t},enumerable:!0,configurable:!0}),i.prototype._render=function(e){this.autoUpdate&&this.geometry.getBuffer("aVertexPosition").update(),t.prototype._render.call(this,e)},i}(e);t.SimpleMesh2d=i}(e||(e={})),function(t){var e=function(e){function i(r){var i=e.call(this,r)||this;return i.vertexData2d=null,i.proj=new t.Projection2d(i.transform),i.pluginName="batch2d",i}return r(i,e),i.prototype._calculateBounds=function(){this.calculateTrimmedVertices(),this._bounds.addQuad(this.vertexTrimmedData)},i.prototype.calculateVertices=function(){var t=this._texture;if(this.proj._affine)return this.vertexData2d=null,void e.prototype.calculateVertices.call(this);this.vertexData2d||(this.vertexData2d=new Float32Array(12));var r=this.transform._worldID,i=t._updateID;if(this._transformID!==r||this._textureID!==i){this._textureID!==i&&(this.uvs=t._uvs.uvsFloat32),this._transformID=r,this._textureID=i;var o=this.proj.world.mat3,n=this.vertexData2d,a=this.vertexData,s=t.trim,c=t.orig,u=this._anchor,l=0,p=0,h=0,f=0;s?(l=(p=s.x-u._x*c.width)+s.width,h=(f=s.y-u._y*c.height)+s.height):(l=(p=-u._x*c.width)+c.width,h=(f=-u._y*c.height)+c.height),n[0]=o[0]*p+o[3]*f+o[6],n[1]=o[1]*p+o[4]*f+o[7],n[2]=o[2]*p+o[5]*f+o[8],n[3]=o[0]*l+o[3]*f+o[6],n[4]=o[1]*l+o[4]*f+o[7],n[5]=o[2]*l+o[5]*f+o[8],n[6]=o[0]*l+o[3]*h+o[6],n[7]=o[1]*l+o[4]*h+o[7],n[8]=o[2]*l+o[5]*h+o[8],n[9]=o[0]*p+o[3]*h+o[6],n[10]=o[1]*p+o[4]*h+o[7],n[11]=o[2]*p+o[5]*h+o[8],a[0]=n[0]/n[2],a[1]=n[1]/n[2],a[2]=n[3]/n[5],a[3]=n[4]/n[5],a[4]=n[6]/n[8],a[5]=n[7]/n[8],a[6]=n[9]/n[11],a[7]=n[10]/n[11]}},i.prototype.calculateTrimmedVertices=function(){if(this.proj._affine)e.prototype.calculateTrimmedVertices.call(this);else{var t=this.transform._worldID,r=this._texture._updateID;if(this.vertexTrimmedData){if(this._transformTrimmedID===t&&this._textureTrimmedID===r)return}else this.vertexTrimmedData=new Float32Array(8);this._transformTrimmedID=t,this._textureTrimmedID=r;var i=this._texture,o=this.vertexTrimmedData,n=i.orig,a=this.tileProj?this._width:n.width,s=this.tileProj?this._height:n.height,c=this._anchor,u=this.proj.world.mat3,l=-c._x*a,p=l+a,h=-c._y*s,f=h+s,d=1/(u[2]*l+u[5]*h+u[8]);o[0]=d*(u[0]*l+u[3]*h+u[6]),o[1]=d*(u[1]*l+u[4]*h+u[7]),d=1/(u[2]*p+u[5]*h+u[8]),o[2]=d*(u[0]*p+u[3]*h+u[6]),o[3]=d*(u[1]*p+u[4]*h+u[7]),d=1/(u[2]*p+u[5]*f+u[8]),o[4]=d*(u[0]*p+u[3]*f+u[6]),o[5]=d*(u[1]*p+u[4]*f+u[7]),d=1/(u[2]*l+u[5]*f+u[8]),o[6]=d*(u[0]*l+u[3]*f+u[6]),o[7]=d*(u[1]*l+u[4]*f+u[7])}},i.prototype.toLocal=function(e,r,i,o,n){return void 0===n&&(n=t.TRANSFORM_STEP.ALL),t.container2dToLocal.call(this,e,r,i,o,n)},Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj.affine?this.transform.worldTransform:this.proj.world},enumerable:!0,configurable:!0}),i}(PIXI.Sprite);t.Sprite2d=e}(e||(e={})),function(t){var e=function(e){function i(r,i,o){var n=e.call(this,r,i,o)||this;return n.vertexData2d=null,n.proj=new t.Projection2d(n.transform),n.pluginName="batch2d",n}return r(i,e),Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj.affine?this.transform.worldTransform:this.proj.world},enumerable:!0,configurable:!0}),i}(PIXI.Text);t.Text2d=e,e.prototype.calculateVertices=t.Sprite2d.prototype.calculateVertices,e.prototype.calculateTrimmedVertices=t.Sprite2d.prototype.calculateTrimmedVertices,e.prototype._calculateBounds=t.Sprite2d.prototype._calculateBounds}(e||(e={})),function(t){function e(){this.proj||(this.proj=new t.Projection2d(this.transform),this.toLocal=t.Container2d.prototype.toLocal,Object.defineProperty(this,"worldTransform",{get:t.container2dWorldTransform,enumerable:!0,configurable:!0}))}PIXI.Container.prototype.convertTo2d=e,PIXI.Sprite.prototype.convertTo2d=function(){this.proj||(this.calculateVertices=t.Sprite2d.prototype.calculateVertices,this.calculateTrimmedVertices=t.Sprite2d.prototype.calculateTrimmedVertices,this._calculateBounds=t.Sprite2d.prototype._calculateBounds,this.pluginName="batch2d",e.call(this))},PIXI.Container.prototype.convertSubtreeTo2d=function(){this.convertTo2d();for(var t=0;t<this.children.length;t++)this.children[t].convertSubtreeTo2d()},PIXI.SimpleMesh&&(PIXI.SimpleMesh.prototype.convertTo2d=PIXI.SimpleRope.prototype.convertTo2d=function(){this.proj||(this.calculateVertices=t.Mesh2d.prototype.calculateVertices,this._renderDefault=t.Mesh2d.prototype._renderDefault,"batch2d"!==this.material.pluginName&&(this.material=new PIXI.MeshMaterial(this.material.texture,{program:PIXI.Program.from(t.Mesh2d.defaultVertexShader,t.Mesh2d.defaultFragmentShader),pluginName:"batch2d"})),e.call(this))}),PIXI.TilingSprite&&(PIXI.TilingSprite.prototype.convertTo2d=function(){this.proj||(this.tileProj=new t.Projection2d(this.tileTransform),this.tileProj.reverseLocalOrder=!0,this.uvRespectAnchor=!0,this.calculateTrimmedVertices=t.Sprite2d.prototype.calculateTrimmedVertices,this._calculateBounds=t.Sprite2d.prototype._calculateBounds,this._render=t.TilingSprite2d.prototype._render,this.pluginName="tilingSprite2d",e.call(this))})}(e||(e={})),function(t){var e=new PIXI.Transform,i=function(i){function o(e,r,o){var n=i.call(this,e,r,o)||this;return n.tileProj=new t.Projection2d(n.tileTransform),n.tileProj.reverseLocalOrder=!0,n.proj=new t.Projection2d(n.transform),n.pluginName="tilingSprite2d",n.uvRespectAnchor=!0,n}return r(o,i),Object.defineProperty(o.prototype,"worldTransform",{get:function(){return this.proj.affine?this.transform.worldTransform:this.proj.world},enumerable:!0,configurable:!0}),o.prototype.toLocal=function(e,r,i,o,n){return void 0===n&&(n=t.TRANSFORM_STEP.ALL),t.container2dToLocal.call(this,e,r,i,o,n)},o.prototype._render=function(t){var r=this._texture;r&&r.valid&&(this.tileTransform.updateTransform(e),this.uvMatrix.update(),t.batch.setObjectRenderer(t.plugins[this.pluginName]),t.plugins[this.pluginName].render(this))},o}(PIXI.TilingSprite);t.TilingSprite2d=i}(e||(e={})),function(t){var e="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform mat3 uTransform;\n\nvarying vec3 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position.xyw = projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0);\n\n    vTextureCoord = uTransform * vec3(aTextureCoord, 1.0);\n}\n",i=new t.Matrix2d,o=PIXI.WRAP_MODES,n=PIXI.utils,a=function(t){function a(r){var i=t.call(this,r)||this;i.quad=new PIXI.QuadUv;var o={globals:i.renderer.globalUniforms};return i.shader=PIXI.Shader.from(e,"\nvarying vec3 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec4 uColor;\nuniform mat3 uMapCoord;\nuniform vec4 uClampFrame;\nuniform vec2 uClampOffset;\n\nvoid main(void)\n{\n    vec2 coord = mod(vTextureCoord.xy / vTextureCoord.z - uClampOffset, vec2(1.0, 1.0)) + uClampOffset;\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n    vec4 sample = texture2D(uSampler, coord);\n    gl_FragColor = sample * uColor;\n}\n",o),i.simpleShader=PIXI.Shader.from(e,"\n\tvarying vec3 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform vec4 uColor;\n\nvoid main(void)\n{\n    vec4 sample = texture2D(uSampler, vTextureCoord.xy / vTextureCoord.z);\n    gl_FragColor = sample * uColor;\n}\n",o),i}return r(a,t),a.prototype.render=function(t){var e=this.renderer,r=this.quad,a=r.vertices;a[0]=a[6]=t._width*-t.anchor.x,a[1]=a[3]=t._height*-t.anchor.y,a[2]=a[4]=t._width*(1-t.anchor.x),a[5]=a[7]=t._height*(1-t.anchor.y),t.uvRespectAnchor&&((a=r.uvs)[0]=a[6]=-t.anchor.x,a[1]=a[3]=-t.anchor.y,a[2]=a[4]=1-t.anchor.x,a[5]=a[7]=1-t.anchor.y),r.invalidate();var s=t._texture,c=s.baseTexture,u=t.tileProj.world,l=t.uvMatrix,p=c.isPowerOfTwo&&s.frame.width===c.width&&s.frame.height===c.height;p&&(c._glTextures[e.CONTEXT_UID]?p=c.wrapMode!==o.CLAMP:c.wrapMode===o.CLAMP&&(c.wrapMode=o.REPEAT));var h=p?this.simpleShader:this.shader;i.identity(),i.scale(s.width,s.height),i.prepend(u),i.scale(1/t._width,1/t._height),i.invert(),p?i.prepend(l.mapCoord):(h.uniforms.uMapCoord=l.mapCoord.toArray(!0),h.uniforms.uClampFrame=l.uClampFrame,h.uniforms.uClampOffset=l.uClampOffset),h.uniforms.uTransform=i.toArray(!0),h.uniforms.uColor=n.premultiplyTintToRgba(t.tint,t.worldAlpha,h.uniforms.uColor,c.premultiplyAlpha),h.uniforms.translationMatrix=t.transform.worldTransform.toArray(!0),h.uniforms.uSampler=s,e.shader.bind(h,!1),e.geometry.bind(r,void 0),e.state.setBlendMode(n.correctBlendMode(t.blendMode,c.premultiplyAlpha)),e.geometry.draw(PIXI.DRAW_MODES.TRIANGLES,6,0)},a}(PIXI.ObjectRenderer);t.TilingSprite2dRenderer=a,PIXI.Renderer.registerPlugin("tilingSprite2d",a)}(e||(e={})),function(t){PIXI.systems.MaskSystem.prototype.pushSpriteMask=function(e){var r=e.maskObject,i=e._target,o=this.alphaMaskPool[this.alphaMaskIndex];o||(o=this.alphaMaskPool[this.alphaMaskIndex]=[new t.SpriteMaskFilter2d(r)]),o[0].resolution=this.renderer.resolution,o[0].maskSprite=r;var n=i.filterArea;i.filterArea=r.getBounds(!0),this.renderer.filter.push(i,o),i.filterArea=n,this.alphaMaskIndex++}}(e||(e={})),function(t){var e=new t.Matrix2d,i=function(i){function o(e){var r=i.call(this,"\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\nuniform mat3 otherMatrix;\n\nvarying vec3 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n\tgl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n\tvTextureCoord = aTextureCoord;\n\tvMaskCoord = otherMatrix * vec3( aTextureCoord, 1.0);\n}\n","\nvarying vec3 vMaskCoord;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nuniform sampler2D mask;\nuniform float alpha;\nuniform vec4 maskClamp;\n\nvoid main(void)\n{\n    vec2 uv = vMaskCoord.xy / vMaskCoord.z;\n\n    float clip = step(3.5,\n        step(maskClamp.x, uv.x) +\n        step(maskClamp.y, uv.y) +\n        step(uv.x, maskClamp.z) +\n        step(uv.y, maskClamp.w));\n\n    vec4 original = texture2D(uSampler, vTextureCoord);\n    vec4 masky = texture2D(mask, uv);\n\n    original *= (masky.r * masky.a * alpha * clip);\n\n    gl_FragColor = original;\n}\n")||this;return r.maskMatrix=new t.Matrix2d,e.renderable=!1,r.maskSprite=e,r}return r(o,i),o.prototype.apply=function(t,e,r,i){var n=this.maskSprite,a=this.maskSprite.texture;a.valid&&(a.uvMatrix||(a.uvMatrix=new PIXI.TextureMatrix(a,0)),a.uvMatrix.update(),this.uniforms.npmAlpha=a.baseTexture.alphaMode?0:1,this.uniforms.mask=n.texture,this.uniforms.otherMatrix=o.calculateSpriteMatrix(e,this.maskMatrix,n).prepend(a.uvMatrix.mapCoord),this.uniforms.alpha=n.worldAlpha,this.uniforms.maskClamp=a.uvMatrix.uClampFrame,t.applyFilter(this,e,r,i))},o.calculateSpriteMatrix=function(t,r,i){var o=i.proj,n=t.filterFrame,a=o&&!o._affine?o.world.copyTo2dOr3d(e):e.copyFrom(i.transform.worldTransform),s=i.texture.orig;return r.set(t.width,0,0,t.height,n.x,n.y),a.invert(),r.setToMult(a,r),r.scaleAndTranslate(1/s.width,1/s.height,i.anchor.x,i.anchor.y),r},o}(PIXI.Filter);t.SpriteMaskFilter2d=i}(e||(e={})),function(t){t.container3dWorldTransform=function(){return this.proj.affine?this.transform.worldTransform:this.proj.world};var e=function(e){function i(){var r=e.call(this)||this;return r.proj=new t.Projection3d(r.transform),r}return r(i,e),i.prototype.isFrontFace=function(t){void 0===t&&(t=!1),t&&(this._recursivePostUpdateTransform(),this.displayObjectUpdateTransform());var e=this.proj.world.mat4,r=e[0]*e[15]-e[3]*e[12],i=e[1]*e[15]-e[3]*e[13],o=e[4]*e[15]-e[7]*e[12];return r*(e[5]*e[15]-e[7]*e[13])-o*i>0},i.prototype.getDepth=function(t){void 0===t&&(t=!1),t&&(this._recursivePostUpdateTransform(),this.displayObjectUpdateTransform());var e=this.proj.world.mat4;return e[14]/e[15]},i.prototype.toLocal=function(e,r,i,o,n){return void 0===n&&(n=t.TRANSFORM_STEP.ALL),r&&(e=r.toGlobal(e,i,o)),o||this._recursivePostUpdateTransform(),n===t.TRANSFORM_STEP.ALL?(o||this.displayObjectUpdateTransform(),this.proj.affine?this.transform.worldTransform.applyInverse(e,i):this.proj.world.applyInverse(e,i)):(this.parent?i=this.parent.worldTransform.applyInverse(e,i):i.copyFrom(e),n===t.TRANSFORM_STEP.NONE||(i=this.transform.localTransform.applyInverse(i,i),n===t.TRANSFORM_STEP.PROJ&&this.proj.cameraMode&&(i=this.proj.cameraMatrix.applyInverse(i,i))),i)},Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj.affine?this.transform.worldTransform:this.proj.world},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"position3d",{get:function(){return this.proj.position},set:function(t){this.proj.position.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"scale3d",{get:function(){return this.proj.scale},set:function(t){this.proj.scale.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"euler",{get:function(){return this.proj.euler},set:function(t){this.proj.euler.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"pivot3d",{get:function(){return this.proj.pivot},set:function(t){this.proj.pivot.copyFrom(t)},enumerable:!0,configurable:!0}),i}(PIXI.Container);t.Container3d=e,t.container3dToLocal=e.prototype.toLocal,t.container3dGetDepth=e.prototype.getDepth,t.container3dIsFrontFace=e.prototype.isFrontFace}(e||(e={})),function(t){var e=function(t){function e(){var e=t.call(this)||this;return e._far=0,e._near=0,e._focus=0,e._orthographic=!1,e.proj.cameraMode=!0,e.setPlanes(400,10,1e4,!1),e}return r(e,t),Object.defineProperty(e.prototype,"far",{get:function(){return this._far},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"near",{get:function(){return this._near},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"focus",{get:function(){return this._focus},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ortographic",{get:function(){return this._orthographic},enumerable:!0,configurable:!0}),e.prototype.setPlanes=function(t,e,r,i){void 0===e&&(e=10),void 0===r&&(r=1e4),void 0===i&&(i=!1),this._focus=t,this._near=e,this._far=r,this._orthographic=i;var o=this.proj,n=o.cameraMatrix.mat4;o._projID++,n[10]=1/(r-e),n[14]=(t-e)/(r-e),this._orthographic?n[11]=0:n[11]=1/t},e}(t.Container3d);t.Camera3d=e}(e||(e={})),function(t){var e=function(){function t(t,e,r){this._quatUpdateId=-1,this._quatDirtyId=0,this._sign=1,this._x=t||0,this._y=e||0,this._z=r||0,this.quaternion=new Float64Array(4),this.quaternion[3]=1,this.update()}return Object.defineProperty(t.prototype,"x",{get:function(){return this._x},set:function(t){this._x!==t&&(this._x=t,this._quatDirtyId++)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this._y},set:function(t){this._y!==t&&(this._y=t,this._quatDirtyId++)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"z",{get:function(){return this._z},set:function(t){this._z!==t&&(this._z=t,this._quatDirtyId++)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"pitch",{get:function(){return this._x},set:function(t){this._x!==t&&(this._x=t,this._quatDirtyId++)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"yaw",{get:function(){return this._y},set:function(t){this._y!==t&&(this._y=t,this._quatDirtyId++)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"roll",{get:function(){return this._z},set:function(t){this._z!==t&&(this._z=t,this._quatDirtyId++)},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e,r){var i=t||0,o=e||0,n=r||0;this._x===i&&this._y===o&&this._z===n||(this._x=i,this._y=o,this._z=n,this._quatDirtyId++)},t.prototype.copyFrom=function(t){var e=t.x,r=t.y,i=t.z;this._x===e&&this._y===r&&this._z===i||(this._x=e,this._y=r,this._z=i,this._quatDirtyId++)},t.prototype.copyTo=function(t){return t.set(this._x,this._y,this._z),t},t.prototype.equals=function(t){return this._x===t.x&&this._y===t.y&&this._z===t.z},t.prototype.clone=function(){return new t(this._x,this._y,this._z)},t.prototype.update=function(){if(this._quatUpdateId===this._quatDirtyId)return!1;this._quatUpdateId=this._quatDirtyId;var t=Math.cos(this._x/2),e=Math.cos(this._y/2),r=Math.cos(this._z/2),i=this._sign,o=i*Math.sin(this._x/2),n=i*Math.sin(this._y/2),a=i*Math.sin(this._z/2),s=this.quaternion;return s[0]=o*e*r+t*n*a,s[1]=t*n*r-o*e*a,s[2]=t*e*a+o*n*r,s[3]=t*e*r-o*n*a,!0},t}();t.Euler=e}(e||(e={})),function(t){var e=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],r=function(){function r(t){this.floatArray=null,this._dirtyId=0,this._updateId=-1,this._mat4inv=null,this.cacheInverse=!1,this.mat4=new Float64Array(t||e)}return Object.defineProperty(r.prototype,"a",{get:function(){return this.mat4[0]/this.mat4[15]},set:function(t){this.mat4[0]=t*this.mat4[15]},enumerable:!0,configurable:!0}),Object.defineProperty(r.prototype,"b",{get:function(){return this.mat4[1]/this.mat4[15]},set:function(t){this.mat4[1]=t*this.mat4[15]},enumerable:!0,configurable:!0}),Object.defineProperty(r.prototype,"c",{get:function(){return this.mat4[4]/this.mat4[15]},set:function(t){this.mat4[4]=t*this.mat4[15]},enumerable:!0,configurable:!0}),Object.defineProperty(r.prototype,"d",{get:function(){return this.mat4[5]/this.mat4[15]},set:function(t){this.mat4[5]=t*this.mat4[15]},enumerable:!0,configurable:!0}),Object.defineProperty(r.prototype,"tx",{get:function(){return this.mat4[12]/this.mat4[15]},set:function(t){this.mat4[12]=t*this.mat4[15]},enumerable:!0,configurable:!0}),Object.defineProperty(r.prototype,"ty",{get:function(){return this.mat4[13]/this.mat4[15]},set:function(t){this.mat4[13]=t*this.mat4[15]},enumerable:!0,configurable:!0}),r.prototype.set=function(t,e,r,i,o,n){var a=this.mat4;return a[0]=t,a[1]=e,a[2]=0,a[3]=0,a[4]=r,a[5]=i,a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1,a[11]=0,a[12]=o,a[13]=n,a[14]=0,a[15]=1,this},r.prototype.toArray=function(t,e){this.floatArray||(this.floatArray=new Float32Array(9));var r=e||this.floatArray,i=this.mat4;return t?(r[0]=i[0],r[1]=i[1],r[2]=i[3],r[3]=i[4],r[4]=i[5],r[5]=i[7],r[6]=i[12],r[7]=i[13],r[8]=i[15]):(r[0]=i[0],r[1]=i[4],r[2]=i[12],r[3]=i[2],r[4]=i[6],r[5]=i[13],r[6]=i[3],r[7]=i[7],r[8]=i[15]),r},r.prototype.setToTranslation=function(t,e,r){var i=this.mat4;i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=t,i[13]=e,i[14]=r,i[15]=1},r.prototype.setToRotationTranslationScale=function(t,e,r,i,o,n,a){var s=this.mat4,c=t[0],u=t[1],l=t[2],p=t[3],h=c+c,f=u+u,d=l+l,y=c*h,m=c*f,v=c*d,x=u*f,_=u*d,g=l*d,I=p*h,b=p*f,T=p*d;return s[0]=(1-(x+g))*o,s[1]=(m+T)*o,s[2]=(v-b)*o,s[3]=0,s[4]=(m-T)*n,s[5]=(1-(y+g))*n,s[6]=(_+I)*n,s[7]=0,s[8]=(v+b)*a,s[9]=(_-I)*a,s[10]=(1-(y+x))*a,s[11]=0,s[12]=e,s[13]=r,s[14]=i,s[15]=1,s},r.prototype.apply=function(e,r){r=r||new t.Point3d;var i=this.mat4,o=e.x,n=e.y,a=e.z||0,s=1/(i[3]*o+i[7]*n+i[11]*a+i[15]);return r.x=s*(i[0]*o+i[4]*n+i[8]*a+i[12]),r.y=s*(i[1]*o+i[5]*n+i[9]*a+i[13]),r.z=s*(i[2]*o+i[6]*n+i[10]*a+i[14]),r},r.prototype.translate=function(t,e,r){var i=this.mat4;return i[12]=i[0]*t+i[4]*e+i[8]*r+i[12],i[13]=i[1]*t+i[5]*e+i[9]*r+i[13],i[14]=i[2]*t+i[6]*e+i[10]*r+i[14],i[15]=i[3]*t+i[7]*e+i[11]*r+i[15],this},r.prototype.scale=function(t,e,r){var i=this.mat4;return i[0]*=t,i[1]*=t,i[2]*=t,i[3]*=t,i[4]*=e,i[5]*=e,i[6]*=e,i[7]*=e,void 0!==r&&(i[8]*=r,i[9]*=r,i[10]*=r,i[11]*=r),this},r.prototype.scaleAndTranslate=function(t,e,r,i,o,n){var a=this.mat4;a[0]=t*a[0]+i*a[3],a[1]=e*a[1]+o*a[3],a[2]=r*a[2]+n*a[3],a[4]=t*a[4]+i*a[7],a[5]=e*a[5]+o*a[7],a[6]=r*a[6]+n*a[7],a[8]=t*a[8]+i*a[11],a[9]=e*a[9]+o*a[11],a[10]=r*a[10]+n*a[11],a[12]=t*a[12]+i*a[15],a[13]=e*a[13]+o*a[15],a[14]=r*a[14]+n*a[15]},r.prototype.applyInverse=function(e,i){i=i||new t.Point3d,this._mat4inv||(this._mat4inv=new Float64Array(16));var o=this._mat4inv,n=this.mat4,a=e.x,s=e.y,c=e.z||0;this.cacheInverse&&this._updateId===this._dirtyId||(this._updateId=this._dirtyId,r.glMatrixMat4Invert(o,n));var u=1/(o[3]*a+o[7]*s+o[11]*c+o[15]),l=u*(o[0]*a+o[4]*s+o[8]*c+o[12]),p=u*(o[1]*a+o[5]*s+o[9]*c+o[13]),h=u*(o[2]*a+o[6]*s+o[10]*c+o[14]);c+=1;var f=1/(o[3]*a+o[7]*s+o[11]*c+o[15]),d=f*(o[0]*a+o[4]*s+o[8]*c+o[12]),y=f*(o[1]*a+o[5]*s+o[9]*c+o[13]),m=f*(o[2]*a+o[6]*s+o[10]*c+o[14]);Math.abs(h-m)<1e-10&&i.set(NaN,NaN,0);var v=(0-h)/(m-h);return i.set((d-l)*v+l,(y-p)*v+p,0),i},r.prototype.invert=function(){return r.glMatrixMat4Invert(this.mat4,this.mat4),this},r.prototype.invertCopyTo=function(t){this._mat4inv||(this._mat4inv=new Float64Array(16));var e=this._mat4inv,i=this.mat4;this.cacheInverse&&this._updateId===this._dirtyId||(this._updateId=this._dirtyId,r.glMatrixMat4Invert(e,i)),t.mat4.set(e)},r.prototype.identity=function(){var t=this.mat4;return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},r.prototype.clone=function(){return new r(this.mat4)},r.prototype.copyTo3d=function(t){var e=this.mat4,r=t.mat4;return r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],t},r.prototype.copyTo2d=function(t){var e=this.mat4,r=t.mat3;return r[0]=e[0],r[1]=e[1],r[2]=e[3],r[3]=e[4],r[4]=e[5],r[5]=e[7],r[6]=e[12],r[7]=e[13],r[8]=e[15],t},r.prototype.copyTo2dOr3d=function(e){return e instanceof t.Matrix2d?this.copyTo2d(e):this.copyTo3d(e)},r.prototype.copyTo=function(e,r,i){var o=this.mat4,n=1/o[15],a=o[12]*n,s=o[13]*n;if(e.a=(o[0]-o[3]*a)*n,e.b=(o[1]-o[3]*s)*n,e.c=(o[4]-o[7]*a)*n,e.d=(o[5]-o[7]*s)*n,e.tx=a,e.ty=s,r>=2){var c=e.a*e.d-e.b*e.c;i||(c=Math.abs(c)),r===t.AFFINE.POINT?(c=c>0?1:-1,e.a=c,e.b=0,e.c=0,e.d=c):r===t.AFFINE.AXIS_X?(c/=Math.sqrt(e.b*e.b+e.d*e.d),e.c=0,e.d=c):r===t.AFFINE.AXIS_Y&&(c/=Math.sqrt(e.a*e.a+e.c*e.c),e.a=c,e.c=0)}return e},r.prototype.copyFrom=function(t){var e=this.mat4;return e[0]=t.a,e[1]=t.b,e[2]=0,e[3]=0,e[4]=t.c,e[5]=t.d,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t.tx,e[13]=t.ty,e[14]=0,e[15]=1,this._dirtyId++,this},r.prototype.setToMultLegacy=function(t,e){var r=this.mat4,i=e.mat4,o=t.a,n=t.b,a=t.c,s=t.d,c=t.tx,u=t.ty,l=i[0],p=i[1],h=i[2],f=i[3];return r[0]=l*o+p*a+f*c,r[1]=l*n+p*s+f*u,r[2]=h,r[3]=f,l=i[4],p=i[5],h=i[6],f=i[7],r[4]=l*o+p*a+f*c,r[5]=l*n+p*s+f*u,r[6]=h,r[7]=f,l=i[8],p=i[9],h=i[10],f=i[11],r[8]=l*o+p*a+f*c,r[9]=l*n+p*s+f*u,r[10]=h,r[11]=f,l=i[12],p=i[13],h=i[14],f=i[15],r[12]=l*o+p*a+f*c,r[13]=l*n+p*s+f*u,r[14]=h,r[15]=f,this._dirtyId++,this},r.prototype.setToMultLegacy2=function(t,e){var r=this.mat4,i=t.mat4,o=i[0],n=i[1],a=i[2],s=i[3],c=i[4],u=i[5],l=i[6],p=i[7],h=e.a,f=e.b,d=e.c,y=e.d,m=e.tx,v=e.ty;return r[0]=h*o+f*c,r[1]=h*n+f*u,r[2]=h*a+f*l,r[3]=h*s+f*p,r[4]=d*o+y*c,r[5]=d*n+y*u,r[6]=d*a+y*l,r[7]=d*s+y*p,r[8]=i[8],r[9]=i[9],r[10]=i[10],r[11]=i[11],r[12]=m*o+v*c+i[12],r[13]=m*n+v*u+i[13],r[14]=m*a+v*l+i[14],r[15]=m*s+v*p+i[15],this._dirtyId++,this},r.prototype.setToMult=function(t,e){return r.glMatrixMat4Multiply(this.mat4,t.mat4,e.mat4),this._dirtyId++,this},r.prototype.prepend=function(t){t.mat4?this.setToMult(t,this):this.setToMultLegacy(t,this)},r.glMatrixMat4Invert=function(t,e){var r=e[0],i=e[1],o=e[2],n=e[3],a=e[4],s=e[5],c=e[6],u=e[7],l=e[8],p=e[9],h=e[10],f=e[11],d=e[12],y=e[13],m=e[14],v=e[15],x=r*s-i*a,_=r*c-o*a,g=r*u-n*a,I=i*c-o*s,b=i*u-n*s,T=o*u-n*c,P=l*y-p*d,j=l*m-h*d,w=l*v-f*d,M=p*m-h*y,D=p*v-f*y,S=h*v-f*m,F=x*S-_*D+g*M+I*w-b*j+T*P;return F?(F=1/F,t[0]=(s*S-c*D+u*M)*F,t[1]=(o*D-i*S-n*M)*F,t[2]=(y*T-m*b+v*I)*F,t[3]=(h*b-p*T-f*I)*F,t[4]=(c*w-a*S-u*j)*F,t[5]=(r*S-o*w+n*j)*F,t[6]=(m*g-d*T-v*_)*F,t[7]=(l*T-h*g+f*_)*F,t[8]=(a*D-s*w+u*P)*F,t[9]=(i*w-r*D-n*P)*F,t[10]=(d*b-y*g+v*x)*F,t[11]=(p*g-l*b-f*x)*F,t[12]=(s*j-a*M-c*P)*F,t[13]=(r*M-i*j+o*P)*F,t[14]=(y*_-d*I-m*x)*F,t[15]=(l*I-p*_+h*x)*F,t):null},r.glMatrixMat4Multiply=function(t,e,r){var i=e[0],o=e[1],n=e[2],a=e[3],s=e[4],c=e[5],u=e[6],l=e[7],p=e[8],h=e[9],f=e[10],d=e[11],y=e[12],m=e[13],v=e[14],x=e[15],_=r[0],g=r[1],I=r[2],b=r[3];return t[0]=_*i+g*s+I*p+b*y,t[1]=_*o+g*c+I*h+b*m,t[2]=_*n+g*u+I*f+b*v,t[3]=_*a+g*l+I*d+b*x,_=r[4],g=r[5],I=r[6],b=r[7],t[4]=_*i+g*s+I*p+b*y,t[5]=_*o+g*c+I*h+b*m,t[6]=_*n+g*u+I*f+b*v,t[7]=_*a+g*l+I*d+b*x,_=r[8],g=r[9],I=r[10],b=r[11],t[8]=_*i+g*s+I*p+b*y,t[9]=_*o+g*c+I*h+b*m,t[10]=_*n+g*u+I*f+b*v,t[11]=_*a+g*l+I*d+b*x,_=r[12],g=r[13],I=r[14],b=r[15],t[12]=_*i+g*s+I*p+b*y,t[13]=_*o+g*c+I*h+b*m,t[14]=_*n+g*u+I*f+b*v,t[15]=_*a+g*l+I*d+b*x,t},r.IDENTITY=new r,r.TEMP_MATRIX=new r,r}();t.Matrix3d=r}(e||(e={})),function(t){var e=function(){function e(t,e,r,i,o){this.cb=t,this.scope=e,this._quatUpdateId=-1,this._quatDirtyId=0,this._sign=1,this._x=r||0,this._y=i||0,this._z=o||0,this.quaternion=new Float64Array(4),this.quaternion[3]=1,this.update()}return Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x!==t&&(this._x=t,this._quatDirtyId++,this.cb.call(this.scope))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y!==t&&(this._y=t,this._quatDirtyId++,this.cb.call(this.scope))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"z",{get:function(){return this._z},set:function(t){this._z!==t&&(this._z=t,this._quatDirtyId++,this.cb.call(this.scope))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pitch",{get:function(){return this._x},set:function(t){this._x!==t&&(this._x=t,this._quatDirtyId++,this.cb.call(this.scope))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yaw",{get:function(){return this._y},set:function(t){this._y!==t&&(this._y=t,this._quatDirtyId++,this.cb.call(this.scope))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"roll",{get:function(){return this._z},set:function(t){this._z!==t&&(this._z=t,this._quatDirtyId++,this.cb.call(this.scope))},enumerable:!0,configurable:!0}),e.prototype.set=function(t,e,r){var i=t||0,o=e||0,n=r||0;this._x===i&&this._y===o&&this._z===n||(this._x=i,this._y=o,this._z=n,this._quatDirtyId++,this.cb.call(this.scope))},e.prototype.copyFrom=function(t){var e=t.x,r=t.y,i=t.z;this._x===e&&this._y===r&&this._z===i||(this._x=e,this._y=r,this._z=i,this._quatDirtyId++,this.cb.call(this.scope))},e.prototype.copyTo=function(t){return t.set(this._x,this._y,this._z),t},e.prototype.equals=function(t){return this._x===t.x&&this._y===t.y&&this._z===t.z},e.prototype.clone=function(){return new t.Euler(this._x,this._y,this._z)},e.prototype.update=function(){if(this._quatUpdateId===this._quatDirtyId)return!1;this._quatUpdateId=this._quatDirtyId;var t=Math.cos(this._x/2),e=Math.cos(this._y/2),r=Math.cos(this._z/2),i=this._sign,o=i*Math.sin(this._x/2),n=i*Math.sin(this._y/2),a=i*Math.sin(this._z/2),s=this.quaternion;return s[0]=o*e*r+t*n*a,s[1]=t*n*r-o*e*a,s[2]=t*e*a+o*n*r,s[3]=t*e*r-o*n*a,!0},e}();t.ObservableEuler=e}(e||(e={})),function(t){var e=function(t){function e(e,r,i){var o=t.call(this,e,r)||this;return o.z=i,o}return r(e,t),e.prototype.set=function(t,e,r){return this.x=t||0,this.y=void 0===e?this.x:e||0,this.z=void 0===e?this.x:r||0,this},e.prototype.copyFrom=function(t){return this.set(t.x,t.y,t.z||0),this},e.prototype.copyTo=function(t){return t.set(this.x,this.y,this.z),t},e}(PIXI.Point);t.Point3d=e;var i=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._z=0,e}return r(e,t),Object.defineProperty(e.prototype,"z",{get:function(){return this._z},set:function(t){this._z!==t&&(this._z=t,this.cb.call(this.scope))},enumerable:!0,configurable:!0}),e.prototype.set=function(t,e,r){var i=t||0,o=void 0===e?i:e||0,n=void 0===e?i:r||0;return this._x===i&&this._y===o&&this._z===n||(this._x=i,this._y=o,this._z=n,this.cb.call(this.scope)),this},e.prototype.copyFrom=function(t){return this.set(t.x,t.y,t.z||0),this},e.prototype.copyTo=function(t){return t.set(this._x,this._y,this._z),t},e}(PIXI.ObservablePoint);t.ObservablePoint3d=i}(e||(e={})),function(t){var e=new t.Matrix3d,i=function(i){function o(e,r){var o=i.call(this,e,r)||this;return o.cameraMatrix=null,o._cameraMode=!1,o.position=new t.ObservablePoint3d(o.onChange,o,0,0),o.scale=new t.ObservablePoint3d(o.onChange,o,1,1),o.euler=new t.ObservableEuler(o.onChange,o,0,0,0),o.pivot=new t.ObservablePoint3d(o.onChange,o,0,0),o.local=new t.Matrix3d,o.world=new t.Matrix3d,o.local.cacheInverse=!0,o.world.cacheInverse=!0,o.position._z=0,o.scale._z=1,o.pivot._z=0,o}return r(o,i),Object.defineProperty(o.prototype,"cameraMode",{get:function(){return this._cameraMode},set:function(e){this._cameraMode!==e&&(this._cameraMode=e,this.euler._sign=this._cameraMode?-1:1,this.euler._quatDirtyId++,e&&(this.cameraMatrix=new t.Matrix3d))},enumerable:!0,configurable:!0}),o.prototype.onChange=function(){this._projID++},o.prototype.clear=function(){this.cameraMatrix&&this.cameraMatrix.identity(),this.position.set(0,0,0),this.scale.set(1,1,1),this.euler.set(0,0,0),this.pivot.set(0,0,0),i.prototype.clear.call(this)},o.prototype.updateLocalTransform=function(t){if(0!==this._projID){var r=this.local,i=this.euler,o=this.position,n=this.scale,a=this.pivot;if(i.update(),!this.cameraMode)return r.setToRotationTranslationScale(i.quaternion,o._x,o._y,o._z,n._x,n._y,n._z),r.translate(-a._x,-a._y,-a._z),void r.setToMultLegacy(t,r);r.setToMultLegacy(t,this.cameraMatrix),r.translate(a._x,a._y,a._z),r.scale(1/n._x,1/n._y,1/n._z),e.setToRotationTranslationScale(i.quaternion,0,0,0,1,1,1),r.setToMult(r,e),r.translate(-o._x,-o._y,-o._z),this.local._dirtyId++}else this.local.copyFrom(t)},o}(t.LinearProjection);t.Projection3d=i}(e||(e={})),function(t){var e=function(e){function i(r,i,o,n){var a=e.call(this,r,i,o,n)||this;return a.vertexData2d=null,a.proj=new t.Projection3d(a.transform),a}return r(i,e),i.prototype.calculateVertices=function(){if(this.proj._affine)return this.vertexData2d=null,void e.prototype.calculateVertices.call(this);var t=this.geometry,r=t.buffers[0].data,i=this;if(t.vertexDirtyId!==i.vertexDirty||i._transformID!==i.transform._worldID){i._transformID=i.transform._worldID,i.vertexData.length!==r.length&&(i.vertexData=new Float32Array(r.length)),this.vertexData2d&&this.vertexData2d.length===3*r.length/2||(this.vertexData2d=new Float32Array(3*r.length));for(var o=this.proj.world.mat4,n=this.vertexData2d,a=i.vertexData,s=0;s<a.length/2;s++){var c=r[2*s],u=r[2*s+1],l=o[0]*c+o[4]*u+o[12],p=o[1]*c+o[5]*u+o[13],h=o[3]*c+o[7]*u+o[15];n[3*s]=l,n[3*s+1]=p,n[3*s+2]=h,a[2*s]=l/h,a[2*s+1]=p/h}i.vertexDirty=t.vertexDirtyId}},Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj.affine?this.transform.worldTransform:this.proj.world},enumerable:!0,configurable:!0}),i.prototype.toLocal=function(e,r,i,o,n){return void 0===n&&(n=t.TRANSFORM_STEP.ALL),t.container3dToLocal.call(this,e,r,i,o,n)},i.prototype.isFrontFace=function(e){return t.container3dIsFrontFace.call(this,e)},i.prototype.getDepth=function(e){return t.container3dGetDepth.call(this,e)},Object.defineProperty(i.prototype,"position3d",{get:function(){return this.proj.position},set:function(t){this.proj.position.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"scale3d",{get:function(){return this.proj.scale},set:function(t){this.proj.scale.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"euler",{get:function(){return this.proj.euler},set:function(t){this.proj.euler.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"pivot3d",{get:function(){return this.proj.pivot},set:function(t){this.proj.pivot.copyFrom(t)},enumerable:!0,configurable:!0}),i}(PIXI.Mesh);t.Mesh3d2d=e,e.prototype._renderDefault=t.Mesh2d.prototype._renderDefault;var i=function(e){function i(r,i,o,n,a){var s=e.call(this,new PIXI.MeshGeometry(i,o,n),new PIXI.MeshMaterial(r,{program:PIXI.Program.from(t.Mesh2d.defaultVertexShader,t.Mesh2d.defaultFragmentShader),pluginName:"batch2d"}),null,a)||this;return s.autoUpdate=!0,s.geometry.getBuffer("aVertexPosition").static=!1,s}return r(i,e),Object.defineProperty(i.prototype,"vertices",{get:function(){return this.geometry.getBuffer("aVertexPosition").data},set:function(t){this.geometry.getBuffer("aVertexPosition").data=t},enumerable:!0,configurable:!0}),i.prototype._render=function(t){this.autoUpdate&&this.geometry.getBuffer("aVertexPosition").update(),e.prototype._render.call(this,t)},i}(e);t.SimpleMesh3d2d=i}(e||(e={})),function(t){var e=function(e){function i(r){var i=e.call(this,r)||this;return i.vertexData2d=null,i.culledByFrustrum=!1,i.trimmedCulledByFrustrum=!1,i.proj=new t.Projection3d(i.transform),i.pluginName="batch2d",i}return r(i,e),i.prototype.calculateVertices=function(){var t=this._texture;if(this.proj._affine)return this.vertexData2d=null,void e.prototype.calculateVertices.call(this);this.vertexData2d||(this.vertexData2d=new Float32Array(12));var r=this.transform._worldID,i=t._updateID;if(this._transformID!==r||this._textureID!==i){this._textureID!==i&&(this.uvs=t._uvs.uvsFloat32),this._transformID=r,this._textureID=i;var o=this.proj.world.mat4,n=this.vertexData2d,a=this.vertexData,s=t.trim,c=t.orig,u=this._anchor,l=0,p=0,h=0,f=0;s?(l=(p=s.x-u._x*c.width)+s.width,h=(f=s.y-u._y*c.height)+s.height):(l=(p=-u._x*c.width)+c.width,h=(f=-u._y*c.height)+c.height);var d,y=!1;n[0]=o[0]*p+o[4]*f+o[12],n[1]=o[1]*p+o[5]*f+o[13],d=o[2]*p+o[6]*f+o[14],n[2]=o[3]*p+o[7]*f+o[15],y=y||d<0,n[3]=o[0]*l+o[4]*f+o[12],n[4]=o[1]*l+o[5]*f+o[13],d=o[2]*l+o[6]*f+o[14],n[5]=o[3]*l+o[7]*f+o[15],y=y||d<0,n[6]=o[0]*l+o[4]*h+o[12],n[7]=o[1]*l+o[5]*h+o[13],d=o[2]*l+o[6]*h+o[14],n[8]=o[3]*l+o[7]*h+o[15],y=y||d<0,n[9]=o[0]*p+o[4]*h+o[12],n[10]=o[1]*p+o[5]*h+o[13],d=o[2]*p+o[6]*h+o[14],n[11]=o[3]*p+o[7]*h+o[15],y=y||d<0,this.culledByFrustrum=y,a[0]=n[0]/n[2],a[1]=n[1]/n[2],a[2]=n[3]/n[5],a[3]=n[4]/n[5],a[4]=n[6]/n[8],a[5]=n[7]/n[8],a[6]=n[9]/n[11],a[7]=n[10]/n[11]}},i.prototype.calculateTrimmedVertices=function(){if(this.proj._affine)e.prototype.calculateTrimmedVertices.call(this);else{var t=this.transform._worldID,r=this._texture._updateID;if(this.vertexTrimmedData){if(this._transformTrimmedID===t&&this._textureTrimmedID===r)return}else this.vertexTrimmedData=new Float32Array(8);this._transformTrimmedID=t,this._textureTrimmedID=r;var i,o=this._texture,n=this.vertexTrimmedData,a=o.orig,s=this._anchor,c=this.proj.world.mat4,u=-s._x*a.width,l=u+a.width,p=-s._y*a.height,h=p+a.height,f=!1,d=1/(c[3]*u+c[7]*p+c[15]);n[0]=d*(c[0]*u+c[4]*p+c[12]),n[1]=d*(c[1]*u+c[5]*p+c[13]),i=c[2]*u+c[6]*p+c[14],f=f||i<0,d=1/(c[3]*l+c[7]*p+c[15]),n[2]=d*(c[0]*l+c[4]*p+c[12]),n[3]=d*(c[1]*l+c[5]*p+c[13]),i=c[2]*l+c[6]*p+c[14],f=f||i<0,d=1/(c[3]*l+c[7]*h+c[15]),n[4]=d*(c[0]*l+c[4]*h+c[12]),n[5]=d*(c[1]*l+c[5]*h+c[13]),i=c[2]*l+c[6]*h+c[14],f=f||i<0,d=1/(c[3]*u+c[7]*h+c[15]),n[6]=d*(c[0]*u+c[4]*h+c[12]),n[7]=d*(c[1]*u+c[5]*h+c[13]),i=c[2]*u+c[6]*h+c[14],f=f||i<0,this.culledByFrustrum=f}},i.prototype._calculateBounds=function(){if(this.calculateVertices(),!this.culledByFrustrum){var t=this._texture.trim,e=this._texture.orig;!t||t.width===e.width&&t.height===e.height?this._bounds.addQuad(this.vertexData):(this.calculateTrimmedVertices(),this.trimmedCulledByFrustrum||this._bounds.addQuad(this.vertexTrimmedData))}},i.prototype._render=function(t){this.calculateVertices(),this.culledByFrustrum||(t.batch.setObjectRenderer(t.plugins[this.pluginName]),t.plugins[this.pluginName].render(this))},i.prototype.containsPoint=function(t){return!this.culledByFrustrum&&e.prototype.containsPoint.call(this,t)},Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj.affine?this.transform.worldTransform:this.proj.world},enumerable:!0,configurable:!0}),i.prototype.toLocal=function(e,r,i,o,n){return void 0===n&&(n=t.TRANSFORM_STEP.ALL),t.container3dToLocal.call(this,e,r,i,o,n)},i.prototype.isFrontFace=function(e){return t.container3dIsFrontFace.call(this,e)},i.prototype.getDepth=function(e){return t.container3dGetDepth.call(this,e)},Object.defineProperty(i.prototype,"position3d",{get:function(){return this.proj.position},set:function(t){this.proj.position.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"scale3d",{get:function(){return this.proj.scale},set:function(t){this.proj.scale.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"euler",{get:function(){return this.proj.euler},set:function(t){this.proj.euler.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"pivot3d",{get:function(){return this.proj.pivot},set:function(t){this.proj.pivot.copyFrom(t)},enumerable:!0,configurable:!0}),i}(PIXI.Sprite);t.Sprite3d=e}(e||(e={})),function(t){var e=function(e){function i(r,i,o){var n=e.call(this,r,i,o)||this;return n.vertexData2d=null,n.proj=new t.Projection3d(n.transform),n.pluginName="batch2d",n}return r(i,e),Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.proj.affine?this.transform.worldTransform:this.proj.world},enumerable:!0,configurable:!0}),i.prototype.toLocal=function(e,r,i,o,n){return void 0===n&&(n=t.TRANSFORM_STEP.ALL),t.container3dToLocal.call(this,e,r,i,o,n)},i.prototype.isFrontFace=function(e){return t.container3dIsFrontFace.call(this,e)},i.prototype.getDepth=function(e){return t.container3dGetDepth.call(this,e)},Object.defineProperty(i.prototype,"position3d",{get:function(){return this.proj.position},set:function(t){this.proj.position.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"scale3d",{get:function(){return this.proj.scale},set:function(t){this.proj.scale.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"euler",{get:function(){return this.proj.euler},set:function(t){this.proj.euler.copyFrom(t)},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"pivot3d",{get:function(){return this.proj.pivot},set:function(t){this.proj.pivot.copyFrom(t)},enumerable:!0,configurable:!0}),i}(PIXI.Text);t.Text3d=e,e.prototype.calculateVertices=t.Sprite3d.prototype.calculateVertices,e.prototype.calculateTrimmedVertices=t.Sprite3d.prototype.calculateTrimmedVertices,e.prototype._calculateBounds=t.Sprite3d.prototype._calculateBounds,e.prototype.containsPoint=t.Sprite3d.prototype.containsPoint,e.prototype._render=t.Sprite3d.prototype._render}(e||(e={})),function(t){var e={worldTransform:{get:t.container3dWorldTransform,enumerable:!0,configurable:!0},position3d:{get:function(){return this.proj.position},set:function(t){this.proj.position.copy(t)}},scale3d:{get:function(){return this.proj.scale},set:function(t){this.proj.scale.copy(t)}},pivot3d:{get:function(){return this.proj.pivot},set:function(t){this.proj.pivot.copy(t)}},euler:{get:function(){return this.proj.euler},set:function(t){this.proj.euler.copy(t)}}};function r(){this.proj||(this.proj=new t.Projection3d(this.transform),this.toLocal=t.Container3d.prototype.toLocal,this.isFrontFace=t.Container3d.prototype.isFrontFace,this.getDepth=t.Container3d.prototype.getDepth,Object.defineProperties(this,e))}PIXI.Container.prototype.convertTo3d=r,PIXI.Sprite.prototype.convertTo3d=function(){this.proj||(this.calculateVertices=t.Sprite3d.prototype.calculateVertices,this.calculateTrimmedVertices=t.Sprite3d.prototype.calculateTrimmedVertices,this._calculateBounds=t.Sprite3d.prototype._calculateBounds,this.containsPoint=t.Sprite3d.prototype.containsPoint,this.pluginName="batch2d",r.call(this))},PIXI.Container.prototype.convertSubtreeTo3d=function(){this.convertTo3d();for(var t=0;t<this.children.length;t++)this.children[t].convertSubtreeTo3d()},PIXI.SimpleMesh&&(PIXI.SimpleMesh.prototype.convertTo3d=PIXI.SimpleRope.prototype.convertTo3d=function(){this.proj||(this.calculateVertices=t.Mesh3d2d.prototype.calculateVertices,this._renderDefault=t.Mesh3d2d.prototype._renderDefault,"batch2d"!==this.material.pluginName&&(this.material=new PIXI.MeshMaterial(this.material.texture,{program:PIXI.Program.from(t.Mesh2d.defaultVertexShader,t.Mesh2d.defaultFragmentShader),pluginName:"batch2d"})),r.call(this))})}(e||(e={}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,