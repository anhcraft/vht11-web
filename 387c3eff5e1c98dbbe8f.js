(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\output\\svg\\Wrapper"],{"./node_modules/mathjax-full/js/output/svg/Wrapper.js":function(t,e,r){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],i=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,o,n=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(i=n.next()).done;)a.push(i.value)}catch(t){o={error:t}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(o)throw o.error}}return a};Object.defineProperty(e,"__esModule",{value:!0}),e.SVGWrapper=void 0;var s=r("./node_modules/mathjax-full/js/output/common/Wrapper.js"),h=r("./node_modules/mathjax-full/js/output/svg.js"),l=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.element=null,e}return o(e,t),e.prototype.toSVG=function(t){this.addChildren(this.standardSVGnode(t))},e.prototype.addChildren=function(t){var e,r,i=0;try{for(var o=n(this.childNodes),a=o.next();!a.done;a=o.next()){var s=a.value;s.toSVG(t),s.element&&s.place(i+s.bbox.L*s.bbox.rscale,0),i+=(s.bbox.L+s.bbox.w+s.bbox.R)*s.bbox.rscale}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}},e.prototype.standardSVGnode=function(t){var e=this.createSVGnode(t);return this.handleStyles(),this.handleScale(),this.handleColor(),this.handleAttributes(),e},e.prototype.createSVGnode=function(t){var e=this.node.attributes.get("href");if(e){t=this.adaptor.append(t,this.svg("a",{href:e}));var r=this.getBBox(),i=r.h,o=r.d,n=r.w;this.adaptor.append(t,this.svg("rect",{"data-hitbox":!0,fill:"none",stroke:"none","pointer-events":"all",width:this.fixed(n),height:this.fixed(i+o),y:this.fixed(-o)}))}return this.element=this.adaptor.append(t,this.svg("g",{"data-mml-node":this.node.kind})),this.element},e.prototype.handleStyles=function(){if(this.styles){var t=this.styles.cssText;t&&this.adaptor.setAttribute(this.element,"style",t)}},e.prototype.handleScale=function(){if(1!==this.bbox.rscale){var t="scale("+this.fixed(this.bbox.rscale/1e3,3)+")";this.adaptor.setAttribute(this.element,"transform",t)}},e.prototype.handleColor=function(){var t=this.adaptor,e=this.node.attributes,r=e.getExplicit("mathcolor"),i=e.getExplicit("color"),o=e.getExplicit("mathbackground"),n=e.getExplicit("background");if((r||i)&&(t.setAttribute(this.element,"fill",r||i),t.setAttribute(this.element,"stroke",r||i)),o||n){var a=this.getBBox(),s=a.h,h=a.d,l=a.w,d=this.svg("rect",{fill:o||n,x:0,y:this.fixed(-h),width:this.fixed(l),height:this.fixed(s+h),"data-bgcolor":!0}),p=t.firstChild(this.element);p?t.insert(d,p):t.append(this.element,d)}},e.prototype.handleAttributes=function(){var t,r,i,o,a=this.node.attributes,s=a.getAllDefaults(),h=e.skipAttributes;try{for(var l=n(a.getExplicitNames()),d=l.next();!d.done;d=l.next()){var p=d.value;!1!==h[p]&&(p in s||h[p]||this.adaptor.hasAttribute(this.element,p))||this.adaptor.setAttribute(this.element,p,a.getExplicit(p))}}catch(e){t={error:e}}finally{try{d&&!d.done&&(r=l.return)&&r.call(l)}finally{if(t)throw t.error}}if(a.get("class")){var u=a.get("class").trim().split(/ +/);try{for(var c=n(u),f=c.next();!f.done;f=c.next()){var v=f.value;this.adaptor.addClass(this.element,v)}}catch(t){i={error:t}}finally{try{f&&!f.done&&(o=c.return)&&o.call(c)}finally{if(i)throw i.error}}}},e.prototype.place=function(t,e,r){if(void 0===r&&(r=null),t||e){r||(r=this.element);var i=this.adaptor.getAttribute(r,"transform")||"";i="translate("+this.fixed(t)+", "+this.fixed(e)+")"+(i?" "+i:""),this.adaptor.setAttribute(r,"transform",i)}},e.prototype.placeChar=function(t,e,r,i,o){var s,h;void 0===o&&(o=null),null===o&&(o=this.variant);var l=t.toString(16).toUpperCase(),d=a(this.getVariantChar(o,t),4),p=d[2],u=d[3];if("p"in u){var c=u.p?"M"+u.p+"Z":"";this.place(e,r,this.adaptor.append(i,this.charNode(o,l,c)))}else if("c"in u){var f=this.adaptor.append(i,this.svg("g",{"data-c":l}));this.place(e,r,f),e=0;try{for(var v=n(this.unicodeChars(u.c,o)),y=v.next();!y.done;y=v.next()){var x=y.value;e+=this.placeChar(x,e,r,f,o)}}catch(t){s={error:t}}finally{try{y&&!y.done&&(h=v.return)&&h.call(v)}finally{if(s)throw s.error}}}else if(u.unknown){var b=String.fromCodePoint(t),g=this.adaptor.append(i,this.jax.unknownText(b,o));return this.place(e,r,g),this.jax.measureTextNodeWithCache(g,b,o).w}return p},e.prototype.charNode=function(t,e,r){return"none"!==this.jax.options.fontCache?this.useNode(t,e,r):this.pathNode(e,r)},e.prototype.pathNode=function(t,e){return this.svg("path",{"data-c":t,d:e})},e.prototype.useNode=function(t,e,r){var i=this.svg("use"),o="#"+this.jax.fontCache.cachePath(t,e,r);return this.adaptor.setAttribute(i,"href",o,h.XLINKNS),i},e.prototype.drawBBox=function(){var t=this.getBBox(),e=t.w,r=t.h,i=t.d,o=this.svg("g",{style:{opacity:.25}},[this.svg("rect",{fill:"red",height:this.fixed(r),width:this.fixed(e)}),this.svg("rect",{fill:"green",height:this.fixed(i),width:this.fixed(e),y:this.fixed(-i)})]),n=this.element||this.parent.element;this.adaptor.append(n,o)},e.prototype.html=function(t,e,r){return void 0===e&&(e={}),void 0===r&&(r=[]),this.jax.html(t,e,r)},e.prototype.svg=function(t,e,r){return void 0===e&&(e={}),void 0===r&&(r=[]),this.jax.svg(t,e,r)},e.prototype.text=function(t){return this.jax.text(t)},e.prototype.fixed=function(t,e){return void 0===e&&(e=1),this.jax.fixed(1e3*t,e)},e.kind="unknown",e}(s.CommonWrapper);e.SVGWrapper=l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,