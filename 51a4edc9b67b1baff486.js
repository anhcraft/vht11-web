(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\output\\common\\Wrappers\\menclose"],{"./node_modules/mathjax-full/js/output/common/Wrappers/menclose.js":function(t,r,e){"use strict";var o,n=this&&this.__extends||(o=function(t,r){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)r.hasOwnProperty(e)&&(t[e]=r[e])})(t,r)},function(t,r){function e(){this.constructor=t}o(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}),i=this&&this.__read||function(t,r){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var o,n,i=e.call(t),a=[];try{for(;(void 0===r||r-- >0)&&!(o=i.next()).done;)a.push(o.value)}catch(t){n={error:t}}finally{try{o&&!o.done&&(e=i.return)&&e.call(i)}finally{if(n)throw n.error}}return a},a=this&&this.__spread||function(){for(var t=[],r=0;r<arguments.length;r++)t=t.concat(i(arguments[r]));return t},s=this&&this.__values||function(t){var r="function"==typeof Symbol&&Symbol.iterator,e=r&&t[r],o=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(r,"__esModule",{value:!0}),r.CommonMencloseMixin=void 0;var h=e("./node_modules/mathjax-full/js/output/common/Notation.js"),l=e("./node_modules/mathjax-full/js/util/string.js");r.CommonMencloseMixin=function(t){return function(t){function r(){for(var r=[],e=0;e<arguments.length;e++)r[e]=arguments[e];var o=t.apply(this,a(r))||this;return o.notations={},o.renderChild=null,o.msqrt=null,o.padding=h.PADDING,o.thickness=h.THICKNESS,o.arrowhead={x:h.ARROWX,y:h.ARROWY,dx:h.ARROWDX},o.getParameters(),o.getNotations(),o.removeRedundantNotations(),o.initializeNotations(),o}return n(r,t),r.prototype.getParameters=function(){var t=this.node.attributes,r=t.get("data-padding");void 0!==r&&(this.padding=this.length2em(r,h.PADDING));var e=t.get("data-thickness");void 0!==e&&(this.thickness=this.length2em(e,h.THICKNESS));var o=t.get("data-arrowhead");if(void 0!==o){var n=i(l.split(o),3),a=n[0],s=n[1],u=n[2];this.arrowhead={x:a?parseFloat(a):h.ARROWX,y:s?parseFloat(s):h.ARROWY,dx:u?parseFloat(u):h.ARROWDX}}},r.prototype.getNotations=function(){var t,r,e=this.constructor.notations;try{for(var o=s(l.split(this.node.attributes.get("notation"))),n=o.next();!n.done;n=o.next()){var i=n.value,a=e.get(i);a&&(this.notations[i]=a,a.renderChild&&(this.renderChild=a.renderer))}}catch(r){t={error:r}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}},r.prototype.removeRedundantNotations=function(){var t,r,e,o;try{for(var n=s(Object.keys(this.notations)),i=n.next();!i.done;i=n.next()){var a=i.value;if(this.notations[a]){var h=this.notations[a].remove||"";try{for(var l=(e=void 0,s(h.split(/ /))),u=l.next();!u.done;u=l.next()){var d=u.value;delete this.notations[d]}}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=l.return)&&o.call(l)}finally{if(e)throw e.error}}}}}catch(r){t={error:r}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}},r.prototype.initializeNotations=function(){var t,r;try{for(var e=s(Object.keys(this.notations)),o=e.next();!o.done;o=e.next()){var n=o.value,i=this.notations[n].init;i&&i(this)}}catch(r){t={error:r}}finally{try{o&&!o.done&&(r=e.return)&&r.call(e)}finally{if(t)throw t.error}}},r.prototype.computeBBox=function(t,r){void 0===r&&(r=!1);var e=i(this.getBBoxExtenders(),4),o=e[0],n=e[1],a=e[2],s=e[3],h=this.childNodes[0].getBBox();t.combine(h,s,0),t.h+=o,t.d+=a,t.w+=n,this.setChildPWidths(r)},r.prototype.getBBoxExtenders=function(){var t,r,e=[0,0,0,0];try{for(var o=s(Object.keys(this.notations)),n=o.next();!n.done;n=o.next()){var i=n.value;this.maximizeEntries(e,this.notations[i].bbox(this))}}catch(r){t={error:r}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}return e},r.prototype.getPadding=function(){var t,r,e=[0,0,0,0],o=[0,0,0,0];try{for(var n=s(Object.keys(this.notations)),i=n.next();!i.done;i=n.next()){var a=i.value;this.maximizeEntries(e,this.notations[a].bbox(this));var h=this.notations[a].border;h&&this.maximizeEntries(o,h(this))}}catch(r){t={error:r}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(t)throw t.error}}return[0,1,2,3].map((function(t){return e[t]-o[t]}))},r.prototype.maximizeEntries=function(t,r){for(var e=0;e<t.length;e++)t[e]<r[e]&&(t[e]=r[e])},r.prototype.getArgMod=function(t,r){return[Math.atan2(r,t),Math.sqrt(t*t+r*r)]},r.prototype.arrow=function(t,r,e){return void 0===e&&(e=!1),null},r.prototype.arrowData=function(){var t=i([this.padding,this.thickness],2),r=t[0],e=t[1]*(this.arrowhead.x+Math.max(1,this.arrowhead.dx)),o=this.childNodes[0].getBBox(),n=o.h,a=o.d,s=o.w,h=n+a,l=Math.sqrt(h*h+s*s),u=Math.max(r,e*s/l),d=Math.max(r,e*h/l),c=i(this.getArgMod(s+2*u,h+2*d),2);return{a:c[0],W:c[1],x:u,y:d}},r.prototype.createMsqrt=function(t){var r=this.node.factory.create("msqrt");r.inheritAttributesFrom(this.node),r.childNodes[0]=t.node;var e=this.wrap(r);return e.parent=this,e},r.prototype.sqrtTRBL=function(){var t=this.msqrt.getBBox(),r=this.msqrt.childNodes[0].getBBox();return[t.h-r.h,0,t.d-r.d,t.w-r.w]},r}(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,