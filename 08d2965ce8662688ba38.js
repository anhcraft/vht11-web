(self.webpackChunkvht11=self.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\util\\Styles"],{"./node_modules/mathjax-full/js/util/Styles.js":function(t,e){"use strict";var r=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,l=r.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(n=l.next()).done;)o.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=l.return)&&r.call(l)}finally{if(i)throw i.error}}return o},i=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.Styles=void 0;var l=["top","right","bottom","left"],o=["width","style","color"];function a(t){for(var e=t.split(/((?:'[^']*'|"[^"]*"|,[\s\n]|[^\s\n])*)/g),r=[];e.length>1;)e.shift(),r.push(e.shift());return r}function s(t){var e,n,i=a(this.styles[t]);0===i.length&&i.push(""),1===i.length&&i.push(i[0]),2===i.length&&i.push(i[0]),3===i.length&&i.push(i[1]);try{for(var l=r(g.connect[t].children),o=l.next();!o.done;o=l.next()){var s=o.value;this.setStyle(this.childName(t,s),i.shift())}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=l.return)&&n.call(l)}finally{if(e)throw e.error}}}function c(t){var e,n,i=g.connect[t].children,l=[];try{for(var o=r(i),a=o.next();!a.done;a=o.next()){var s=a.value,c=this.styles[t+"-"+s];if(!c)return void delete this.styles[t];l.push(c)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}l[3]===l[1]&&(l.pop(),l[2]===l[0]&&(l.pop(),l[1]===l[0]&&l.pop())),this.styles[t]=l.join(" ")}function h(t){var e,n;try{for(var i=r(g.connect[t].children),l=i.next();!l.done;l=i.next()){var o=l.value;this.setStyle(this.childName(t,o),this.styles[t])}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}}function y(t){var e,n,l=i(g.connect[t].children),o=this.styles[this.childName(t,l.shift())];try{for(var a=r(l),s=a.next();!s.done;s=a.next()){var c=s.value;if(this.styles[this.childName(t,c)]!==o)return void delete this.styles[t]}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(e)throw e.error}}this.styles[t]=o}var u=/^(?:[\d.]+(?:[a-z]+)|thin|medium|thick|inherit|initial|unset)$/,d=/^(?:none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|inherit|initial|unset)$/;function f(t){var e,n,i,l,o={width:"",style:"",color:""};try{for(var s=r(a(this.styles[t])),c=s.next();!c.done;c=s.next()){var h=c.value;h.match(u)&&""===o.width?o.width=h:h.match(d)&&""===o.style?o.style=h:o.color=h}}catch(t){e={error:t}}finally{try{c&&!c.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}try{for(var y=r(g.connect[t].children),f=y.next();!f.done;f=y.next()){var p=f.value;this.setStyle(this.childName(t,p),o[p])}}catch(t){i={error:t}}finally{try{f&&!f.done&&(l=y.return)&&l.call(y)}finally{if(i)throw i.error}}}function p(t){var e,n,i=[];try{for(var l=r(g.connect[t].children),o=l.next();!o.done;o=l.next()){var a=o.value,s=this.styles[this.childName(t,a)];s&&i.push(s)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=l.return)&&n.call(l)}finally{if(e)throw e.error}}i.length?this.styles[t]=i.join(" "):delete this.styles[t]}var m={style:/^(?:normal|italic|oblique|inherit|initial|unset)$/,variant:new RegExp("^(?:"+["normal|none","inherit|initial|unset","common-ligatures|no-common-ligatures","discretionary-ligatures|no-discretionary-ligatures","historical-ligatures|no-historical-ligatures","contextual|no-contextual","(?:stylistic|character-variant|swash|ornaments|annotation)\\([^)]*\\)","small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps","lining-nums|oldstyle-nums|proportional-nums|tabular-nums","diagonal-fractions|stacked-fractions","ordinal|slashed-zero","jis78|jis83|jis90|jis04|simplified|traditional","full-width|proportional-width","ruby"].join("|")+")$"),weight:/^(?:normal|bold|bolder|lighter|[1-9]00|inherit|initial|unset)$/,stretch:new RegExp("^(?:"+["normal","(?:(?:ultra|extra|semi)-)?condensed","(?:(?:semi|extra|ulta)-)?expanded","inherit|initial|unset"].join("|")+")$"),size:new RegExp("^(?:"+["xx-small|x-small|small|medium|large|x-large|xx-large|larger|smaller","[d.]+%|[d.]+[a-z]+","inherit|initial|unset"].join("|")+")(?:/(?:normal|[d.+](?:%|[a-z]+)?))?$")};function v(t){var e,i,l,o,s=a(this.styles[t]),c={style:"",variant:[],weight:"",stretch:"",size:"",family:"","line-height":""};try{for(var h=r(s),y=h.next();!y.done;y=h.next()){var u=y.value;c.family=u;try{for(var d=(l=void 0,r(Object.keys(m))),f=d.next();!f.done;f=d.next()){var p=f.value;if((Array.isArray(c[p])||""===c[p])&&u.match(m[p]))if("size"===p){var v=n(u.split(/\//),2),b=v[0],x=v[1];c[p]=b,x&&(c["line-height"]=x)}else""===c.size&&(Array.isArray(c[p])?c[p].push(u):c[p]=u)}}catch(t){l={error:t}}finally{try{f&&!f.done&&(o=d.return)&&o.call(d)}finally{if(l)throw l.error}}}}catch(t){e={error:t}}finally{try{y&&!y.done&&(i=h.return)&&i.call(h)}finally{if(e)throw e.error}}!function(t,e){var n,i;try{for(var l=r(g.connect[t].children),o=l.next();!o.done;o=l.next()){var a=o.value,s=this.childName(t,a);if(Array.isArray(e[a])){var c=e[a];c.length&&(this.styles[s]=c.join(" "))}else""!==e[a]&&(this.styles[s]=e[a])}}catch(t){n={error:t}}finally{try{o&&!o.done&&(i=l.return)&&i.call(l)}finally{if(n)throw n.error}}}(t,c),delete this.styles[t]}function b(t){}var g=function(){function t(t){void 0===t&&(t=""),this.parse(t)}return Object.defineProperty(t.prototype,"cssText",{get:function(){var t,e,n=[];try{for(var i=r(Object.keys(this.styles)),l=i.next();!l.done;l=i.next()){var o=l.value,a=this.parentName(o);this.styles[a]||n.push(o+": "+this.styles[o])}}catch(e){t={error:e}}finally{try{l&&!l.done&&(e=i.return)&&e.call(i)}finally{if(t)throw t.error}}return n.join("; ")},enumerable:!1,configurable:!0}),t.prototype.set=function(e,r){for(e=this.normalizeName(e),this.setStyle(e,r),t.connect[e]&&!t.connect[e].combine&&(this.combineChildren(e),delete this.styles[e]);e.match(/-/)&&(e=this.parentName(e),t.connect[e]);)t.connect[e].combine.call(this,e)},t.prototype.get=function(t){return t=this.normalizeName(t),this.styles.hasOwnProperty(t)?this.styles[t]:""},t.prototype.setStyle=function(e,r){this.styles[e]=r,t.connect[e]&&t.connect[e].children&&t.connect[e].split.call(this,e),""===r&&delete this.styles[e]},t.prototype.combineChildren=function(e){var n,i,l=this.parentName(e);try{for(var o=r(t.connect[e].children),a=o.next();!a.done;a=o.next()){var s=a.value,c=this.childName(l,s);t.connect[c].combine.call(this,c)}}catch(t){n={error:t}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}},t.prototype.parentName=function(t){var e=t.replace(/-[^-]*$/,"");return t===e?"":e},t.prototype.childName=function(e,r){return r.match(/-/)?r:(t.connect[e]&&!t.connect[e].combine&&(r+=e.replace(/.*-/,"-"),e=this.parentName(e)),e+"-"+r)},t.prototype.normalizeName=function(t){return t.replace(/[A-Z]/g,(function(t){return"-"+t.toLowerCase()}))},t.prototype.parse=function(t){void 0===t&&(t="");var e=this.constructor.pattern;this.styles={};for(var r=t.replace(e.comment,"").split(e.style);r.length>1;){var i=n(r.splice(0,3),3),l=i[0],o=i[1],a=i[2];if(l.match(/[^\s\n]/))return;this.set(o,a)}},t.pattern={style:/([-a-z]+)[\s\n]*:[\s\n]*((?:'[^']*'|"[^"]*"|\n|.)*?)[\s\n]*(?:;|$)/g,comment:/\/\*[^]*?\*\//g},t.connect={padding:{children:l,split:s,combine:c},border:{children:l,split:h,combine:y},"border-top":{children:o,split:f,combine:p},"border-right":{children:o,split:f,combine:p},"border-bottom":{children:o,split:f,combine:p},"border-left":{children:o,split:f,combine:p},"border-width":{children:l,split:s,combine:null},"border-style":{children:l,split:s,combine:null},"border-color":{children:l,split:s,combine:null},font:{children:["style","variant","weight","stretch","line-height","size","family"],split:v,combine:b}},t}();e.Styles=g}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,