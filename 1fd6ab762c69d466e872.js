(self.webpackChunkvht11=self.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\output\\common\\Wrappers\\mtable"],{"./node_modules/mathjax-full/js/output/common/Wrappers/mtable.js":function(t,e,i){"use strict";var n,r=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__read||function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,r,o=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(t){r={error:t}}finally{try{n&&!n.done&&(i=o.return)&&i.call(o)}finally{if(r)throw r.error}}return s},s=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(o(arguments[e]));return t},a=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,i=e&&t[e],n=0;if(i)return i.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.CommonMtableMixin=void 0;var h=i("./node_modules/mathjax-full/js/util/BBox.js"),u=i("./node_modules/mathjax-full/js/util/string.js"),l=i("./node_modules/mathjax-full/js/util/numeric.js");e.CommonMtableMixin=function(t){return function(t){function e(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var n=t.apply(this,s(e))||this;n.numCols=0,n.numRows=0,n.data=null,n.pwidthCells=[],n.pWidth=0,n.numCols=l.max(n.tableRows.map((function(t){return t.numCells}))),n.numRows=n.childNodes.length,n.hasLabels=n.childNodes.reduce((function(t,e){return t||e.node.isKind("mlabeledtr")}),!1),n.findContainer(),n.isTop=!n.container||n.container.node.isKind("math")&&!n.container.parent,n.isTop&&(n.jax.table=n),n.getPercentageWidth();var r=n.node.attributes;return n.frame="none"!==r.get("frame"),n.fLine=n.frame?.07:0,n.fSpace=n.frame?n.convertLengths(n.getAttributeArray("framespacing")):[0,0],n.cSpace=n.convertLengths(n.getColumnAttributes("columnspacing")),n.rSpace=n.convertLengths(n.getRowAttributes("rowspacing")),n.cLines=n.getColumnAttributes("columnlines").map((function(t){return"none"===t?0:.07})),n.rLines=n.getRowAttributes("rowlines").map((function(t){return"none"===t?0:.07})),n.cWidths=n.getColumnWidths(),n.stretchRows(),n.stretchColumns(),n}return r(e,t),Object.defineProperty(e.prototype,"tableRows",{get:function(){return this.childNodes},enumerable:!1,configurable:!0}),e.prototype.findContainer=function(){for(var t=this,e=t.parent;e&&(e.node.notParent||e.node.isKind("mrow"));)t=e,e=e.parent;this.container=e,this.containerI=t.node.childPosition()},e.prototype.getPercentageWidth=function(){if(this.hasLabels)this.bbox.pwidth=h.BBox.fullWidth;else{var t=this.node.attributes.get("width");u.isPercent(t)&&(this.bbox.pwidth=t)}},e.prototype.stretchRows=function(){for(var t=this.node.attributes.get("equalrows"),e=t?this.getEqualRowHeight():0,i=t?this.getTableData():{H:[0],D:[0]},n=i.H,r=i.D,o=this.tableRows,s=0;s<this.numRows;s++){var a=t?[(e+n[s]-r[s])/2,(e-n[s]+r[s])/2]:null;o[s].stretchChildren(a)}},e.prototype.stretchColumns=function(){for(var t=0;t<this.numCols;t++){var e="number"==typeof this.cWidths[t]?this.cWidths[t]:null;this.stretchColumn(t,e)}},e.prototype.stretchColumn=function(t,e){var i,n,r,o,s,h,u=[];try{for(var l=a(this.tableRows),c=l.next();!c.done;c=l.next()){if(v=c.value.getChild(t))0===(C=v.childNodes[0]).stretch.dir&&C.canStretch(2)&&u.push(C)}}catch(t){i={error:t}}finally{try{c&&!c.done&&(n=l.return)&&n.call(l)}finally{if(i)throw i.error}}var f=u.length,p=this.childNodes.length;if(f&&p>1){if(null===e){e=0;var d=f>1&&f===p;try{for(var g=a(this.tableRows),m=g.next();!m.done;m=g.next()){var v;if(v=m.value.getChild(t)){var y=0===(C=v.childNodes[0]).stretch.dir;if(d||y){var b=C.getBBox(y).w;b>e&&(e=b)}}}}catch(t){r={error:t}}finally{try{m&&!m.done&&(o=g.return)&&o.call(g)}finally{if(r)throw r.error}}}try{for(var w=a(u),x=w.next();!x.done;x=w.next()){var C;(C=x.value).coreMO().getStretchedVariant([e])}}catch(t){s={error:t}}finally{try{x&&!x.done&&(h=w.return)&&h.call(w)}finally{if(s)throw s.error}}}},e.prototype.getTableData=function(){if(this.data)return this.data;for(var t=new Array(this.numRows).fill(0),e=new Array(this.numRows).fill(0),i=new Array(this.numCols).fill(0),n=new Array(this.numRows),r=new Array(this.numRows),o=[0],s=this.tableRows,a=0;a<s.length;a++){for(var h=s[a],u=0;u<h.numCells;u++){var l=h.getChild(u);this.updateHDW(l,u,a,t,e,i),this.recordPWidthCell(l,u)}n[a]=t[a],r[a]=e[a],h.labeled&&this.updateHDW(h.childNodes[0],0,a,t,e,o)}var c=o[0];return this.data={H:t,D:e,W:i,NH:n,ND:r,L:c},this.data},e.prototype.updateHDW=function(t,e,i,n,r,o){void 0===o&&(o=null);var s=t.getBBox(),a=s.h,h=s.d,u=s.w;a<.75&&(a=.75),h<.25&&(h=.25),a>n[i]&&(n[i]=a),h>r[i]&&(r[i]=h),o&&u>o[e]&&(o[e]=u)},e.prototype.recordPWidthCell=function(t,e){t.childNodes[0]&&t.childNodes[0].getBBox().pwidth&&this.pwidthCells.push([t,e])},e.prototype.computeBBox=function(t,e){void 0===e&&(e=!1);var i,n,r=this.getTableData(),s=r.H,a=r.D;if(this.node.attributes.get("equalrows")){var h=this.getEqualRowHeight();i=l.sum([].concat(this.rLines,this.rSpace))+h*this.numRows}else i=l.sum(s.concat(a,this.rLines,this.rSpace));i+=2*(this.fLine+this.fSpace[1]);var c=this.getComputedWidths();n=l.sum(c.concat(this.cLines,this.cSpace))+2*(this.fLine+this.fSpace[0]);var f=this.node.attributes.get("width");"auto"!==f&&(n=Math.max(this.length2em(f,0)+2*this.fLine,n));var p=o(this.getBBoxHD(i),2),d=p[0],g=p[1];t.h=d,t.d=g,t.w=n;var m=o(this.getBBoxLR(),2),v=m[0],y=m[1];t.L=v,t.R=y,u.isPercent(f)||this.setColumnPWidths()},e.prototype.setChildPWidths=function(t,e,i){var n=this.node.attributes.get("width");if(!u.isPercent(n))return!1;this.hasLabels||(this.bbox.pwidth="",this.container.bbox.pwidth="");var r=this.bbox,o=r.w,s=r.L,a=r.R,h=Math.max(o,this.length2em(n,Math.max(e,s+o+a))),c=this.node.attributes.get("equalcolumns")?Array(this.numCols).fill(this.percent(1/Math.max(1,this.numCols))):this.getColumnAttributes("columnwidth",0);this.cWidths=this.getColumnWidthsFixed(c,h);var f=this.getComputedWidths();return this.pWidth=l.sum(f.concat(this.cLines,this.cSpace))+2*(this.fLine+this.fSpace[0]),this.isTop&&(this.bbox.w=this.pWidth),this.setColumnPWidths(),this.pWidth!==o&&this.parent.invalidateBBox(),this.pWidth!==o},e.prototype.setColumnPWidths=function(){var t,e,i=this.cWidths;try{for(var n=a(this.pwidthCells),r=n.next();!r.done;r=n.next()){var s=o(r.value,2),h=s[0],u=s[1];h.setChildPWidths(!1,i[u])&&(h.invalidateBBox(),h.getBBox())}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}},e.prototype.getBBoxHD=function(t){var e=o(this.getAlignmentRow(),2),i=e[0],n=e[1];if(null===n){var r=this.font.params.axis_height,s=t/2;return{top:[0,t],center:[s,s],bottom:[t,0],baseline:[s,s],axis:[s+r,s-r]}[i]||[s,s]}var a=this.getVerticalPosition(n,i);return[a,t-a]},e.prototype.getBBoxLR=function(){if(this.hasLabels){var t=this.node.attributes.get("side"),e=o(this.getPadAlignShift(t),2),i=e[0];return"center"===e[1]?[i,i]:"left"===t?[i,0]:[0,i]}return[0,0]},e.prototype.getPadAlignShift=function(t){var e=this.getTableData().L+this.length2em(this.node.attributes.get("minlabelspacing")),i=o(null==this.styles?["",""]:[this.styles.get("padding-left"),this.styles.get("padding-right")],2),n=i[0],r=i[1];(n||r)&&(e=Math.max(e,this.length2em(n||"0"),this.length2em(r||"0")));var s=o(this.getAlignShift(),2),a=s[0],h=s[1];return a===t&&(h="left"===t?Math.max(e,h)-e:Math.min(-e,h)+e),[e,a,h]},e.prototype.getAlignShift=function(){return this.isTop?t.prototype.getAlignShift.call(this):[this.container.getChildAlign(this.containerI),0]},e.prototype.getWidth=function(){return this.pWidth||this.getBBox().w},e.prototype.getEqualRowHeight=function(){var t=this.getTableData(),e=t.H,i=t.D,n=Array.from(e.keys()).map((function(t){return e[t]+i[t]}));return Math.max.apply(Math,n)},e.prototype.getComputedWidths=function(){var t=this,e=this.getTableData().W,i=Array.from(e.keys()).map((function(i){return"number"==typeof t.cWidths[i]?t.cWidths[i]:e[i]}));return this.node.attributes.get("equalcolumns")&&(i=Array(i.length).fill(l.max(i))),i},e.prototype.getColumnWidths=function(){var t=this.node.attributes.get("width");if(this.node.attributes.get("equalcolumns"))return this.getEqualColumns(t);var e=this.getColumnAttributes("columnwidth",0);return"auto"===t?this.getColumnWidthsAuto(e):u.isPercent(t)?this.getColumnWidthsPercent(e):this.getColumnWidthsFixed(e,this.length2em(t))},e.prototype.getEqualColumns=function(t){var e,i=Math.max(1,this.numCols);if("auto"===t){var n=this.getTableData().W;e=l.max(n)}else if(u.isPercent(t))e=this.percent(1/i);else{var r=l.sum([].concat(this.cLines,this.cSpace))+2*this.fSpace[0];e=Math.max(0,this.length2em(t)-r)/i}return Array(this.numCols).fill(e)},e.prototype.getColumnWidthsAuto=function(t){var e=this;return t.map((function(t){return"auto"===t||"fit"===t?null:u.isPercent(t)?t:e.length2em(t)}))},e.prototype.getColumnWidthsPercent=function(t){var e=this,i=t.indexOf("fit")>=0,n=(i?this.getTableData():{W:null}).W;return Array.from(t.keys()).map((function(r){var o=t[r];return"fit"===o?null:"auto"===o?i?n[r]:null:u.isPercent(o)?o:e.length2em(o)}))},e.prototype.getColumnWidthsFixed=function(t,e){var i=this,n=Array.from(t.keys()),r=n.filter((function(e){return"fit"===t[e]})),o=n.filter((function(e){return"auto"===t[e]})),s=r.length||o.length,a=(s?this.getTableData():{W:null}).W,h=e-l.sum([].concat(this.cLines,this.cSpace))-2*this.fSpace[0],u=h;n.forEach((function(n){var r=t[n];u-="fit"===r||"auto"===r?a[n]:i.length2em(r,e)}));var c=s&&u>0?u/s:0;return n.map((function(e){var n=t[e];return"fit"===n?a[e]+c:"auto"===n?a[e]+(0===r.length?c:0):i.length2em(n,h)}))},e.prototype.getVerticalPosition=function(t,e){for(var i=this.node.attributes.get("equalrows"),n=this.getTableData(),r=n.H,s=n.D,a=i?this.getEqualRowHeight():0,h=this.getRowHalfSpacing(),u=this.fLine,l=0;l<t;l++)u+=h[l]+(i?a:r[l]+s[l])+h[l+1]+this.rLines[l];var c=o(i?[(a+r[t]-s[t])/2,(a-r[t]+s[t])/2]:[r[t],s[t]],2),f=c[0],p=c[1];return u+={top:0,center:h[t]+(f+p)/2,bottom:h[t]+f+p+h[t+1],baseline:h[t]+f,axis:h[t]+f-.25}[e]||0},e.prototype.getEmHalfSpacing=function(t,e){var i=this.em(t),n=this.addEm(e,2);return n.unshift(i),n.push(i),n},e.prototype.getRowHalfSpacing=function(){var t=this.rSpace.map((function(t){return t/2}));return t.unshift(this.fSpace[1]),t.push(this.fSpace[1]),t},e.prototype.getColumnHalfSpacing=function(){var t=this.cSpace.map((function(t){return t/2}));return t.unshift(this.fSpace[0]),t.push(this.fSpace[0]),t},e.prototype.getAlignmentRow=function(){var t=o(u.split(this.node.attributes.get("align")),2),e=t[0],i=t[1];if(null==i)return[e,null];var n=parseInt(i);return n<0&&(n+=this.numRows+1),[e,n<1||n>this.numRows?null:n-1]},e.prototype.getColumnAttributes=function(t,e){void 0===e&&(e=1);var i=this.numCols-e,n=this.getAttributeArray(t);if(0===n.length)return null;for(;n.length<i;)n.push(n[n.length-1]);return n.length>i&&n.splice(i),n},e.prototype.getRowAttributes=function(t,e){void 0===e&&(e=1);var i=this.numRows-e,n=this.getAttributeArray(t);if(0===n.length)return null;for(;n.length<i;)n.push(n[n.length-1]);return n.length>i&&n.splice(i),n},e.prototype.getAttributeArray=function(t){var e=this.node.attributes.get(t);return e?u.split(e):[this.node.attributes.getDefault(t)]},e.prototype.addEm=function(t,e){var i=this;return void 0===e&&(e=1),t?t.map((function(t){return i.em(t/e)})):null},e.prototype.convertLengths=function(t){var e=this;return t?t.map((function(t){return e.length2em(t)})):null},e}(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,