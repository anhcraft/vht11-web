(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\output\\common\\OutputJax"],{"./node_modules/mathjax-full/js/output/common/OutputJax.js":function(t,e,o){"use strict";var n,r=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,o=1,n=arguments.length;o<n;o++)for(var r in e=arguments[o])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},s=this&&this.__read||function(t,e){var o="function"==typeof Symbol&&t[Symbol.iterator];if(!o)return t;var n,r,i=o.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(t){r={error:t}}finally{try{n&&!n.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}return s},a=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,o=e&&t[e],n=0;if(o)return o.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.CommonOutputJax=void 0;var l=o("./node_modules/mathjax-full/js/core/OutputJax.js"),h=o("./node_modules/mathjax-full/js/core/MathItem.js"),c=o("./node_modules/mathjax-full/js/util/Options.js"),u=o("./node_modules/mathjax-full/js/util/lengths.js"),p=o("./node_modules/mathjax-full/js/util/Styles.js"),y=o("./node_modules/mathjax-full/js/util/StyleList.js"),d=function(t){function e(e,o,n){void 0===e&&(e=null),void 0===o&&(o=null),void 0===n&&(n=null);var r=this,i=s(c.separateOptions(e,n.OPTIONS),2),a=i[0],l=i[1];return(r=t.call(this,a)||this).factory=r.options.wrapperFactory||new o,r.factory.jax=r,r.cssStyles=r.options.cssStyles||new y.CssStyles,r.font=r.options.font||new n(l),r.unknownCache=new Map,r}return r(e,t),e.prototype.typeset=function(t,e){this.setDocument(e);var o=this.createNode();return this.toDOM(t,o,e),o},e.prototype.createNode=function(){var t=this.constructor.NAME;return this.html("mjx-container",{class:"MathJax",jax:t})},e.prototype.setScale=function(t){var e=this.math.metrics.scale*this.options.scale;1!==e&&this.adaptor.setStyle(t,"fontSize",u.percent(e))},e.prototype.toDOM=function(t,e,o){void 0===o&&(o=null),this.setDocument(o),this.math=t,this.pxPerEm=t.metrics.ex/this.font.params.x_height,t.root.setTeXclass(null),this.setScale(e),this.nodeMap=new Map,this.container=e,this.processMath(t.root,e),this.nodeMap=null,this.executeFilters(this.postFilters,t,o,e)},e.prototype.getBBox=function(t,e){this.setDocument(e),this.math=t,t.root.setTeXclass(null),this.nodeMap=new Map;var o=this.factory.wrap(t.root).getBBox();return this.nodeMap=null,o},e.prototype.getMetrics=function(t){var e,o;this.setDocument(t);var n=this.adaptor,r=this.getMetricMaps(t);try{for(var i=a(t.math),s=i.next();!s.done;s=i.next()){var l=s.value,c=n.parent(l.start.node);if(l.state()<h.STATE.METRICS&&c){var u=r[l.display?1:0].get(c),p=u.em,y=u.ex,d=u.containerWidth,f=u.lineWidth,m=u.scale,x=u.family;l.setMetrics(p,y,d,f,m),this.options.mtextInheritFont&&(l.outputData.mtextFamily=x),this.options.merrorInheritFont&&(l.outputData.merrorFamily=x),l.state(h.STATE.METRICS)}}}catch(t){e={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}},e.prototype.getMetricsFor=function(t,e){var o=this.options.mtextInheritFont||this.options.merrorInheritFont,n=this.getTestElement(t,e),r=this.measureMetrics(n,o);return this.adaptor.remove(n),r},e.prototype.getMetricMaps=function(t){var e,o,n,r,i,s,l,c,u,p,y=this.adaptor,d=[new Map,new Map];try{for(var f=a(t.math),m=f.next();!m.done;m=f.next()){var x=m.value;if((_=y.parent(x.start.node))&&x.state()<h.STATE.METRICS){var v=d[x.display?1:0];v.has(_)||v.set(_,this.getTestElement(_,x.display))}}}catch(t){e={error:t}}finally{try{m&&!m.done&&(o=f.return)&&o.call(f)}finally{if(e)throw e.error}}var S=this.options.mtextInheritFont||this.options.merrorInheritFont,g=[new Map,new Map];try{for(var w=a(g.keys()),j=w.next();!j.done;j=w.next()){var b=j.value;try{for(var M=(i=void 0,a(d[b].keys())),F=M.next();!F.done;F=M.next()){var _=F.value;g[b].set(_,this.measureMetrics(d[b].get(_),S))}}catch(t){i={error:t}}finally{try{F&&!F.done&&(s=M.return)&&s.call(M)}finally{if(i)throw i.error}}}}catch(t){n={error:t}}finally{try{j&&!j.done&&(r=w.return)&&r.call(w)}finally{if(n)throw n.error}}try{for(var O=a(g.keys()),T=O.next();!T.done;T=O.next()){b=T.value;try{for(var C=(u=void 0,a(d[b].values())),I=C.next();!I.done;I=C.next()){_=I.value;y.remove(_)}}catch(t){u={error:t}}finally{try{I&&!I.done&&(p=C.return)&&p.call(C)}finally{if(u)throw u.error}}}}catch(t){l={error:t}}finally{try{T&&!T.done&&(c=O.return)&&c.call(O)}finally{if(l)throw l.error}}return g},e.prototype.getTestElement=function(t,e){var o=this.adaptor;if(!this.testInline){this.testInline=this.html("mjx-test",{style:{display:"inline-block",width:"100%","font-style":"normal","font-weight":"normal","font-size":"100%","font-size-adjust":"none","text-indent":0,"text-transform":"none","letter-spacing":"normal","word-spacing":"normal",overflow:"hidden",height:"1px","margin-right":"-1px"}},[this.html("mjx-left-box",{style:{display:"inline-block",width:0,float:"left"}}),this.html("mjx-ex-box",{style:{position:"absolute",overflow:"hidden",width:"1px",height:"60ex"}}),this.html("mjx-right-box",{style:{display:"inline-block",width:0,float:"right"}})]),this.testDisplay=o.clone(this.testInline),o.setStyle(this.testDisplay,"display","table"),o.setStyle(this.testDisplay,"margin-right",""),o.setStyle(o.firstChild(this.testDisplay),"display","none");var n=o.lastChild(this.testDisplay);o.setStyle(n,"display","table-cell"),o.setStyle(n,"width","10000em"),o.setStyle(n,"float","")}return o.append(t,o.clone(e?this.testDisplay:this.testInline))},e.prototype.measureMetrics=function(t,e){var o=this.adaptor,n=e?o.fontFamily(t):"",r=o.fontSize(t),i=o.nodeSize(o.childNode(t,1))[1]/60||r*this.options.exFactor;return{em:r,ex:i,containerWidth:"table"===o.getStyle(t,"display")?o.nodeSize(o.lastChild(t))[0]-1:o.nodeBBox(o.lastChild(t)).left-o.nodeBBox(o.firstChild(t)).left-2,lineWidth:1e6,scale:Math.max(this.options.minScale,this.options.matchFontHeight?i/this.font.params.x_height/r:1),family:n}},e.prototype.styleSheet=function(t){var e,o,n,r;if(this.setDocument(t),this.cssStyles.clear(),this.cssStyles.addStyles(this.constructor.commonStyles),"getStyles"in t)try{for(var i=a(t.getStyles()),s=i.next();!s.done;s=i.next()){var l=s.value;this.cssStyles.addStyles(l)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}try{for(var h=a(this.factory.getKinds()),c=h.next();!c.done;c=h.next()){var u=c.value;this.addClassStyles(this.factory.getNodeClass(u))}}catch(t){n={error:t}}finally{try{c&&!c.done&&(r=h.return)&&r.call(h)}finally{if(n)throw n.error}}return this.cssStyles.addStyles(this.font.styles),this.html("style",{id:"MJX-styles"},[this.text("\n"+this.cssStyles.cssText+"\n")])},e.prototype.addClassStyles=function(t){this.cssStyles.addStyles(t.styles)},e.prototype.setDocument=function(t){t&&(this.document=t,this.adaptor.document=t.document)},e.prototype.html=function(t,e,o,n){return void 0===e&&(e={}),void 0===o&&(o=[]),this.adaptor.node(t,e,o,n)},e.prototype.text=function(t){return this.adaptor.text(t)},e.prototype.fixed=function(t,e){return void 0===e&&(e=3),Math.abs(t)<6e-4?"0":t.toFixed(e).replace(/\.?0+$/,"")},e.prototype.measureText=function(t,e,o){void 0===o&&(o=["",!1,!1]);var n=this.unknownText(t,e);if("-explicitFont"===e){var r=this.cssFontStyles(o);this.adaptor.setAttributes(n,{style:r})}return this.measureTextNodeWithCache(n,t,e,o)},e.prototype.measureTextNodeWithCache=function(t,e,o,n){void 0===n&&(n=["",!1,!1]),"-explicitFont"===o&&(o=[n[0],n[1]?"T":"F",n[2]?"T":"F",""].join("-")),this.unknownCache.has(o)||this.unknownCache.set(o,new Map);var r=this.unknownCache.get(o),i=r.get(e);if(i)return i;var s=this.measureTextNode(t);return r.set(e,s),s},e.prototype.measureXMLnode=function(t){var e=this.adaptor,o=this.html("mjx-xml-block",{style:{display:"inline-block"}},[e.clone(t)]),n=this.html("mjx-baseline",{style:{display:"inline-block",width:0,height:0}}),r=this.html("mjx-measure-xml",{style:{position:"absolute",display:"inline-block","font-family":"initial","line-height":"normal"}},[n,o]);e.append(e.parent(this.math.start.node),this.container),e.append(this.container,r);var i=this.math.metrics.em*this.math.metrics.scale,s=e.nodeBBox(o),a=s.left,l=s.right,h=s.bottom,c=s.top,u=(l-a)/i,p=(e.nodeBBox(n).top-c)/i,y=(h-c)/i-p;return e.remove(this.container),e.remove(r),{w:u,h:p,d:y}},e.prototype.cssFontStyles=function(t,e){void 0===e&&(e={});var o=s(t,3),n=o[0],r=o[1],i=o[2];return e["font-family"]=this.font.getFamily(n),r&&(e["font-style"]="italic"),i&&(e["font-weight"]="bold"),e},e.prototype.getFontData=function(t){return t||(t=new p.Styles),[this.font.getFamily(t.get("font-family")),"italic"===t.get("font-style"),"bold"===t.get("font-weight")]},e.NAME="Common",e.OPTIONS=i(i({},l.AbstractOutputJax.OPTIONS),{scale:1,minScale:.5,matchFontHeight:!0,mtextInheritFont:!1,merrorInheritFont:!1,mtextFont:"",merrorFont:"serif",mathmlSpacing:!1,skipAttributes:{},exFactor:.5,displayAlign:"center",displayIndent:"0",wrapperFactory:null,font:null,cssStyles:null}),e.commonStyles={},e}(l.AbstractOutputJax);e.CommonOutputJax=d}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,