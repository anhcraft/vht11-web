(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\adaptors\\lite\\Parser"],{"./node_modules/mathjax-full/js/adaptors/lite/Parser.js":function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,a=r.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(n=a.next()).done;)i.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return i},o=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.LiteParser=e.PATTERNS=void 0;var a,i=r("./node_modules/mathjax-full/js/util/Entities.js"),l=r("./node_modules/mathjax-full/js/adaptors/lite/Element.js"),s=r("./node_modules/mathjax-full/js/adaptors/lite/Text.js");!function(t){t.TAGNAME="[a-z][^\\s\\n>]*",t.ATTNAME="[a-z][^\\s\\n>=]*",t.VALUE="(?:'[^']*'|\"[^\"]*\"|[^\\s\\n]+)",t.VALUESPLIT="(?:'([^']*)'|\"([^\"]*)\"|([^\\s\\n]+))",t.SPACE="(?:\\s|\\n)+",t.OPTIONALSPACE="(?:\\s|\\n)*",t.ATTRIBUTE=t.ATTNAME+"(?:"+t.OPTIONALSPACE+"="+t.OPTIONALSPACE+t.VALUE+")?",t.ATTRIBUTESPLIT="("+t.ATTNAME+")(?:"+t.OPTIONALSPACE+"="+t.OPTIONALSPACE+t.VALUESPLIT+")?",t.TAG="(<(?:"+t.TAGNAME+"(?:"+t.SPACE+t.ATTRIBUTE+")*"+t.OPTIONALSPACE+"/?|/"+t.TAGNAME+"|!--[^]*?--|![^]*?)(?:>|$))",t.tag=new RegExp(t.TAG,"i"),t.attr=new RegExp(t.ATTRIBUTE,"i"),t.attrsplit=new RegExp(t.ATTRIBUTESPLIT,"i")}(a=e.PATTERNS||(e.PATTERNS={}));var c=function(){function t(){}return t.prototype.parseFromString=function(t,e,r){void 0===e&&(e="text/html"),void 0===r&&(r=null);for(var n=r.createDocument(),o=r.body(n),i=t.replace(/<\?.*?\?>/g,"").split(a.tag);i.length;){var l=i.shift(),s=i.shift();l&&this.addText(r,o,l),s&&">"===s.charAt(s.length-1)&&("!"===s.charAt(1)?this.addComment(r,o,s):o="/"===s.charAt(1)?this.closeTag(r,o,s):this.openTag(r,o,s,i))}return this.checkDocument(r,n),n},t.prototype.addText=function(t,e,r){return r=i.translate(r),t.append(e,t.text(r))},t.prototype.addComment=function(t,e,r){return t.append(e,new s.LiteComment(r))},t.prototype.closeTag=function(t,e,r){for(var n=r.slice(2,r.length-1).toLowerCase();t.parent(e)&&t.kind(e)!==n;)e=t.parent(e);return t.parent(e)},t.prototype.openTag=function(t,e,r,n){var o=this.constructor.PCDATA,i=this.constructor.SELF_CLOSING,l=r.match(/<(.*?)[\s\n>\/]/)[1].toLowerCase(),s=t.node(l),c=r.replace(/^<.*?[\s\n>]/,"").split(a.attrsplit);return(c.pop().match(/>$/)||c.length<5)&&(this.addAttributes(t,s,c),t.append(e,s),i[l]||r.match(/\/>$/)||(o[l]?this.handlePCDATA(t,s,l,n):e=s)),e},t.prototype.addAttributes=function(t,e,r){for(var o=this.constructor.CDATA_ATTR;r.length;){var a=n(r.splice(0,5),5),l=a[1],s=a[2],c=a[3],u=a[4],d=s||c||u||"";o[l]||(d=i.translate(d)),t.setAttribute(e,l,d)}},t.prototype.handlePCDATA=function(t,e,r,n){for(var o=[],a="</"+r+">",i="";n.length&&i!==a;)o.push(i),o.push(n.shift()),i=n.shift();t.append(e,t.text(o.join("")))},t.prototype.checkDocument=function(t,e){var r,n,a,i,l=this.getOnlyChild(t,t.body(e));if(l){try{for(var c=o(t.childNodes(t.body(e))),u=c.next();!u.done;u=c.next()){if((h=u.value)===l)break;h instanceof s.LiteComment&&h.value.match(/^<!DOCTYPE/)&&(e.type=h.value)}}catch(t){r={error:t}}finally{try{u&&!u.done&&(n=c.return)&&n.call(c)}finally{if(r)throw r.error}}switch(t.kind(l)){case"html":try{for(var d=o(l.children),p=d.next();!p.done;p=d.next()){var h=p.value;switch(t.kind(h)){case"head":e.head=h;break;case"body":e.body=h}}}catch(t){a={error:t}}finally{try{p&&!p.done&&(i=d.return)&&i.call(d)}finally{if(a)throw a.error}}e.root=l,t.remove(l),t.parent(e.body)!==l&&t.append(l,e.body),t.parent(e.head)!==l&&t.insert(e.head,e.body);break;case"head":e.head=t.replace(l,e.head);break;case"body":e.body=t.replace(l,e.body)}}},t.prototype.getOnlyChild=function(t,e){var r,n,a=null;try{for(var i=o(t.childNodes(e)),s=i.next();!s.done;s=i.next()){var c=s.value;if(c instanceof l.LiteElement){if(a)return null;a=c}}}catch(t){r={error:t}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}return a},t.prototype.serialize=function(t,e){var r=this,n=this.constructor.SELF_CLOSING,o=this.constructor.CDATA_ATTR,a=t.kind(e),i=t.allAttributes(e).map((function(t){return t.name+'="'+(o[t.name]?t.value:r.protectAttribute(t.value))+'"'})).join(" ");return"<"+a+(i?" "+i:"")+">"+(n[a]?"":t.innerHTML(e)+"</"+a+">")},t.prototype.serializeInner=function(t,e){var r=this;return this.constructor.PCDATA.hasOwnProperty(e.kind)?t.childNodes(e).map((function(e){return t.value(e)})).join(""):t.childNodes(e).map((function(e){var n=t.kind(e);return"#text"===n?r.protectHTML(t.value(e)):"#comment"===n?e.value:r.serialize(t,e)})).join("")},t.prototype.protectAttribute=function(t){return"string"!=typeof t&&(t=String(t)),t.replace(/"/g,"&quot;")},t.prototype.protectHTML=function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},t.SELF_CLOSING={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},t.PCDATA={option:!0,textarea:!0,fieldset:!0,title:!0,style:!0,script:!0},t.CDATA_ATTR={style:!0,datafld:!0,datasrc:!0,href:!0,src:!0,longdesc:!0,usemap:!0,cite:!0,datetime:!0,action:!0,axis:!0,profile:!0,content:!0,scheme:!0},t}();e.LiteParser=c}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,