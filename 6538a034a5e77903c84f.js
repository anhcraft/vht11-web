(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\output\\common\\Wrappers\\scriptbase"],{"./node_modules/mathjax-full/js/output/common/Wrappers/scriptbase.js":function(t,e){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}),n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var o,n,i=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(o=i.next()).done;)s.push(o.value)}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}return s},i=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t},s=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.CommonScriptbaseMixin=void 0;e.CommonScriptbaseMixin=function(t){var e;return(e=function(t){function e(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o=t.apply(this,i(e))||this,n=o.baseCore=o.childNodes[0];if(!n)return o;for(;1===n.childNodes.length&&(n.node.isKind("mrow")||n.node.isKind("TeXAtom")||n.node.isKind("mstyle")||n.node.isKind("mpadded")||n.node.isKind("mphantom")||n.node.isKind("semantics"));)if(!(n=n.childNodes[0]))return o;return"noIC"in n?(o.baseCore=n,o.constructor.useIC||(n.noIC=!0),o):o}return o(e,t),Object.defineProperty(e.prototype,"baseChild",{get:function(){return this.childNodes[this.node.base]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"script",{get:function(){return this.childNodes[1]},enumerable:!1,configurable:!0}),e.prototype.computeBBox=function(t,e){void 0===e&&(e=!1);var r=this.baseChild.getBBox(),o=this.script.getBBox(),i=n(this.getOffset(r,o),2),s=i[0],a=i[1];t.append(r),t.combine(o,t.w+s,a),t.w+=this.font.params.scriptspace,t.clean(),this.setChildPWidths(e)},e.prototype.coreIC=function(){var t=this.baseCore.getBBox();return t.ic?1.05*t.ic+.05:0},e.prototype.coreScale=function(){for(var t=this.baseChild.getBBox().rscale,e=this.baseChild;(e.node.isKind("mstyle")||e.node.isKind("mrow")||e.node.isKind("TeXAtom"))&&1===e.childNodes.length;)t*=(e=e.childNodes[0]).getBBox().rscale;return t},e.prototype.isCharBase=function(){for(var t=this.baseChild;(t.node.isKind("mstyle")||t.node.isKind("mrow"))&&1===t.childNodes.length;)t=t.childNodes[0];return(t.node.isKind("mo")||t.node.isKind("mi")||t.node.isKind("mn"))&&1===t.bbox.rscale&&1===Array.from(t.getText()).length&&!t.node.attributes.get("largeop")},e.prototype.getOffset=function(t,e){return[0,0]},e.prototype.getV=function(t,e){var r=this.font.params,o=this.length2em(this.node.attributes.get("subscriptshift"),r.sub1);return Math.max(this.isCharBase()?0:t.d*t.rscale+r.sub_drop*e.rscale,o,e.h*e.rscale-.8*r.x_height)},e.prototype.getU=function(t,e){var r=this.font.params,o=this.node.attributes.getList("displaystyle","superscriptshift"),n=this.node.getProperty("texprimestyle")?r.sup3:o.displaystyle?r.sup1:r.sup2,i=this.length2em(o.superscriptshift,n);return Math.max(this.isCharBase()?0:t.h*t.rscale-r.sup_drop*e.rscale,i,e.d*e.rscale+1/4*r.x_height)},e.prototype.hasMovableLimits=function(){var t=this.node.attributes.get("displaystyle"),e=this.baseChild.coreMO().node;return!t&&!!e.attributes.get("movablelimits")},e.prototype.getOverKU=function(t,e){var r=this.node.attributes.get("accent"),o=this.font.params,n=e.d*e.rscale,i=(r?o.rule_thickness:Math.max(o.big_op_spacing1,o.big_op_spacing3-Math.max(0,n)))-(this.baseChild.node.isKind("munderover")?.1:0);return[i,t.h*t.rscale+i+n]},e.prototype.getUnderKV=function(t,e){var r=this.node.attributes.get("accentunder"),o=this.font.params,n=e.h*e.rscale,i=(r?o.rule_thickness:Math.max(o.big_op_spacing2,o.big_op_spacing4-n))-(this.baseChild.node.isKind("munderover")?.1:0);return[i,-(t.d*t.rscale+i+n)]},e.prototype.getDeltaW=function(t,e){var r,o,n,a;void 0===e&&(e=[0,0,0]);var l=this.node.attributes.get("align"),c=t.map((function(t){return t.w*t.rscale})),h=Math.max.apply(Math,i(c)),d=[],u=0;try{for(var p=s(c.keys()),f=p.next();!f.done;f=p.next()){d[m=f.value]=("center"===l?(h-c[m])/2:"right"===l?h-c[m]:0)+e[m],d[m]<u&&(u=-d[m])}}catch(t){r={error:t}}finally{try{f&&!f.done&&(o=p.return)&&o.call(p)}finally{if(r)throw r.error}}if(u)try{for(var y=s(d.keys()),b=y.next();!b.done;b=y.next()){var m;d[m=b.value]+=u}}catch(t){n={error:t}}finally{try{b&&!b.done&&(a=y.return)&&a.call(y)}finally{if(n)throw n.error}}return d},e.prototype.getDelta=function(t){void 0===t&&(t=!1);var e=this.node.attributes.get("accent")&&!t?this.baseChild.coreMO().bbox.sk:0;return(1.5*this.baseCore.bbox.ic/2+e)*this.coreScale()},e.prototype.stretchChildren=function(){var t,e,r,o,n,i,a=[];try{for(var l=s(this.childNodes),c=l.next();!c.done;c=l.next()){(C=c.value).canStretch(2)&&a.push(C)}}catch(e){t={error:e}}finally{try{c&&!c.done&&(e=l.return)&&e.call(l)}finally{if(t)throw t.error}}var h=a.length,d=this.childNodes.length;if(h&&d>1){var u=0,p=h>1&&h===d;try{for(var f=s(this.childNodes),y=f.next();!y.done;y=f.next()){var b=0===(C=y.value).stretch.dir;if(p||b){var m=C.getBBox(b),g=m.w,v=m.rscale;g*v>u&&(u=g*v)}}}catch(t){r={error:t}}finally{try{y&&!y.done&&(o=f.return)&&o.call(f)}finally{if(r)throw r.error}}try{for(var x=s(a),_=x.next();!_.done;_=x.next()){var C;(C=_.value).coreMO().getStretchedVariant([u/C.bbox.rscale])}}catch(t){n={error:t}}finally{try{_&&!_.done&&(i=x.return)&&i.call(x)}finally{if(n)throw n.error}}}},e}(t)).useIC=!1,e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,