(self.webpackChunkvht11=self.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\url\\url"],{"./node_modules/url/url.js":(t,s,h)=>{"use strict";var e=h("./node_modules/punycode/punycode.js"),a=h("./node_modules/url/util.js");function r(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}s.parse=b,s.resolve=function(t,s){return b(t,!1,!0).resolve(s)},s.resolveObject=function(t,s){return t?b(t,!1,!0).resolveObject(s):s},s.format=function(t){a.isString(t)&&(t=b(t));return t instanceof r?t.format():r.prototype.format.call(t)},s.Url=r;var o=/^([a-z0-9.+-]+:)/i,n=/:[0-9]*$/,i=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),p=["'"].concat(l),u=["%","/","?",";","#"].concat(p),c=["/","?","#"],f=/^[+a-z0-9A-Z_-]{0,63}$/,m=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,v={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},d=h("./node_modules/querystring/index.js");function b(t,s,h){if(t&&a.isObject(t)&&t instanceof r)return t;var e=new r;return e.parse(t,s,h),e}r.prototype.parse=function(t,s,h){if(!a.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var r=t.indexOf("?"),n=-1!==r&&r<t.indexOf("#")?"?":"#",l=t.split(n);l[0]=l[0].replace(/\\/g,"/");var b=t=l.join(n);if(b=b.trim(),!h&&1===t.split("#").length){var j=i.exec(b);if(j)return this.path=b,this.href=b,this.pathname=j[1],j[2]?(this.search=j[2],this.query=s?d.parse(this.search.substr(1)):this.search.substr(1)):s&&(this.search="",this.query={}),this}var O=o.exec(b);if(O){var q=(O=O[0]).toLowerCase();this.protocol=q,b=b.substr(O.length)}if(h||O||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===b.substr(0,2);!x||O&&g[O]||(b=b.substr(2),this.slashes=!0)}if(!g[O]&&(x||O&&!y[O])){for(var A,C,k=-1,w=0;w<c.length;w++){-1!==(I=b.indexOf(c[w]))&&(-1===k||I<k)&&(k=I)}-1!==(C=-1===k?b.lastIndexOf("@"):b.lastIndexOf("@",k))&&(A=b.slice(0,C),b=b.slice(C+1),this.auth=decodeURIComponent(A)),k=-1;for(w=0;w<u.length;w++){var I;-1!==(I=b.indexOf(u[w]))&&(-1===k||I<k)&&(k=I)}-1===k&&(k=b.length),this.host=b.slice(0,k),b=b.slice(k),this.parseHost(),this.hostname=this.hostname||"";var U="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!U)for(var _=this.hostname.split(/\./),N=(w=0,_.length);w<N;w++){var R=_[w];if(R&&!R.match(f)){for(var S="",$=0,z=R.length;$<z;$++)R.charCodeAt($)>127?S+="x":S+=R[$];if(!S.match(f)){var H=_.slice(0,w),L=_.slice(w+1),P=R.match(m);P&&(H.push(P[1]),L.unshift(P[2])),L.length&&(b="/"+L.join(".")+b),this.hostname=H.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),U||(this.hostname=e.toASCII(this.hostname));var Z=this.port?":"+this.port:"",E=this.hostname||"";this.host=E+Z,this.href+=this.host,U&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!v[q])for(w=0,N=p.length;w<N;w++){var T=p[w];if(-1!==b.indexOf(T)){var B=encodeURIComponent(T);B===T&&(B=escape(T)),b=b.split(T).join(B)}}var D=b.indexOf("#");-1!==D&&(this.hash=b.substr(D),b=b.slice(0,D));var F=b.indexOf("?");if(-1!==F?(this.search=b.substr(F),this.query=b.substr(F+1),s&&(this.query=d.parse(this.query)),b=b.slice(0,F)):s&&(this.search="",this.query={}),b&&(this.pathname=b),y[q]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){Z=this.pathname||"";var G=this.search||"";this.path=Z+G}return this.href=this.format(),this},r.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var s=this.protocol||"",h=this.pathname||"",e=this.hash||"",r=!1,o="";this.host?r=t+this.host:this.hostname&&(r=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(r+=":"+this.port)),this.query&&a.isObject(this.query)&&Object.keys(this.query).length&&(o=d.stringify(this.query));var n=this.search||o&&"?"+o||"";return s&&":"!==s.substr(-1)&&(s+=":"),this.slashes||(!s||y[s])&&!1!==r?(r="//"+(r||""),h&&"/"!==h.charAt(0)&&(h="/"+h)):r||(r=""),e&&"#"!==e.charAt(0)&&(e="#"+e),n&&"?"!==n.charAt(0)&&(n="?"+n),s+r+(h=h.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(n=n.replace("#","%23"))+e},r.prototype.resolve=function(t){return this.resolveObject(b(t,!1,!0)).format()},r.prototype.resolveObject=function(t){if(a.isString(t)){var s=new r;s.parse(t,!1,!0),t=s}for(var h=new r,e=Object.keys(this),o=0;o<e.length;o++){var n=e[o];h[n]=this[n]}if(h.hash=t.hash,""===t.href)return h.href=h.format(),h;if(t.slashes&&!t.protocol){for(var i=Object.keys(t),l=0;l<i.length;l++){var p=i[l];"protocol"!==p&&(h[p]=t[p])}return y[h.protocol]&&h.hostname&&!h.pathname&&(h.path=h.pathname="/"),h.href=h.format(),h}if(t.protocol&&t.protocol!==h.protocol){if(!y[t.protocol]){for(var u=Object.keys(t),c=0;c<u.length;c++){var f=u[c];h[f]=t[f]}return h.href=h.format(),h}if(h.protocol=t.protocol,t.host||g[t.protocol])h.pathname=t.pathname;else{for(var m=(t.pathname||"").split("/");m.length&&!(t.host=m.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==m[0]&&m.unshift(""),m.length<2&&m.unshift(""),h.pathname=m.join("/")}if(h.search=t.search,h.query=t.query,h.host=t.host||"",h.auth=t.auth,h.hostname=t.hostname||t.host,h.port=t.port,h.pathname||h.search){var v=h.pathname||"",d=h.search||"";h.path=v+d}return h.slashes=h.slashes||t.slashes,h.href=h.format(),h}var b=h.pathname&&"/"===h.pathname.charAt(0),j=t.host||t.pathname&&"/"===t.pathname.charAt(0),O=j||b||h.host&&t.pathname,q=O,x=h.pathname&&h.pathname.split("/")||[],A=(m=t.pathname&&t.pathname.split("/")||[],h.protocol&&!y[h.protocol]);if(A&&(h.hostname="",h.port=null,h.host&&(""===x[0]?x[0]=h.host:x.unshift(h.host)),h.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===m[0]?m[0]=t.host:m.unshift(t.host)),t.host=null),O=O&&(""===m[0]||""===x[0])),j)h.host=t.host||""===t.host?t.host:h.host,h.hostname=t.hostname||""===t.hostname?t.hostname:h.hostname,h.search=t.search,h.query=t.query,x=m;else if(m.length)x||(x=[]),x.pop(),x=x.concat(m),h.search=t.search,h.query=t.query;else if(!a.isNullOrUndefined(t.search)){if(A)h.hostname=h.host=x.shift(),(U=!!(h.host&&h.host.indexOf("@")>0)&&h.host.split("@"))&&(h.auth=U.shift(),h.host=h.hostname=U.shift());return h.search=t.search,h.query=t.query,a.isNull(h.pathname)&&a.isNull(h.search)||(h.path=(h.pathname?h.pathname:"")+(h.search?h.search:"")),h.href=h.format(),h}if(!x.length)return h.pathname=null,h.search?h.path="/"+h.search:h.path=null,h.href=h.format(),h;for(var C=x.slice(-1)[0],k=(h.host||t.host||x.length>1)&&("."===C||".."===C)||""===C,w=0,I=x.length;I>=0;I--)"."===(C=x[I])?x.splice(I,1):".."===C?(x.splice(I,1),w++):w&&(x.splice(I,1),w--);if(!O&&!q)for(;w--;w)x.unshift("..");!O||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),k&&"/"!==x.join("/").substr(-1)&&x.push("");var U,_=""===x[0]||x[0]&&"/"===x[0].charAt(0);A&&(h.hostname=h.host=_?"":x.length?x.shift():"",(U=!!(h.host&&h.host.indexOf("@")>0)&&h.host.split("@"))&&(h.auth=U.shift(),h.host=h.hostname=U.shift()));return(O=O||h.host&&x.length)&&!_&&x.unshift(""),x.length?h.pathname=x.join("/"):(h.pathname=null,h.path=null),a.isNull(h.pathname)&&a.isNull(h.search)||(h.path=(h.pathname?h.pathname:"")+(h.search?h.search:"")),h.auth=t.auth||h.auth,h.slashes=h.slashes||t.slashes,h.href=h.format(),h},r.prototype.parseHost=function(){var t=this.host,s=n.exec(t);s&&(":"!==(s=s[0])&&(this.port=s.substr(1)),t=t.substr(0,t.length-s.length)),t&&(this.hostname=t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,