(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\@pixi\\text-bitmap\\lib\\text-bitmap.es"],{"./node_modules/@pixi/text-bitmap/lib/text-bitmap.es.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{BitmapFont:()=>b,BitmapFontData:()=>c,BitmapFontLoader:()=>S,BitmapText:()=>T});var r=i("./node_modules/@pixi/math/lib/math.es.js"),n=i("./node_modules/@pixi/settings/lib/settings.es.js"),a=i("./node_modules/@pixi/mesh/lib/mesh.es.js"),s=i("./node_modules/@pixi/utils/lib/utils.es.js"),o=i("./node_modules/@pixi/core/lib/core.es.js"),h=i("./node_modules/@pixi/text/lib/text.es.js"),l=i("./node_modules/@pixi/display/lib/display.es.js"),u=i("./node_modules/@pixi/loaders/lib/loaders.es.js"),f=function(e,t){return(f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)};var c=function(){this.info=[],this.common=[],this.page=[],this.char=[],this.kerning=[]},p=function(){function e(){}return e.test=function(e){return"string"==typeof e&&0===e.indexOf("info face=")},e.parse=function(e){var t=e.match(/^[a-z]+\s+.+$/gm),i={info:[],common:[],page:[],char:[],chars:[],kerning:[],kernings:[]};for(var r in t){var n=t[r].match(/^[a-z]+/gm)[0],a=t[r].match(/[a-zA-Z]+=([^\s"']+|"([^"]*)")/gm),s={};for(var o in a){var h=a[o].split("="),l=h[0],u=h[1].replace(/"/gm,""),f=parseFloat(u),p=isNaN(f)?u:f;s[l]=p}i[n].push(s)}var d=new c;return i.info.forEach((function(e){return d.info.push({face:e.face,size:parseInt(e.size,10)})})),i.common.forEach((function(e){return d.common.push({lineHeight:parseInt(e.lineHeight,10)})})),i.page.forEach((function(e){return d.page.push({id:parseInt(e.id,10),file:e.file})})),i.char.forEach((function(e){return d.char.push({id:parseInt(e.id,10),page:parseInt(e.page,10),x:parseInt(e.x,10),y:parseInt(e.y,10),width:parseInt(e.width,10),height:parseInt(e.height,10),xoffset:parseInt(e.xoffset,10),yoffset:parseInt(e.yoffset,10),xadvance:parseInt(e.xadvance,10)})})),i.kerning.forEach((function(e){return d.kerning.push({first:parseInt(e.first,10),second:parseInt(e.second,10),amount:parseInt(e.amount,10)})})),d},e}(),d=function(){function e(){}return e.test=function(e){return e instanceof XMLDocument&&e.getElementsByTagName("page").length&&null!==e.getElementsByTagName("info")[0].getAttribute("face")},e.parse=function(e){for(var t=new c,i=e.getElementsByTagName("info"),r=e.getElementsByTagName("common"),n=e.getElementsByTagName("page"),a=e.getElementsByTagName("char"),s=e.getElementsByTagName("kerning"),o=0;o<i.length;o++)t.info.push({face:i[o].getAttribute("face"),size:parseInt(i[o].getAttribute("size"),10)});for(o=0;o<r.length;o++)t.common.push({lineHeight:parseInt(r[o].getAttribute("lineHeight"),10)});for(o=0;o<n.length;o++)t.page.push({id:parseInt(n[o].getAttribute("id"),10)||0,file:n[o].getAttribute("file")});for(o=0;o<a.length;o++){var h=a[o];t.char.push({id:parseInt(h.getAttribute("id"),10),page:parseInt(h.getAttribute("page"),10)||0,x:parseInt(h.getAttribute("x"),10),y:parseInt(h.getAttribute("y"),10),width:parseInt(h.getAttribute("width"),10),height:parseInt(h.getAttribute("height"),10),xoffset:parseInt(h.getAttribute("xoffset"),10),yoffset:parseInt(h.getAttribute("yoffset"),10),xadvance:parseInt(h.getAttribute("xadvance"),10)})}for(o=0;o<s.length;o++)t.kerning.push({first:parseInt(s[o].getAttribute("first"),10),second:parseInt(s[o].getAttribute("second"),10),amount:parseInt(s[o].getAttribute("amount"),10)});return t},e}(),g=function(){function e(){}return e.test=function(e){if("string"==typeof e&&e.indexOf("<font>")>-1){var t=(new self.DOMParser).parseFromString(e,"text/xml");return d.test(t)}return!1},e.parse=function(e){var t=(new window.DOMParser).parseFromString(e,"text/xml");return d.parse(t)},e}(),m=[p,d,g];function x(e){for(var t=0;t<m.length;t++)if(m[t].test(e))return m[t];return null}function v(e,t,i,r,n,a){var s,o=i.fill;if(!Array.isArray(o))return o;if(1===o.length)return o[0];var l=i.dropShadow?i.dropShadowDistance:0,u=i.padding||0,f=Math.ceil(e.width/r)-l-2*u,c=Math.ceil(e.height/r)-l-2*u,p=o.slice(),d=i.fillGradientStops.slice();if(!d.length)for(var g=p.length+1,m=1;m<g;++m)d.push(m/g);if(p.unshift(o[0]),d.unshift(0),p.push(o[o.length-1]),d.push(1),i.fillGradientType===h.TEXT_GRADIENT.LINEAR_VERTICAL){s=t.createLinearGradient(f/2,u,f/2,c+u);var x=0,v=(a.fontProperties.fontSize+i.strokeThickness)/c;for(m=0;m<n.length;m++)for(var y=a.lineHeight*m,b=0;b<p.length;b++){var _=y/c+("number"==typeof d[b]?d[b]:b/p.length)*v,w=Math.max(x,_);w=Math.min(w,1),s.addColorStop(w,p[b]),x=w}}else{s=t.createLinearGradient(u,c/2,f+u,c/2);var T=p.length+1,S=1;for(m=0;m<p.length;m++){var A=void 0;A="number"==typeof d[m]?d[m]:S/T,s.addColorStop(A,p[m]),S++}}return s}function y(e,t,i,r,n,a,o){var h=i.text,l=i.fontProperties;t.translate(r,n),t.scale(a,a);var u=o.strokeThickness/2,f=-o.strokeThickness/2;t.font=o.toFontString(),t.lineWidth=o.strokeThickness,t.textBaseline=o.textBaseline,t.lineJoin=o.lineJoin,t.miterLimit=o.miterLimit,t.fillStyle=v(e,t,o,a,[h],i),t.strokeStyle=o.stroke,t.font=o.toFontString(),t.lineWidth=o.strokeThickness,t.textBaseline=o.textBaseline,t.lineJoin=o.lineJoin,t.miterLimit=o.miterLimit,t.fillStyle=v(e,t,o,a,[h],i),t.strokeStyle=o.stroke;var c=o.dropShadowColor,p=(0,s.hex2rgb)("number"==typeof c?c:(0,s.string2hex)(c));o.dropShadow?(t.shadowColor="rgba("+255*p[0]+","+255*p[1]+","+255*p[2]+","+o.dropShadowAlpha+")",t.shadowBlur=o.dropShadowBlur,t.shadowOffsetX=Math.cos(o.dropShadowAngle)*o.dropShadowDistance,t.shadowOffsetY=Math.sin(o.dropShadowAngle)*o.dropShadowDistance):(t.shadowColor="black",t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0),o.stroke&&o.strokeThickness&&t.strokeText(h,u,f+i.lineHeight-l.descent),o.fill&&t.fillText(h,u,f+i.lineHeight-l.descent),t.setTransform(1,0,0,1,0,0),t.fillStyle="rgba(0, 0, 0, 0)"}var b=function(){function e(e,t){var i=e.info[0],n=e.common[0],a=e.page[0],h=(0,s.getResolutionOfUrl)(a.file),l={};this.font=i.face,this.size=i.size,this.lineHeight=n.lineHeight/h,this.chars={},this.pageTextures=l;for(var u=0;u<e.page.length;u++){var f=e.page[u],c=f.id,p=f.file;l[c]=t instanceof Array?t[u]:t[p]}for(u=0;u<e.char.length;u++){var d=e.char[u],g=(c=d.id,d.page),m=e.char[u],x=m.x,v=m.y,y=m.width,b=m.height,_=m.xoffset,w=m.yoffset,T=m.xadvance;x/=h,v/=h,y/=h,b/=h,_/=h,w/=h,T/=h;var S=new r.Rectangle(x+l[g].frame.x/h,v+l[g].frame.y/h,y,b);this.chars[c]={xOffset:_,yOffset:w,xAdvance:T,kerning:{},texture:new o.Texture(l[g].baseTexture,S),page:g}}for(u=0;u<e.kerning.length;u++){var A=e.kerning[u],I=A.first,P=A.second,O=A.amount;I/=h,P/=h,O/=h,this.chars[P]&&(this.chars[P].kerning[I]=O)}}return e.prototype.destroy=function(){for(var e in this.chars)this.chars[e].texture.destroy(),this.chars[e].texture=null;for(var e in this.pageTextures)this.pageTextures[e].destroy(!0),this.pageTextures[e]=null;this.chars=null,this.pageTextures=null},e.install=function(t,i){var r;if(t instanceof c)r=t;else{var n=x(t);if(!n)throw new Error("Unrecognized data format for font.");r=n.parse(t)}i instanceof o.Texture&&(i=[i]);var a=new e(r,i);return e.available[a.font]=a,a},e.uninstall=function(t){var i=e.available[t];if(!i)throw new Error("No font found named '"+t+"'");i.destroy(),delete e.available[t]},e.from=function(t,i,r){if(!t)throw new Error("[BitmapFont] Property `name` is required.");var n=Object.assign({},e.defaultOptions,r),a=n.chars,s=n.padding,l=n.resolution,u=n.textureWidth,f=n.textureHeight,p=function(e){"string"==typeof e&&(e=[e]);for(var t=[],i=0,r=e.length;i<r;i++){var n=e[i];if(Array.isArray(n)){if(2!==n.length)throw new Error("[BitmapFont]: Invalid character range length, expecting 2 got "+n.length+".");var a=n[0].charCodeAt(0),s=n[1].charCodeAt(0);if(s<a)throw new Error("[BitmapFont]: Invalid character range.");for(var o=a,h=s;o<=h;o++)t.push(String.fromCharCode(o))}else t.push.apply(t,n.split(""))}if(0===t.length)throw new Error("[BitmapFont]: Empty set when resolving characters.");return t}(a),d=i instanceof h.TextStyle?i:new h.TextStyle(i),g=u,m=new c;m.info[0]={face:d.fontFamily,size:d.fontSize},m.common[0]={lineHeight:d.fontSize};for(var x,v,b,_=0,w=0,T=0,S=[],A=0;A<p.length;A++){x||((x=document.createElement("canvas")).width=u,x.height=f,v=x.getContext("2d"),b=new o.BaseTexture(x,{resolution:l}),S.push(new o.Texture(b)),m.page.push({id:S.length-1,file:""}));var I=h.TextMetrics.measureText(p[A],d,!1,x),P=I.width,O=Math.ceil(I.height),E=Math.ceil(("italic"===d.fontStyle?2:1)*P);if(w>=f-O*l){if(0===w)throw new Error("[BitmapFont] textureHeight "+f+"px is too small for "+d.fontSize+"px fonts");--A,x=null,v=null,b=null,w=0,_=0,T=0}else if(T=Math.max(O+I.fontProperties.descent,T),E*l+_>=g)--A,w+=T*l,w=Math.ceil(w),_=0,T=0;else{y(x,v,I,_,w,l,d);var k=I.text.charCodeAt(0);m.char.push({id:k,page:S.length-1,x:_/l,y:w/l,width:E,height:O,xoffset:0,yoffset:0,xadvance:Math.ceil(P-(d.dropShadow?d.dropShadowDistance:0)-(d.stroke?d.strokeThickness:0))}),_+=(E+2*s)*l,_=Math.ceil(_)}}var M=new e(m,S);return void 0!==e.available[t]&&e.uninstall(t),e.available[t]=M,M},e.ALPHA=[["a","z"],["A","Z"]," "],e.NUMERIC=[["0","9"]],e.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],e.ASCII=[[" ","~"]],e.defaultOptions={resolution:1,textureWidth:512,textureHeight:512,padding:4,chars:e.ALPHANUMERIC},e.available={},e}(),_=[],w=[],T=function(e){function t(i,a){void 0===a&&(a={});var o=e.call(this)||this;o._tint=16777215,a.font&&((0,s.deprecation)("5.3.0","PIXI.BitmapText constructor style.font property is deprecated."),o._upgradeStyle(a));var h=Object.assign({},t.styleDefaults,a),l=h.align,u=h.tint,f=h.maxWidth,c=h.letterSpacing,p=h.fontName,d=h.fontSize;if(!b.available[p])throw new Error('Missing BitmapFont "'+p+'"');return o._activePagesMeshData=[],o._textWidth=0,o._textHeight=0,o._align=l,o._tint=u,o._fontName=p,o._fontSize=d||b.available[p].size,o._text=i,o._maxWidth=f,o._maxLineHeight=0,o._letterSpacing=c,o._anchor=new r.ObservablePoint((function(){o.dirty=!0}),o,0,0),o._roundPixels=n.settings.ROUND_PIXELS,o.dirty=!0,o._textureCache={},o}return function(e,t){function i(){this.constructor=e}f(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}(t,e),t.prototype.updateText=function(){for(var e,t=b.available[this._fontName],i=this._fontSize/t.size,n=new r.Point,h=[],l=[],u=this._text.replace(/(?:\r\n|\r)/g,"\n")||" ",f=u.length,c=this._maxWidth*t.size/this._fontSize,p=null,d=0,g=0,m=0,x=-1,v=0,y=0,T=0,S=0;S<f;S++){var A=u.charCodeAt(S),I=u.charAt(S);if(/(?:\s)/.test(I)&&(x=S,v=d),"\r"!==I&&"\n"!==I){var P=t.chars[A];if(P){p&&P.kerning[p]&&(n.x+=P.kerning[p]);var O=w.pop()||{texture:o.Texture.EMPTY,line:0,charCode:0,position:new r.Point};O.texture=P.texture,O.line=m,O.charCode=A,O.position.x=n.x+P.xOffset+this._letterSpacing/2,O.position.y=n.y+P.yOffset,h.push(O),n.x+=P.xAdvance+this._letterSpacing,d=n.x,T=Math.max(T,P.yOffset+P.texture.height),p=A,-1!==x&&c>0&&n.x>c&&(++y,(0,s.removeItems)(h,1+x-y,1+S-x),S=x,x=-1,l.push(v),g=Math.max(g,v),m++,n.x=0,n.y+=t.lineHeight,p=null)}}else l.push(d),g=Math.max(g,d),++m,++y,n.x=0,n.y+=t.lineHeight,p=null}var E=u.charAt(u.length-1);"\r"!==E&&"\n"!==E&&(/(?:\s)/.test(E)&&(d=v),l.push(d),g=Math.max(g,d));var k=[];for(S=0;S<=m;S++){var M=0;"right"===this._align?M=g-l[S]:"center"===this._align&&(M=(g-l[S])/2),k.push(M)}var B=h.length,C={},z=[],j=this._activePagesMeshData;for(S=0;S<j.length;S++)_.push(j[S]);for(S=0;S<B;S++){var H=(G=h[S].texture).baseTexture.uid;if(!C[H]){if(!(K=_.pop())){var F=new a.MeshGeometry,N=new a.MeshMaterial(o.Texture.EMPTY);K={index:0,indexCount:0,vertexCount:0,uvsCount:0,total:0,mesh:new a.Mesh(F,N),vertices:null,uvs:null,indices:null}}K.index=0,K.indexCount=0,K.vertexCount=0,K.uvsCount=0,K.total=0;var L=this._textureCache;L[H]=L[H]||new o.Texture(G.baseTexture),K.mesh.texture=L[H],K.mesh.tint=this._tint,z.push(K),C[H]=K}C[H].total++}for(S=0;S<j.length;S++)-1===z.indexOf(j[S])&&this.removeChild(j[S].mesh);for(S=0;S<z.length;S++)z[S].mesh.parent!==this&&this.addChild(z[S].mesh);for(var S in this._activePagesMeshData=z,C){var D=(K=C[S]).total;if(!((null===(e=K.indices)||void 0===e?void 0:e.length)>6*D)||K.vertices.length<2*a.Mesh.BATCHABLE_SIZE)K.vertices=new Float32Array(8*D),K.uvs=new Float32Array(8*D),K.indices=new Uint16Array(6*D);else for(var U=K.total,W=K.vertices,R=4*U*2;R<W.length;R++)W[R]=0;K.mesh.size=6*D}for(S=0;S<B;S++){var X=(I=h[S]).position.x+k[I.line];this._roundPixels&&(X=Math.round(X));var G,Y=X*i,J=I.position.y*i,Z=C[(G=I.texture).baseTexture.uid],$=G.frame,V=G._uvs,q=Z.index++;Z.indices[6*q+0]=0+4*q,Z.indices[6*q+1]=1+4*q,Z.indices[6*q+2]=2+4*q,Z.indices[6*q+3]=0+4*q,Z.indices[6*q+4]=2+4*q,Z.indices[6*q+5]=3+4*q,Z.vertices[8*q+0]=Y,Z.vertices[8*q+1]=J,Z.vertices[8*q+2]=Y+$.width*i,Z.vertices[8*q+3]=J,Z.vertices[8*q+4]=Y+$.width*i,Z.vertices[8*q+5]=J+$.height*i,Z.vertices[8*q+6]=Y,Z.vertices[8*q+7]=J+$.height*i,Z.uvs[8*q+0]=V.x0,Z.uvs[8*q+1]=V.y0,Z.uvs[8*q+2]=V.x1,Z.uvs[8*q+3]=V.y1,Z.uvs[8*q+4]=V.x2,Z.uvs[8*q+5]=V.y2,Z.uvs[8*q+6]=V.x3,Z.uvs[8*q+7]=V.y3}for(var S in this._textWidth=g*i,this._textHeight=(n.y+t.lineHeight)*i,C){var K=C[S];if(0!==this.anchor.x||0!==this.anchor.y)for(var Q=0,ee=this._textWidth*this.anchor.x,te=this._textHeight*this.anchor.y,ie=0;ie<K.total;ie++)K.vertices[Q++]-=ee,K.vertices[Q++]-=te,K.vertices[Q++]-=ee,K.vertices[Q++]-=te,K.vertices[Q++]-=ee,K.vertices[Q++]-=te,K.vertices[Q++]-=ee,K.vertices[Q++]-=te;this._maxLineHeight=T*i;var re=K.mesh.geometry.getBuffer("aVertexPosition"),ne=K.mesh.geometry.getBuffer("aTextureCoord"),ae=K.mesh.geometry.getIndex();re.data=K.vertices,ne.data=K.uvs,ae.data=K.indices,re.update(),ne.update(),ae.update()}for(S=0;S<h.length;S++)w.push(h[S])},t.prototype.updateTransform=function(){this.validate(),this.containerUpdateTransform()},t.prototype.getLocalBounds=function(){return this.validate(),e.prototype.getLocalBounds.call(this)},t.prototype.validate=function(){this.dirty&&(this.updateText(),this.dirty=!1)},Object.defineProperty(t.prototype,"tint",{get:function(){return this._tint},set:function(e){if(this._tint!==e){this._tint=e;for(var t=0;t<this._activePagesMeshData.length;t++)this._activePagesMeshData[t].mesh.tint=e}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"align",{get:function(){return this._align},set:function(e){this._align!==e&&(this._align=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontName",{get:function(){return this._fontName},set:function(e){if(!b.available[e])throw new Error('Missing BitmapFont "'+e+'"');this._fontName!==e&&(this._fontName=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontSize",{get:function(){return this._fontSize},set:function(e){this._fontSize!==e&&(this._fontSize=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"anchor",{get:function(){return this._anchor},set:function(e){"number"==typeof e?this._anchor.set(e):this._anchor.copyFrom(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"text",{get:function(){return this._text},set:function(e){e=String(null==e?"":e),this._text!==e&&(this._text=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxWidth",{get:function(){return this._maxWidth},set:function(e){this._maxWidth!==e&&(this._maxWidth=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxLineHeight",{get:function(){return this.validate(),this._maxLineHeight},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"textWidth",{get:function(){return this.validate(),this._textWidth},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"letterSpacing",{get:function(){return this._letterSpacing},set:function(e){this._letterSpacing!==e&&(this._letterSpacing=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"roundPixels",{get:function(){return this._roundPixels},set:function(e){e!==this._roundPixels&&(this._roundPixels=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"textHeight",{get:function(){return this.validate(),this._textHeight},enumerable:!1,configurable:!0}),t.prototype._upgradeStyle=function(e){if("string"==typeof e.font){var t=e.font.split(" ");e.fontName=1===t.length?t[0]:t.slice(1).join(" "),t.length>=2&&(e.fontSize=parseInt(t[0],10))}else e.fontName=e.font.name,e.fontSize="number"==typeof e.font.size?e.font.size:parseInt(e.font.size,10)},t.prototype.destroy=function(t){var i=this._textureCache;for(var r in i){i[r].destroy(),delete i[r]}this._textureCache=null,e.prototype.destroy.call(this,t)},t.registerFont=function(e,t){return(0,s.deprecation)("5.3.0","PIXI.BitmapText.registerFont is deprecated, use PIXI.BitmapFont.install"),b.install(e,t)},Object.defineProperty(t,"fonts",{get:function(){return(0,s.deprecation)("5.3.0","PIXI.BitmapText.fonts is deprecated, use PIXI.BitmapFont.available"),b.available},enumerable:!1,configurable:!0}),t.styleDefaults={align:"left",tint:16777215,maxWidth:0,letterSpacing:0},t}(l.Container),S=function(){function e(){}return e.add=function(){u.LoaderResource.setExtensionXhrType("fnt",u.LoaderResource.XHR_RESPONSE_TYPE.TEXT)},e.use=function(t,i){var r=x(t.data);if(r)for(var n=e.getBaseUrl(this,t),a=r.parse(t.data),s={},o=function(e){s[e.metadata.pageFile]=e.texture,Object.keys(s).length===a.page.length&&(t.bitmapFont=b.install(a,s),i())},h=0;h<a.page.length;++h){var l=a.page[h].file,f=n+l,c=!1;for(var p in this.resources){var d=this.resources[p];if(d.url===f){d.metadata.pageFile=l,d.texture?o(d):d.onAfterMiddleware.add(o),c=!0;break}}if(!c){var g={crossOrigin:t.crossOrigin,loadType:u.LoaderResource.LOAD_TYPE.IMAGE,metadata:Object.assign({pageFile:l},t.metadata.imageMetadata),parentResource:t};this.add(f,g,o)}}else i()},e.getBaseUrl=function(t,i){var r=i.isDataUrl?"":e.dirname(i.url);return i.isDataUrl&&("."===r&&(r=""),t.baseUrl&&r&&"/"===t.baseUrl.charAt(t.baseUrl.length-1)&&(r+="/")),(r=r.replace(t.baseUrl,""))&&"/"!==r.charAt(r.length-1)&&(r+="/"),r},e.dirname=function(e){var t=e.replace(/\\/g,"/").replace(/\/$/,"").replace(/\/[^\/]*$/,"");return t===e?".":""===t?"/":t},e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,