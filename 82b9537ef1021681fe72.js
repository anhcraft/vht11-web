(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\output\\svg\\Wrappers\\menclose"],{"./node_modules/mathjax-full/js/output/svg/Wrappers/menclose.js":function(t,e,r){"use strict";var o,n=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),i=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var o,n,i=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(o=i.next()).done;)s.push(o.value)}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}return s};Object.defineProperty(e,"__esModule",{value:!0}),e.SVGmenclose=void 0;var a=r("./node_modules/mathjax-full/js/output/svg/Wrapper.js"),d=r("./node_modules/mathjax-full/js/output/common/Wrappers/menclose.js"),l=r("./node_modules/mathjax-full/js/output/svg/Notation.js"),h=r("./node_modules/mathjax-full/js/core/MmlTree/MmlNodes/menclose.js"),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.toSVG=function(t){var e,r,o=this.standardSVGnode(t),n=this.getBBoxExtenders()[3],s={};n>0&&(s.transform="translate("+this.fixed(n)+", 0)");var a=this.adaptor.append(o,this.svg("g",s));this.renderChild?this.renderChild(this,a):this.childNodes[0].toSVG(a);try{for(var d=i(Object.keys(this.notations)),l=d.next();!l.done;l=d.next()){var h=l.value,u=this.notations[h];!u.renderChild&&u.renderer(this,o)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(r=d.return)&&r.call(d)}finally{if(e)throw e.error}}},e.prototype.arrow=function(t,e,r){void 0===r&&(r=!1);var o=this.getBBox(),n=o.w,i=(t-n)/2,a=(o.h-o.d)/2,d=this.thickness,l=d/2,h=s([d*this.arrowhead.x,d*this.arrowhead.y,d*this.arrowhead.dx],3),u=h[0],f=h[1],p=h[2],c=r?this.fill("M",n+i,a,"l",-(u+p),f,"l",p,l-f,"L",u-i,a+l,"l",p,f-l,"l",-(u+p),-f,"l",u+p,-f,"l",-p,f-l,"L",n+i-u,a-l,"l",-p,l-f,"Z"):this.fill("M",n+i,a,"l",-(u+p),f,"l",p,l-f,"L",-i,a+l,"l",0,-d,"L",n+i-u,a-l,"l",-p,l-f,"Z");if(e){var x=this.jax.fixed(180*-e/Math.PI);this.adaptor.setAttribute(c,"transform","rotate("+[x,this.fixed(n/2),this.fixed(a)].join(" ")+")")}return c},e.prototype.line=function(t){var e=s(t,4),r=e[0],o=e[1],n=e[2],i=e[3];return this.svg("line",{x1:this.fixed(r),y1:this.fixed(o),x2:this.fixed(n),y2:this.fixed(i),"stroke-width":this.fixed(this.thickness)})},e.prototype.box=function(t,e,r,o){void 0===o&&(o=0);var n=this.thickness,i={x:this.fixed(n/2),y:this.fixed(n/2-r),width:this.fixed(t-n),height:this.fixed(e+r-n),fill:"none","stroke-width":this.fixed(n)};return o&&(i.rx=this.fixed(o)),this.svg("rect",i)},e.prototype.ellipse=function(t,e,r){var o=this.thickness;return this.svg("ellipse",{rx:this.fixed((t-o)/2),ry:this.fixed((e+r-o)/2),cx:this.fixed(t/2),cy:this.fixed((e-r)/2),fill:"none","stroke-width":this.fixed(o)})},e.prototype.path=function(t){for(var e=this,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];return this.svg("path",{d:r.map((function(t){return"string"==typeof t?t:e.fixed(t)})).join(" "),style:{"stroke-width":this.fixed(this.thickness)},"stroke-linecap":"round","stroke-linejoin":t,fill:"none"})},e.prototype.fill=function(){for(var t=this,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return this.svg("path",{d:e.map((function(e){return"string"==typeof e?e:t.fixed(e)})).join(" ")})},e.kind=h.MmlMenclose.prototype.kind,e.notations=new Map([l.Border("top"),l.Border("right"),l.Border("bottom"),l.Border("left"),l.Border2("actuarial","top","right"),l.Border2("madruwb","bottom","right"),l.DiagonalStrike("up"),l.DiagonalStrike("down"),["horizontalstrike",{renderer:l.RenderLine("horizontal"),bbox:function(t){return[0,t.padding,0,t.padding]}}],["verticalstrike",{renderer:l.RenderLine("vertical"),bbox:function(t){return[t.padding,0,t.padding,0]}}],["box",{renderer:function(t,e){var r=t.getBBox(),o=r.w,n=r.h,i=r.d;t.adaptor.append(t.element,t.box(o,n,i))},bbox:l.fullBBox,border:l.fullBorder,remove:"left right top bottom"}],["roundedbox",{renderer:function(t,e){var r=t.getBBox(),o=r.w,n=r.h,i=r.d,s=t.thickness+t.padding;t.adaptor.append(t.element,t.box(o,n,i,s))},bbox:l.fullBBox}],["circle",{renderer:function(t,e){var r=t.getBBox(),o=r.w,n=r.h,i=r.d;t.adaptor.append(t.element,t.ellipse(o,n,i))},bbox:l.fullBBox}],["phasorangle",{renderer:function(t,e){var r=t.getBBox(),o=r.w,n=r.h,i=r.d,s=t.getArgMod(1.75*t.padding,n+i)[0],a=t.thickness/2,d=n+i,l=Math.cos(s);t.adaptor.append(t.element,t.path("mitre","M",o,a-i,"L",a+l*a,a-i,"L",l*d+a,d-i-a))},bbox:function(t){var e=t.padding/2,r=t.thickness;return[2*e,e,e+r,3*e+r]},border:function(t){return[0,0,t.thickness,0]},remove:"bottom"}],l.Arrow("up"),l.Arrow("down"),l.Arrow("left"),l.Arrow("right"),l.Arrow("updown"),l.Arrow("leftright"),l.DiagonalArrow("updiagonal"),l.DiagonalArrow("northeast"),l.DiagonalArrow("southeast"),l.DiagonalArrow("northwest"),l.DiagonalArrow("southwest"),l.DiagonalArrow("northeastsouthwest"),l.DiagonalArrow("northwestsoutheast"),["longdiv",{renderer:function(t,e){var r=t.getBBox(),o=r.w,n=r.h,i=r.d,s=t.thickness/2,a=t.padding;t.adaptor.append(t.element,t.path("round","M",s,s-i,"a",a-s/2,(n+i)/2-4*s,0,"0,1",0,n+i-2*s,"L",o-s,n-s))},bbox:function(t){var e=t.padding,r=t.thickness;return[e+r,e,e,2*e+r/2]}}],["radical",{renderer:function(t,e){t.msqrt.toSVG(e);var r=t.sqrtTRBL()[3];t.place(-r,0,e)},init:function(t){t.msqrt=t.createMsqrt(t.childNodes[0])},bbox:function(t){return t.sqrtTRBL()},renderChild:!0}]]),e}(d.CommonMencloseMixin(a.SVGWrapper));e.SVGmenclose=u}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,