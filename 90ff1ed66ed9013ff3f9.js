(self.webpackChunkvht11=self.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\@pixi\\display\\lib\\display.es"],{"./node_modules/@pixi/display/lib/display.es.js":(t,i,e)=>{"use strict";e.r(i),e.d(i,{Bounds:()=>o,Container:()=>m,DisplayObject:()=>l,TemporaryDisplayObject:()=>d});var n=e("./node_modules/@pixi/settings/lib/settings.es.js"),r=e("./node_modules/@pixi/math/lib/math.es.js"),s=e("./node_modules/@pixi/utils/lib/utils.es.js");n.settings.SORTABLE_CHILDREN=!1;var o=function(){function t(){this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.rect=null,this.updateID=-1}return t.prototype.isEmpty=function(){return this.minX>this.maxX||this.minY>this.maxY},t.prototype.clear=function(){this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0},t.prototype.getRectangle=function(t){return this.minX>this.maxX||this.minY>this.maxY?r.Rectangle.EMPTY:((t=t||new r.Rectangle(0,0,1,1)).x=this.minX,t.y=this.minY,t.width=this.maxX-this.minX,t.height=this.maxY-this.minY,t)},t.prototype.addPoint=function(t){this.minX=Math.min(this.minX,t.x),this.maxX=Math.max(this.maxX,t.x),this.minY=Math.min(this.minY,t.y),this.maxY=Math.max(this.maxY,t.y)},t.prototype.addQuad=function(t){var i=this.minX,e=this.minY,n=this.maxX,r=this.maxY,s=t[0],o=t[1];i=s<i?s:i,e=o<e?o:e,n=s>n?s:n,r=o>r?o:r,i=(s=t[2])<i?s:i,e=(o=t[3])<e?o:e,n=s>n?s:n,r=o>r?o:r,i=(s=t[4])<i?s:i,e=(o=t[5])<e?o:e,n=s>n?s:n,r=o>r?o:r,i=(s=t[6])<i?s:i,e=(o=t[7])<e?o:e,n=s>n?s:n,r=o>r?o:r,this.minX=i,this.minY=e,this.maxX=n,this.maxY=r},t.prototype.addFrame=function(t,i,e,n,r){this.addFrameMatrix(t.worldTransform,i,e,n,r)},t.prototype.addFrameMatrix=function(t,i,e,n,r){var s=t.a,o=t.b,a=t.c,h=t.d,l=t.tx,d=t.ty,p=this.minX,m=this.minY,u=this.maxX,c=this.maxY,f=s*i+a*e+l,y=o*i+h*e+d;p=f<p?f:p,m=y<m?y:m,u=f>u?f:u,c=y>c?y:c,p=(f=s*n+a*e+l)<p?f:p,m=(y=o*n+h*e+d)<m?y:m,u=f>u?f:u,c=y>c?y:c,p=(f=s*i+a*r+l)<p?f:p,m=(y=o*i+h*r+d)<m?y:m,u=f>u?f:u,c=y>c?y:c,p=(f=s*n+a*r+l)<p?f:p,m=(y=o*n+h*r+d)<m?y:m,u=f>u?f:u,c=y>c?y:c,this.minX=p,this.minY=m,this.maxX=u,this.maxY=c},t.prototype.addVertexData=function(t,i,e){for(var n=this.minX,r=this.minY,s=this.maxX,o=this.maxY,a=i;a<e;a+=2){var h=t[a],l=t[a+1];n=h<n?h:n,r=l<r?l:r,s=h>s?h:s,o=l>o?l:o}this.minX=n,this.minY=r,this.maxX=s,this.maxY=o},t.prototype.addVertices=function(t,i,e,n){this.addVerticesMatrix(t.worldTransform,i,e,n)},t.prototype.addVerticesMatrix=function(t,i,e,n,r,s){void 0===r&&(r=0),void 0===s&&(s=r);for(var o=t.a,a=t.b,h=t.c,l=t.d,d=t.tx,p=t.ty,m=this.minX,u=this.minY,c=this.maxX,f=this.maxY,y=e;y<n;y+=2){var b=i[y],x=i[y+1],_=o*b+h*x+d,v=l*x+a*b+p;m=Math.min(m,_-r),c=Math.max(c,_+r),u=Math.min(u,v-s),f=Math.max(f,v+s)}this.minX=m,this.minY=u,this.maxX=c,this.maxY=f},t.prototype.addBounds=function(t){var i=this.minX,e=this.minY,n=this.maxX,r=this.maxY;this.minX=t.minX<i?t.minX:i,this.minY=t.minY<e?t.minY:e,this.maxX=t.maxX>n?t.maxX:n,this.maxY=t.maxY>r?t.maxY:r},t.prototype.addBoundsMask=function(t,i){var e=t.minX>i.minX?t.minX:i.minX,n=t.minY>i.minY?t.minY:i.minY,r=t.maxX<i.maxX?t.maxX:i.maxX,s=t.maxY<i.maxY?t.maxY:i.maxY;if(e<=r&&n<=s){var o=this.minX,a=this.minY,h=this.maxX,l=this.maxY;this.minX=e<o?e:o,this.minY=n<a?n:a,this.maxX=r>h?r:h,this.maxY=s>l?s:l}},t.prototype.addBoundsMatrix=function(t,i){this.addFrameMatrix(i,t.minX,t.minY,t.maxX,t.maxY)},t.prototype.addBoundsArea=function(t,i){var e=t.minX>i.x?t.minX:i.x,n=t.minY>i.y?t.minY:i.y,r=t.maxX<i.x+i.width?t.maxX:i.x+i.width,s=t.maxY<i.y+i.height?t.maxY:i.y+i.height;if(e<=r&&n<=s){var o=this.minX,a=this.minY,h=this.maxX,l=this.maxY;this.minX=e<o?e:o,this.minY=n<a?n:a,this.maxX=r>h?r:h,this.maxY=s>l?s:l}},t.prototype.pad=function(t,i){void 0===t&&(t=0),void 0===i&&(i=t),this.isEmpty()||(this.minX-=t,this.maxX+=t,this.minY-=i,this.maxY+=i)},t.prototype.addFramePad=function(t,i,e,n,r,s){t-=r,i-=s,e+=r,n+=s,this.minX=this.minX<t?this.minX:t,this.maxX=this.maxX>e?this.maxX:e,this.minY=this.minY<i?this.minY:i,this.maxY=this.maxY>n?this.maxY:n},t}(),a=function(t,i){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var e in i)i.hasOwnProperty(e)&&(t[e]=i[e])})(t,i)};function h(t,i){function e(){this.constructor=t}a(t,i),t.prototype=null===i?Object.create(i):(e.prototype=i.prototype,new e)}var l=function(t){function i(){var i=t.call(this)||this;return i.tempDisplayObjectParent=null,i.transform=new r.Transform,i.alpha=1,i.visible=!0,i.renderable=!0,i.parent=null,i.worldAlpha=1,i._lastSortedIndex=0,i._zIndex=0,i.filterArea=null,i.filters=null,i._enabledFilters=null,i._bounds=new o,i._localBounds=null,i._boundsID=0,i._boundsRect=null,i._localBoundsRect=null,i._mask=null,i._destroyed=!1,i.isSprite=!1,i.isMask=!1,i}return h(i,t),i.mixin=function(t){for(var e=Object.keys(t),n=0;n<e.length;++n){var r=e[n];Object.defineProperty(i.prototype,r,Object.getOwnPropertyDescriptor(t,r))}},i.prototype._recursivePostUpdateTransform=function(){this.parent?(this.parent._recursivePostUpdateTransform(),this.transform.updateTransform(this.parent.transform)):this.transform.updateTransform(this._tempDisplayObjectParent.transform)},i.prototype.updateTransform=function(){this._boundsID++,this.transform.updateTransform(this.parent.transform),this.worldAlpha=this.alpha*this.parent.worldAlpha},i.prototype.getBounds=function(t,i){return t||(this.parent?(this._recursivePostUpdateTransform(),this.updateTransform()):(this.parent=this._tempDisplayObjectParent,this.updateTransform(),this.parent=null)),this._bounds.updateID!==this._boundsID&&(this.calculateBounds(),this._bounds.updateID=this._boundsID),i||(this._boundsRect||(this._boundsRect=new r.Rectangle),i=this._boundsRect),this._bounds.getRectangle(i)},i.prototype.getLocalBounds=function(t){t||(this._localBoundsRect||(this._localBoundsRect=new r.Rectangle),t=this._localBoundsRect),this._localBounds||(this._localBounds=new o);var i=this.transform,e=this.parent;this.parent=null,this.transform=this._tempDisplayObjectParent.transform;var n=this._bounds,s=this._boundsID;this._bounds=this._localBounds;var a=this.getBounds(!1,t);return this.parent=e,this.transform=i,this._bounds=n,this._bounds.updateID+=this._boundsID-s,a},i.prototype.toGlobal=function(t,i,e){return void 0===e&&(e=!1),e||(this._recursivePostUpdateTransform(),this.parent?this.displayObjectUpdateTransform():(this.parent=this._tempDisplayObjectParent,this.displayObjectUpdateTransform(),this.parent=null)),this.worldTransform.apply(t,i)},i.prototype.toLocal=function(t,i,e,n){return i&&(t=i.toGlobal(t,e,n)),n||(this._recursivePostUpdateTransform(),this.parent?this.displayObjectUpdateTransform():(this.parent=this._tempDisplayObjectParent,this.displayObjectUpdateTransform(),this.parent=null)),this.worldTransform.applyInverse(t,e)},i.prototype.setParent=function(t){if(!t||!t.addChild)throw new Error("setParent: Argument must be a Container");return t.addChild(this),t},i.prototype.setTransform=function(t,i,e,n,r,s,o,a,h){return void 0===t&&(t=0),void 0===i&&(i=0),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=0),void 0===s&&(s=0),void 0===o&&(o=0),void 0===a&&(a=0),void 0===h&&(h=0),this.position.x=t,this.position.y=i,this.scale.x=e||1,this.scale.y=n||1,this.rotation=r,this.skew.x=s,this.skew.y=o,this.pivot.x=a,this.pivot.y=h,this},i.prototype.destroy=function(t){this.parent&&this.parent.removeChild(this),this.removeAllListeners(),this.transform=null,this.parent=null,this._bounds=null,this._mask=null,this.filters=null,this.filterArea=null,this.hitArea=null,this.interactive=!1,this.interactiveChildren=!1,this._destroyed=!0},Object.defineProperty(i.prototype,"_tempDisplayObjectParent",{get:function(){return null===this.tempDisplayObjectParent&&(this.tempDisplayObjectParent=new d),this.tempDisplayObjectParent},enumerable:!1,configurable:!0}),i.prototype.enableTempParent=function(){var t=this.parent;return this.parent=this._tempDisplayObjectParent,t},i.prototype.disableTempParent=function(t){this.parent=t},Object.defineProperty(i.prototype,"x",{get:function(){return this.position.x},set:function(t){this.transform.position.x=t},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"y",{get:function(){return this.position.y},set:function(t){this.transform.position.y=t},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"worldTransform",{get:function(){return this.transform.worldTransform},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"localTransform",{get:function(){return this.transform.localTransform},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"position",{get:function(){return this.transform.position},set:function(t){this.transform.position.copyFrom(t)},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"scale",{get:function(){return this.transform.scale},set:function(t){this.transform.scale.copyFrom(t)},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"pivot",{get:function(){return this.transform.pivot},set:function(t){this.transform.pivot.copyFrom(t)},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"skew",{get:function(){return this.transform.skew},set:function(t){this.transform.skew.copyFrom(t)},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"rotation",{get:function(){return this.transform.rotation},set:function(t){this.transform.rotation=t},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"angle",{get:function(){return this.transform.rotation*r.RAD_TO_DEG},set:function(t){this.transform.rotation=t*r.DEG_TO_RAD},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"zIndex",{get:function(){return this._zIndex},set:function(t){this._zIndex=t,this.parent&&(this.parent.sortDirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"worldVisible",{get:function(){var t=this;do{if(!t.visible)return!1;t=t.parent}while(t);return!0},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"mask",{get:function(){return this._mask},set:function(t){var i;this._mask&&((i=this._mask.maskObject||this._mask).renderable=!0,i.isMask=!1);(this._mask=t,this._mask)&&((i=this._mask.maskObject||this._mask).renderable=!1,i.isMask=!0)},enumerable:!1,configurable:!0}),i}(s.EventEmitter),d=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.sortDirty=null,i}return h(i,t),i}(l);function p(t,i){return t.zIndex===i.zIndex?t._lastSortedIndex-i._lastSortedIndex:t.zIndex-i.zIndex}l.prototype.displayObjectUpdateTransform=l.prototype.updateTransform;var m=function(t){function i(){var i=t.call(this)||this;return i.children=[],i.sortableChildren=n.settings.SORTABLE_CHILDREN,i.sortDirty=!1,i}return h(i,t),i.prototype.onChildrenChange=function(t){},i.prototype.addChild=function(){for(var t=arguments,i=[],e=0;e<arguments.length;e++)i[e]=t[e];if(i.length>1)for(var n=0;n<i.length;n++)this.addChild(i[n]);else{var r=i[0];r.parent&&r.parent.removeChild(r),r.parent=this,this.sortDirty=!0,r.transform._parentID=-1,this.children.push(r),this._boundsID++,this.onChildrenChange(this.children.length-1),this.emit("childAdded",r,this,this.children.length-1),r.emit("added",this)}return i[0]},i.prototype.addChildAt=function(t,i){if(i<0||i>this.children.length)throw new Error(t+"addChildAt: The index "+i+" supplied is out of bounds "+this.children.length);return t.parent&&t.parent.removeChild(t),t.parent=this,this.sortDirty=!0,t.transform._parentID=-1,this.children.splice(i,0,t),this._boundsID++,this.onChildrenChange(i),t.emit("added",this),this.emit("childAdded",t,this,i),t},i.prototype.swapChildren=function(t,i){if(t!==i){var e=this.getChildIndex(t),n=this.getChildIndex(i);this.children[e]=i,this.children[n]=t,this.onChildrenChange(e<n?e:n)}},i.prototype.getChildIndex=function(t){var i=this.children.indexOf(t);if(-1===i)throw new Error("The supplied DisplayObject must be a child of the caller");return i},i.prototype.setChildIndex=function(t,i){if(i<0||i>=this.children.length)throw new Error("The index "+i+" supplied is out of bounds "+this.children.length);var e=this.getChildIndex(t);(0,s.removeItems)(this.children,e,1),this.children.splice(i,0,t),this.onChildrenChange(i)},i.prototype.getChildAt=function(t){if(t<0||t>=this.children.length)throw new Error("getChildAt: Index ("+t+") does not exist.");return this.children[t]},i.prototype.removeChild=function(){for(var t=arguments,i=[],e=0;e<arguments.length;e++)i[e]=t[e];if(i.length>1)for(var n=0;n<i.length;n++)this.removeChild(i[n]);else{var r=i[0],o=this.children.indexOf(r);if(-1===o)return null;r.parent=null,r.transform._parentID=-1,(0,s.removeItems)(this.children,o,1),this._boundsID++,this.onChildrenChange(o),r.emit("removed",this),this.emit("childRemoved",r,this,o)}return i[0]},i.prototype.removeChildAt=function(t){var i=this.getChildAt(t);return i.parent=null,i.transform._parentID=-1,(0,s.removeItems)(this.children,t,1),this._boundsID++,this.onChildrenChange(t),i.emit("removed",this),this.emit("childRemoved",i,this,t),i},i.prototype.removeChildren=function(t,i){void 0===t&&(t=0),void 0===i&&(i=this.children.length);var e,n=t,r=i-n;if(r>0&&r<=i){e=this.children.splice(n,r);for(var s=0;s<e.length;++s)e[s].parent=null,e[s].transform&&(e[s].transform._parentID=-1);this._boundsID++,this.onChildrenChange(t);for(s=0;s<e.length;++s)e[s].emit("removed",this),this.emit("childRemoved",e[s],this,s);return e}if(0===r&&0===this.children.length)return[];throw new RangeError("removeChildren: numeric values are outside the acceptable range.")},i.prototype.sortChildren=function(){for(var t=!1,i=0,e=this.children.length;i<e;++i){var n=this.children[i];n._lastSortedIndex=i,t||0===n.zIndex||(t=!0)}t&&this.children.length>1&&this.children.sort(p),this.sortDirty=!1},i.prototype.updateTransform=function(){this.sortableChildren&&this.sortDirty&&this.sortChildren(),this._boundsID++,this.transform.updateTransform(this.parent.transform),this.worldAlpha=this.alpha*this.parent.worldAlpha;for(var t=0,i=this.children.length;t<i;++t){var e=this.children[t];e.visible&&e.updateTransform()}},i.prototype.calculateBounds=function(){this._bounds.clear(),this._calculateBounds();for(var t=0;t<this.children.length;t++){var i=this.children[t];if(i.visible&&i.renderable)if(i.calculateBounds(),i._mask){var e=i._mask.maskObject||i._mask;e.calculateBounds(),this._bounds.addBoundsMask(i._bounds,e._bounds)}else i.filterArea?this._bounds.addBoundsArea(i._bounds,i.filterArea):this._bounds.addBounds(i._bounds)}this._bounds.updateID=this._boundsID},i.prototype.getLocalBounds=function(i,e){void 0===e&&(e=!1);var n=t.prototype.getLocalBounds.call(this,i);if(!e)for(var r=0,s=this.children.length;r<s;++r){var o=this.children[r];o.visible&&o.updateTransform()}return n},i.prototype._calculateBounds=function(){},i.prototype.render=function(t){if(this.visible&&!(this.worldAlpha<=0)&&this.renderable)if(this._mask||this.filters&&this.filters.length)this.renderAdvanced(t);else{this._render(t);for(var i=0,e=this.children.length;i<e;++i)this.children[i].render(t)}},i.prototype.renderAdvanced=function(t){t.batch.flush();var i=this.filters,e=this._mask;if(i){this._enabledFilters||(this._enabledFilters=[]),this._enabledFilters.length=0;for(var n=0;n<i.length;n++)i[n].enabled&&this._enabledFilters.push(i[n]);this._enabledFilters.length&&t.filter.push(this,this._enabledFilters)}e&&t.mask.push(this,this._mask),this._render(t);n=0;for(var r=this.children.length;n<r;n++)this.children[n].render(t);t.batch.flush(),e&&t.mask.pop(this),i&&this._enabledFilters&&this._enabledFilters.length&&t.filter.pop()},i.prototype._render=function(t){},i.prototype.destroy=function(i){t.prototype.destroy.call(this),this.sortDirty=!1;var e="boolean"==typeof i?i:i&&i.children,n=this.removeChildren(0,this.children.length);if(e)for(var r=0;r<n.length;++r)n[r].destroy(i)},Object.defineProperty(i.prototype,"width",{get:function(){return this.scale.x*this.getLocalBounds().width},set:function(t){var i=this.getLocalBounds().width;this.scale.x=0!==i?t/i:1,this._width=t},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"height",{get:function(){return this.scale.y*this.getLocalBounds().height},set:function(t){var i=this.getLocalBounds().height;this.scale.y=0!==i?t/i:1,this._height=t},enumerable:!1,configurable:!0}),i}(l);m.prototype.containerUpdateTransform=m.prototype.updateTransform}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aHQxMS8uL25vZGVfbW9kdWxlcy9AcGl4aS9kaXNwbGF5L2xpYi9kaXNwbGF5LmVzLmpzIl0sIm5hbWVzIjpbInNldHRpbmdzIiwiQm91bmRzIiwidGhpcyIsIm1pblgiLCJJbmZpbml0eSIsIm1pblkiLCJtYXhYIiwibWF4WSIsInJlY3QiLCJ1cGRhdGVJRCIsInByb3RvdHlwZSIsImlzRW1wdHkiLCJjbGVhciIsImdldFJlY3RhbmdsZSIsIlJlY3RhbmdsZSIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJhZGRQb2ludCIsInBvaW50IiwiTWF0aCIsIm1pbiIsIm1heCIsImFkZFF1YWQiLCJ2ZXJ0aWNlcyIsImFkZEZyYW1lIiwidHJhbnNmb3JtIiwieDAiLCJ5MCIsIngxIiwieTEiLCJhZGRGcmFtZU1hdHJpeCIsIndvcmxkVHJhbnNmb3JtIiwibWF0cml4IiwiYSIsImIiLCJjIiwiZCIsInR4IiwidHkiLCJhZGRWZXJ0ZXhEYXRhIiwidmVydGV4RGF0YSIsImJlZ2luT2Zmc2V0IiwiZW5kT2Zmc2V0IiwiaSIsImFkZFZlcnRpY2VzIiwiYWRkVmVydGljZXNNYXRyaXgiLCJwYWRYIiwicGFkWSIsInJhd1giLCJyYXdZIiwiYWRkQm91bmRzIiwiYm91bmRzIiwiYWRkQm91bmRzTWFzayIsIm1hc2siLCJfbWluWCIsIl9taW5ZIiwiX21heFgiLCJfbWF4WSIsImFkZEJvdW5kc01hdHJpeCIsImFkZEJvdW5kc0FyZWEiLCJhcmVhIiwicGFkIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsImFkZEZyYW1lUGFkIiwiZXh0ZW5kU3RhdGljcyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfX2V4dGVuZHMiLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiRGlzcGxheU9iamVjdCIsIl9zdXBlciIsIl90aGlzIiwiY2FsbCIsInRlbXBEaXNwbGF5T2JqZWN0UGFyZW50IiwiVHJhbnNmb3JtIiwiYWxwaGEiLCJ2aXNpYmxlIiwicmVuZGVyYWJsZSIsInBhcmVudCIsIndvcmxkQWxwaGEiLCJfbGFzdFNvcnRlZEluZGV4IiwiX3pJbmRleCIsImZpbHRlckFyZWEiLCJmaWx0ZXJzIiwiX2VuYWJsZWRGaWx0ZXJzIiwiX2JvdW5kcyIsIl9sb2NhbEJvdW5kcyIsIl9ib3VuZHNJRCIsIl9ib3VuZHNSZWN0IiwiX2xvY2FsQm91bmRzUmVjdCIsIl9tYXNrIiwiX2Rlc3Ryb3llZCIsImlzU3ByaXRlIiwiaXNNYXNrIiwibWl4aW4iLCJzb3VyY2UiLCJrZXlzIiwibGVuZ3RoIiwicHJvcGVydHlOYW1lIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSIsInVwZGF0ZVRyYW5zZm9ybSIsIl90ZW1wRGlzcGxheU9iamVjdFBhcmVudCIsImdldEJvdW5kcyIsInNraXBVcGRhdGUiLCJjYWxjdWxhdGVCb3VuZHMiLCJnZXRMb2NhbEJvdW5kcyIsInRyYW5zZm9ybVJlZiIsInBhcmVudFJlZiIsIndvcmxkQm91bmRzIiwid29ybGRCb3VuZHNJRCIsInRvR2xvYmFsIiwicG9zaXRpb24iLCJkaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtIiwiYXBwbHkiLCJ0b0xvY2FsIiwiZnJvbSIsImFwcGx5SW52ZXJzZSIsInNldFBhcmVudCIsImNvbnRhaW5lciIsImFkZENoaWxkIiwiRXJyb3IiLCJzZXRUcmFuc2Zvcm0iLCJzY2FsZVgiLCJzY2FsZVkiLCJyb3RhdGlvbiIsInNrZXdYIiwic2tld1kiLCJwaXZvdFgiLCJwaXZvdFkiLCJzY2FsZSIsInNrZXciLCJwaXZvdCIsImRlc3Ryb3kiLCJfb3B0aW9ucyIsInJlbW92ZUNoaWxkIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiaGl0QXJlYSIsImludGVyYWN0aXZlIiwiaW50ZXJhY3RpdmVDaGlsZHJlbiIsImdldCIsIlRlbXBvcmFyeURpc3BsYXlPYmplY3QiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZW5hYmxlVGVtcFBhcmVudCIsIm15UGFyZW50IiwiZGlzYWJsZVRlbXBQYXJlbnQiLCJjYWNoZVBhcmVudCIsInNldCIsInZhbHVlIiwibG9jYWxUcmFuc2Zvcm0iLCJjb3B5RnJvbSIsIlJBRF9UT19ERUciLCJERUdfVE9fUkFEIiwic29ydERpcnR5IiwiaXRlbSIsIm1hc2tPYmplY3QiLCJFdmVudEVtaXR0ZXIiLCJhcmd1bWVudHMiLCJzb3J0Q2hpbGRyZW4iLCJ6SW5kZXgiLCJDb250YWluZXIiLCJjaGlsZHJlbiIsInNvcnRhYmxlQ2hpbGRyZW4iLCJvbkNoaWxkcmVuQ2hhbmdlIiwiX2xlbmd0aCIsImFyZ3VtZW50cyQxIiwiX2kiLCJjaGlsZCIsIl9wYXJlbnRJRCIsInB1c2giLCJlbWl0IiwiYWRkQ2hpbGRBdCIsImluZGV4Iiwic3BsaWNlIiwic3dhcENoaWxkcmVuIiwiY2hpbGQyIiwiaW5kZXgxIiwiZ2V0Q2hpbGRJbmRleCIsImluZGV4MiIsImluZGV4T2YiLCJzZXRDaGlsZEluZGV4IiwiY3VycmVudEluZGV4IiwicmVtb3ZlSXRlbXMiLCJnZXRDaGlsZEF0IiwicmVtb3ZlQ2hpbGRBdCIsInJlbW92ZUNoaWxkcmVuIiwiYmVnaW5JbmRleCIsImVuZEluZGV4IiwicmVtb3ZlZCIsImJlZ2luIiwicmFuZ2UiLCJSYW5nZUVycm9yIiwic29ydFJlcXVpcmVkIiwiaiIsInNvcnQiLCJfY2FsY3VsYXRlQm91bmRzIiwic2tpcENoaWxkcmVuVXBkYXRlIiwicmVzdWx0IiwicmVuZGVyIiwicmVuZGVyZXIiLCJyZW5kZXJBZHZhbmNlZCIsIl9yZW5kZXIiLCJiYXRjaCIsImZsdXNoIiwiZW5hYmxlZCIsImZpbHRlciIsInBvcCIsIl9yZW5kZXJlciIsIm9wdGlvbnMiLCJkZXN0cm95Q2hpbGRyZW4iLCJvbGRDaGlsZHJlbiIsIl93aWR0aCIsIl9oZWlnaHQiLCJjb250YWluZXJVcGRhdGVUcmFuc2Zvcm0iXSwibWFwcGluZ3Mi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RUFHUixFQUVuQmYsS0FBSzROLE9BQVMvRCxHQUVsQlAsWUFBWSxFQUNaQyxjQUFjLElBRWxCckYsT0FBT3dDLGVBQWUrRCxFQUFVakssVUFBVyxTQUFVLENBTWpENEksSUFBSyxXQUNELE9BQU9wSixLQUFLMEksTUFBTTVILEVBQUlkLEtBQUtrSCxpQkFBaUJsRyxRQUVoRDRJLElBQUssU0FBVUMsR0FDWCxJQUFJN0ksRUFBU2hCLEtBQUtrSCxpQkFBaUJsRyxPQUUvQmhCLEtBQUswSSxNQUFNNUgsRUFEQSxJQUFYRSxFQUNlNkksRUFBUTdJLEVBR1IsRUFFbkJoQixLQUFLNk4sUUFBVWhFLEdBRW5CUCxZQUFZLEVBQ1pDLGNBQWMsSUFFWGtCLEVBamdCbUIsQ0FrZ0I1QjdGLEdBUUY2RixFQUFVakssVUFBVXNOLHlCQUEyQnJELEVBQVVqSyxVQUFVcUciLCJmaWxlIjoiOTBmZjFlZDY2ZWQ5MDEzZmYzZjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBwaXhpL2Rpc3BsYXkgLSB2NS4zLjdcbiAqIENvbXBpbGVkIFR1ZSwgMjkgRGVjIDIwMjAgMTk6MzA6MTEgVVRDXG4gKlxuICogQHBpeGkvZGlzcGxheSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbmltcG9ydCB7IHNldHRpbmdzIH0gZnJvbSAnQHBpeGkvc2V0dGluZ3MnO1xuaW1wb3J0IHsgUmVjdGFuZ2xlLCBUcmFuc2Zvcm0sIFJBRF9UT19ERUcsIERFR19UT19SQUQgfSBmcm9tICdAcGl4aS9tYXRoJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgcmVtb3ZlSXRlbXMgfSBmcm9tICdAcGl4aS91dGlscyc7XG5cbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGNvbnRhaW5lciBwcm9wZXJ0eSAnc29ydGFibGVDaGlsZHJlbicuXG4gKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIGNvbnRhaW5lciB3aWxsIHNvcnQgaXRzIGNoaWxkcmVuIGJ5IHpJbmRleCB2YWx1ZVxuICogd2hlbiB1cGRhdGVUcmFuc2Zvcm0oKSBpcyBjYWxsZWQsIG9yIG1hbnVhbGx5IGlmIHNvcnRDaGlsZHJlbigpIGlzIGNhbGxlZC5cbiAqXG4gKiBUaGlzIGFjdHVhbGx5IGNoYW5nZXMgdGhlIG9yZGVyIG9mIGVsZW1lbnRzIGluIHRoZSBhcnJheSwgc28gc2hvdWxkIGJlIHRyZWF0ZWRcbiAqIGFzIGEgYmFzaWMgc29sdXRpb24gdGhhdCBpcyBub3QgcGVyZm9ybWFudCBjb21wYXJlZCB0byBvdGhlciBzb2x1dGlvbnMsXG4gKiBzdWNoIGFzIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS1kaXNwbGF5XG4gKlxuICogQWxzbyBiZSBhd2FyZSBvZiB0aGF0IHRoaXMgbWF5IG5vdCB3b3JrIG5pY2VseSB3aXRoIHRoZSBhZGRDaGlsZEF0KCkgZnVuY3Rpb24sXG4gKiBhcyB0aGUgekluZGV4IHNvcnRpbmcgbWF5IGNhdXNlIHRoZSBjaGlsZCB0byBhdXRvbWF0aWNhbGx5IHNvcnRlZCB0byBhbm90aGVyIHBvc2l0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBjb25zdGFudFxuICogQG5hbWUgU09SVEFCTEVfQ0hJTERSRU5cbiAqIEBtZW1iZXJvZiBQSVhJLnNldHRpbmdzXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0IGZhbHNlXG4gKi9cbnNldHRpbmdzLlNPUlRBQkxFX0NISUxEUkVOID0gZmFsc2U7XG5cbi8qKlxuICogJ0J1aWxkZXInIHBhdHRlcm4gZm9yIGJvdW5kcyByZWN0YW5nbGVzLlxuICpcbiAqIFRoaXMgY291bGQgYmUgY2FsbGVkIGFuIEF4aXMtQWxpZ25lZCBCb3VuZGluZyBCb3guXG4gKiBJdCBpcyBub3QgYW4gYWN0dWFsIHNoYXBlLiBJdCBpcyBhIG11dGFibGUgdGhpbmc7IG5vICdFTVBUWScgb3IgdGhvc2Uga2luZCBvZiBwcm9ibGVtcy5cbiAqXG4gKiBAY2xhc3NcbiAqIEBtZW1iZXJvZiBQSVhJXG4gKi9cbnZhciBCb3VuZHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQm91bmRzKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1pblggPSBJbmZpbml0eTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5taW5ZID0gSW5maW5pdHk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWF4WCA9IC1JbmZpbml0eTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXhZID0gLUluZmluaXR5O1xuICAgICAgICB0aGlzLnJlY3QgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSXQgaXMgdXBkYXRlZCB0byBfYm91bmRzSUQgb2YgY29ycmVzcG9uZGluZyBvYmplY3QgdG8ga2VlcCBib3VuZHMgaW4gc3luYyB3aXRoIGNvbnRlbnQuXG4gICAgICAgICAqIFVwZGF0ZWQgZnJvbSBvdXRzaWRlLCB0aHVzIHB1YmxpYyBtb2RpZmllci5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZUlEID0gLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBib3VuZHMgYXJlIGVtcHR5LlxuICAgICAqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBlbXB0eS5cbiAgICAgKi9cbiAgICBCb3VuZHMucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pblggPiB0aGlzLm1heFggfHwgdGhpcy5taW5ZID4gdGhpcy5tYXhZO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBib3VuZHMgYW5kIHJlc2V0cy5cbiAgICAgKlxuICAgICAqL1xuICAgIEJvdW5kcy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubWluWCA9IEluZmluaXR5O1xuICAgICAgICB0aGlzLm1pblkgPSBJbmZpbml0eTtcbiAgICAgICAgdGhpcy5tYXhYID0gLUluZmluaXR5O1xuICAgICAgICB0aGlzLm1heFkgPSAtSW5maW5pdHk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYW4gcmV0dXJuIFJlY3RhbmdsZS5FTVBUWSBjb25zdGFudCwgZWl0aGVyIGNvbnN0cnVjdCBuZXcgcmVjdGFuZ2xlLCBlaXRoZXIgdXNlIHlvdXIgcmVjdGFuZ2xlXG4gICAgICogSXQgaXMgbm90IGd1YXJhbnRlZWQgdGhhdCBpdCB3aWxsIHJldHVybiB0ZW1wUmVjdFxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gcmVjdCAtIHRlbXBvcmFyeSBvYmplY3Qgd2lsbCBiZSB1c2VkIGlmIEFBQkIgaXMgbm90IGVtcHR5XG4gICAgICogQHJldHVybnMge1BJWEkuUmVjdGFuZ2xlfSBBIHJlY3RhbmdsZSBvZiB0aGUgYm91bmRzXG4gICAgICovXG4gICAgQm91bmRzLnByb3RvdHlwZS5nZXRSZWN0YW5nbGUgPSBmdW5jdGlvbiAocmVjdCkge1xuICAgICAgICBpZiAodGhpcy5taW5YID4gdGhpcy5tYXhYIHx8IHRoaXMubWluWSA+IHRoaXMubWF4WSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlY3RhbmdsZS5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICByZWN0ID0gcmVjdCB8fCBuZXcgUmVjdGFuZ2xlKDAsIDAsIDEsIDEpO1xuICAgICAgICByZWN0LnggPSB0aGlzLm1pblg7XG4gICAgICAgIHJlY3QueSA9IHRoaXMubWluWTtcbiAgICAgICAgcmVjdC53aWR0aCA9IHRoaXMubWF4WCAtIHRoaXMubWluWDtcbiAgICAgICAgcmVjdC5oZWlnaHQgPSB0aGlzLm1heFkgLSB0aGlzLm1pblk7XG4gICAgICAgIHJldHVybiByZWN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgaW5saW5lZCB3aGVuIGl0cyBwb3NzaWJsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5JUG9pbnREYXRhfSBwb2ludCAtIFRoZSBwb2ludCB0byBhZGQuXG4gICAgICovXG4gICAgQm91bmRzLnByb3RvdHlwZS5hZGRQb2ludCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICB0aGlzLm1pblggPSBNYXRoLm1pbih0aGlzLm1pblgsIHBvaW50LngpO1xuICAgICAgICB0aGlzLm1heFggPSBNYXRoLm1heCh0aGlzLm1heFgsIHBvaW50LngpO1xuICAgICAgICB0aGlzLm1pblkgPSBNYXRoLm1pbih0aGlzLm1pblksIHBvaW50LnkpO1xuICAgICAgICB0aGlzLm1heFkgPSBNYXRoLm1heCh0aGlzLm1heFksIHBvaW50LnkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHF1YWQsIG5vdCB0cmFuc2Zvcm1lZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IHZlcnRpY2VzIC0gVGhlIHZlcnRzIHRvIGFkZC5cbiAgICAgKi9cbiAgICBCb3VuZHMucHJvdG90eXBlLmFkZFF1YWQgPSBmdW5jdGlvbiAodmVydGljZXMpIHtcbiAgICAgICAgdmFyIG1pblggPSB0aGlzLm1pblg7XG4gICAgICAgIHZhciBtaW5ZID0gdGhpcy5taW5ZO1xuICAgICAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICAgICAgdmFyIG1heFkgPSB0aGlzLm1heFk7XG4gICAgICAgIHZhciB4ID0gdmVydGljZXNbMF07XG4gICAgICAgIHZhciB5ID0gdmVydGljZXNbMV07XG4gICAgICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgICAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICAgICAgbWF4WCA9IHggPiBtYXhYID8geCA6IG1heFg7XG4gICAgICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuICAgICAgICB4ID0gdmVydGljZXNbMl07XG4gICAgICAgIHkgPSB2ZXJ0aWNlc1szXTtcbiAgICAgICAgbWluWCA9IHggPCBtaW5YID8geCA6IG1pblg7XG4gICAgICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgICAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICAgICAgbWF4WSA9IHkgPiBtYXhZID8geSA6IG1heFk7XG4gICAgICAgIHggPSB2ZXJ0aWNlc1s0XTtcbiAgICAgICAgeSA9IHZlcnRpY2VzWzVdO1xuICAgICAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICAgICAgbWluWSA9IHkgPCBtaW5ZID8geSA6IG1pblk7XG4gICAgICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgICAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcbiAgICAgICAgeCA9IHZlcnRpY2VzWzZdO1xuICAgICAgICB5ID0gdmVydGljZXNbN107XG4gICAgICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgICAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICAgICAgbWF4WCA9IHggPiBtYXhYID8geCA6IG1heFg7XG4gICAgICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuICAgICAgICB0aGlzLm1pblggPSBtaW5YO1xuICAgICAgICB0aGlzLm1pblkgPSBtaW5ZO1xuICAgICAgICB0aGlzLm1heFggPSBtYXhYO1xuICAgICAgICB0aGlzLm1heFkgPSBtYXhZO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBzcHJpdGUgZnJhbWUsIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlRyYW5zZm9ybX0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtIHRvIGFwcGx5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHgwIC0gbGVmdCBYIG9mIGZyYW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkwIC0gdG9wIFkgb2YgZnJhbWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geDEgLSByaWdodCBYIG9mIGZyYW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkxIC0gYm90dG9tIFkgb2YgZnJhbWVcbiAgICAgKi9cbiAgICBCb3VuZHMucHJvdG90eXBlLmFkZEZyYW1lID0gZnVuY3Rpb24gKHRyYW5zZm9ybSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgICAgdGhpcy5hZGRGcmFtZU1hdHJpeCh0cmFuc2Zvcm0ud29ybGRUcmFuc2Zvcm0sIHgwLCB5MCwgeDEsIHkxKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgc3ByaXRlIGZyYW1lLCBtdWx0aXBsaWVkIGJ5IG1hdHJpeFxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gbWF0cml4IHRvIGFwcGx5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHgwIC0gbGVmdCBYIG9mIGZyYW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkwIC0gdG9wIFkgb2YgZnJhbWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geDEgLSByaWdodCBYIG9mIGZyYW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkxIC0gYm90dG9tIFkgb2YgZnJhbWVcbiAgICAgKi9cbiAgICBCb3VuZHMucHJvdG90eXBlLmFkZEZyYW1lTWF0cml4ID0gZnVuY3Rpb24gKG1hdHJpeCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgICAgdmFyIGEgPSBtYXRyaXguYTtcbiAgICAgICAgdmFyIGIgPSBtYXRyaXguYjtcbiAgICAgICAgdmFyIGMgPSBtYXRyaXguYztcbiAgICAgICAgdmFyIGQgPSBtYXRyaXguZDtcbiAgICAgICAgdmFyIHR4ID0gbWF0cml4LnR4O1xuICAgICAgICB2YXIgdHkgPSBtYXRyaXgudHk7XG4gICAgICAgIHZhciBtaW5YID0gdGhpcy5taW5YO1xuICAgICAgICB2YXIgbWluWSA9IHRoaXMubWluWTtcbiAgICAgICAgdmFyIG1heFggPSB0aGlzLm1heFg7XG4gICAgICAgIHZhciBtYXhZID0gdGhpcy5tYXhZO1xuICAgICAgICB2YXIgeCA9IChhICogeDApICsgKGMgKiB5MCkgKyB0eDtcbiAgICAgICAgdmFyIHkgPSAoYiAqIHgwKSArIChkICogeTApICsgdHk7XG4gICAgICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgICAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICAgICAgbWF4WCA9IHggPiBtYXhYID8geCA6IG1heFg7XG4gICAgICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuICAgICAgICB4ID0gKGEgKiB4MSkgKyAoYyAqIHkwKSArIHR4O1xuICAgICAgICB5ID0gKGIgKiB4MSkgKyAoZCAqIHkwKSArIHR5O1xuICAgICAgICBtaW5YID0geCA8IG1pblggPyB4IDogbWluWDtcbiAgICAgICAgbWluWSA9IHkgPCBtaW5ZID8geSA6IG1pblk7XG4gICAgICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgICAgICBtYXhZID0geSA+IG1heFkgPyB5IDogbWF4WTtcbiAgICAgICAgeCA9IChhICogeDApICsgKGMgKiB5MSkgKyB0eDtcbiAgICAgICAgeSA9IChiICogeDApICsgKGQgKiB5MSkgKyB0eTtcbiAgICAgICAgbWluWCA9IHggPCBtaW5YID8geCA6IG1pblg7XG4gICAgICAgIG1pblkgPSB5IDwgbWluWSA/IHkgOiBtaW5ZO1xuICAgICAgICBtYXhYID0geCA+IG1heFggPyB4IDogbWF4WDtcbiAgICAgICAgbWF4WSA9IHkgPiBtYXhZID8geSA6IG1heFk7XG4gICAgICAgIHggPSAoYSAqIHgxKSArIChjICogeTEpICsgdHg7XG4gICAgICAgIHkgPSAoYiAqIHgxKSArIChkICogeTEpICsgdHk7XG4gICAgICAgIG1pblggPSB4IDwgbWluWCA/IHggOiBtaW5YO1xuICAgICAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICAgICAgbWF4WCA9IHggPiBtYXhYID8geCA6IG1heFg7XG4gICAgICAgIG1heFkgPSB5ID4gbWF4WSA/IHkgOiBtYXhZO1xuICAgICAgICB0aGlzLm1pblggPSBtaW5YO1xuICAgICAgICB0aGlzLm1pblkgPSBtaW5ZO1xuICAgICAgICB0aGlzLm1heFggPSBtYXhYO1xuICAgICAgICB0aGlzLm1heFkgPSBtYXhZO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBzY3JlZW4gdmVydGljZXMgZnJvbSBhcnJheVxuICAgICAqXG4gICAgICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IHZlcnRleERhdGEgLSBjYWxjdWxhdGVkIHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luT2Zmc2V0IC0gYmVnaW4gb2Zmc2V0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZE9mZnNldCAtIGVuZCBvZmZzZXQsIGV4Y2x1ZGVkXG4gICAgICovXG4gICAgQm91bmRzLnByb3RvdHlwZS5hZGRWZXJ0ZXhEYXRhID0gZnVuY3Rpb24gKHZlcnRleERhdGEsIGJlZ2luT2Zmc2V0LCBlbmRPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pblggPSB0aGlzLm1pblg7XG4gICAgICAgIHZhciBtaW5ZID0gdGhpcy5taW5ZO1xuICAgICAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICAgICAgdmFyIG1heFkgPSB0aGlzLm1heFk7XG4gICAgICAgIGZvciAodmFyIGkgPSBiZWdpbk9mZnNldDsgaSA8IGVuZE9mZnNldDsgaSArPSAyKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHZlcnRleERhdGFbaV07XG4gICAgICAgICAgICB2YXIgeSA9IHZlcnRleERhdGFbaSArIDFdO1xuICAgICAgICAgICAgbWluWCA9IHggPCBtaW5YID8geCA6IG1pblg7XG4gICAgICAgICAgICBtaW5ZID0geSA8IG1pblkgPyB5IDogbWluWTtcbiAgICAgICAgICAgIG1heFggPSB4ID4gbWF4WCA/IHggOiBtYXhYO1xuICAgICAgICAgICAgbWF4WSA9IHkgPiBtYXhZID8geSA6IG1heFk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW5YID0gbWluWDtcbiAgICAgICAgdGhpcy5taW5ZID0gbWluWTtcbiAgICAgICAgdGhpcy5tYXhYID0gbWF4WDtcbiAgICAgICAgdGhpcy5tYXhZID0gbWF4WTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBhbiBhcnJheSBvZiBtZXNoIHZlcnRpY2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuVHJhbnNmb3JtfSB0cmFuc2Zvcm0gLSBtZXNoIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSB2ZXJ0aWNlcyAtIG1lc2ggY29vcmRpbmF0ZXMgaW4gYXJyYXlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmVnaW5PZmZzZXQgLSBiZWdpbiBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kT2Zmc2V0IC0gZW5kIG9mZnNldCwgZXhjbHVkZWRcbiAgICAgKi9cbiAgICBCb3VuZHMucHJvdG90eXBlLmFkZFZlcnRpY2VzID0gZnVuY3Rpb24gKHRyYW5zZm9ybSwgdmVydGljZXMsIGJlZ2luT2Zmc2V0LCBlbmRPZmZzZXQpIHtcbiAgICAgICAgdGhpcy5hZGRWZXJ0aWNlc01hdHJpeCh0cmFuc2Zvcm0ud29ybGRUcmFuc2Zvcm0sIHZlcnRpY2VzLCBiZWdpbk9mZnNldCwgZW5kT2Zmc2V0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZCBhbiBhcnJheSBvZiBtZXNoIHZlcnRpY2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLk1hdHJpeH0gbWF0cml4IC0gbWVzaCBtYXRyaXhcbiAgICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gdmVydGljZXMgLSBtZXNoIGNvb3JkaW5hdGVzIGluIGFycmF5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luT2Zmc2V0IC0gYmVnaW4gb2Zmc2V0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZE9mZnNldCAtIGVuZCBvZmZzZXQsIGV4Y2x1ZGVkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwYWRYPTBdIC0geCBwYWRkaW5nXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwYWRZPTBdIC0geSBwYWRkaW5nXG4gICAgICovXG4gICAgQm91bmRzLnByb3RvdHlwZS5hZGRWZXJ0aWNlc01hdHJpeCA9IGZ1bmN0aW9uIChtYXRyaXgsIHZlcnRpY2VzLCBiZWdpbk9mZnNldCwgZW5kT2Zmc2V0LCBwYWRYLCBwYWRZKSB7XG4gICAgICAgIGlmIChwYWRYID09PSB2b2lkIDApIHsgcGFkWCA9IDA7IH1cbiAgICAgICAgaWYgKHBhZFkgPT09IHZvaWQgMCkgeyBwYWRZID0gcGFkWDsgfVxuICAgICAgICB2YXIgYSA9IG1hdHJpeC5hO1xuICAgICAgICB2YXIgYiA9IG1hdHJpeC5iO1xuICAgICAgICB2YXIgYyA9IG1hdHJpeC5jO1xuICAgICAgICB2YXIgZCA9IG1hdHJpeC5kO1xuICAgICAgICB2YXIgdHggPSBtYXRyaXgudHg7XG4gICAgICAgIHZhciB0eSA9IG1hdHJpeC50eTtcbiAgICAgICAgdmFyIG1pblggPSB0aGlzLm1pblg7XG4gICAgICAgIHZhciBtaW5ZID0gdGhpcy5taW5ZO1xuICAgICAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICAgICAgdmFyIG1heFkgPSB0aGlzLm1heFk7XG4gICAgICAgIGZvciAodmFyIGkgPSBiZWdpbk9mZnNldDsgaSA8IGVuZE9mZnNldDsgaSArPSAyKSB7XG4gICAgICAgICAgICB2YXIgcmF3WCA9IHZlcnRpY2VzW2ldO1xuICAgICAgICAgICAgdmFyIHJhd1kgPSB2ZXJ0aWNlc1tpICsgMV07XG4gICAgICAgICAgICB2YXIgeCA9IChhICogcmF3WCkgKyAoYyAqIHJhd1kpICsgdHg7XG4gICAgICAgICAgICB2YXIgeSA9IChkICogcmF3WSkgKyAoYiAqIHJhd1gpICsgdHk7XG4gICAgICAgICAgICBtaW5YID0gTWF0aC5taW4obWluWCwgeCAtIHBhZFgpO1xuICAgICAgICAgICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIHggKyBwYWRYKTtcbiAgICAgICAgICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCB5IC0gcGFkWSk7XG4gICAgICAgICAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgeSArIHBhZFkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWluWCA9IG1pblg7XG4gICAgICAgIHRoaXMubWluWSA9IG1pblk7XG4gICAgICAgIHRoaXMubWF4WCA9IG1heFg7XG4gICAgICAgIHRoaXMubWF4WSA9IG1heFk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIG90aGVyIEJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5Cb3VuZHN9IGJvdW5kcyAtIFRoZSBCb3VuZHMgdG8gYmUgYWRkZWRcbiAgICAgKi9cbiAgICBCb3VuZHMucHJvdG90eXBlLmFkZEJvdW5kcyA9IGZ1bmN0aW9uIChib3VuZHMpIHtcbiAgICAgICAgdmFyIG1pblggPSB0aGlzLm1pblg7XG4gICAgICAgIHZhciBtaW5ZID0gdGhpcy5taW5ZO1xuICAgICAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICAgICAgdmFyIG1heFkgPSB0aGlzLm1heFk7XG4gICAgICAgIHRoaXMubWluWCA9IGJvdW5kcy5taW5YIDwgbWluWCA/IGJvdW5kcy5taW5YIDogbWluWDtcbiAgICAgICAgdGhpcy5taW5ZID0gYm91bmRzLm1pblkgPCBtaW5ZID8gYm91bmRzLm1pblkgOiBtaW5ZO1xuICAgICAgICB0aGlzLm1heFggPSBib3VuZHMubWF4WCA+IG1heFggPyBib3VuZHMubWF4WCA6IG1heFg7XG4gICAgICAgIHRoaXMubWF4WSA9IGJvdW5kcy5tYXhZID4gbWF4WSA/IGJvdW5kcy5tYXhZIDogbWF4WTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgb3RoZXIgQm91bmRzLCBtYXNrZWQgd2l0aCBCb3VuZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuQm91bmRzfSBib3VuZHMgLSBUaGUgQm91bmRzIHRvIGJlIGFkZGVkLlxuICAgICAqIEBwYXJhbSB7UElYSS5Cb3VuZHN9IG1hc2sgLSBUT0RPXG4gICAgICovXG4gICAgQm91bmRzLnByb3RvdHlwZS5hZGRCb3VuZHNNYXNrID0gZnVuY3Rpb24gKGJvdW5kcywgbWFzaykge1xuICAgICAgICB2YXIgX21pblggPSBib3VuZHMubWluWCA+IG1hc2subWluWCA/IGJvdW5kcy5taW5YIDogbWFzay5taW5YO1xuICAgICAgICB2YXIgX21pblkgPSBib3VuZHMubWluWSA+IG1hc2subWluWSA/IGJvdW5kcy5taW5ZIDogbWFzay5taW5ZO1xuICAgICAgICB2YXIgX21heFggPSBib3VuZHMubWF4WCA8IG1hc2subWF4WCA/IGJvdW5kcy5tYXhYIDogbWFzay5tYXhYO1xuICAgICAgICB2YXIgX21heFkgPSBib3VuZHMubWF4WSA8IG1hc2subWF4WSA/IGJvdW5kcy5tYXhZIDogbWFzay5tYXhZO1xuICAgICAgICBpZiAoX21pblggPD0gX21heFggJiYgX21pblkgPD0gX21heFkpIHtcbiAgICAgICAgICAgIHZhciBtaW5YID0gdGhpcy5taW5YO1xuICAgICAgICAgICAgdmFyIG1pblkgPSB0aGlzLm1pblk7XG4gICAgICAgICAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICAgICAgICAgIHZhciBtYXhZID0gdGhpcy5tYXhZO1xuICAgICAgICAgICAgdGhpcy5taW5YID0gX21pblggPCBtaW5YID8gX21pblggOiBtaW5YO1xuICAgICAgICAgICAgdGhpcy5taW5ZID0gX21pblkgPCBtaW5ZID8gX21pblkgOiBtaW5ZO1xuICAgICAgICAgICAgdGhpcy5tYXhYID0gX21heFggPiBtYXhYID8gX21heFggOiBtYXhYO1xuICAgICAgICAgICAgdGhpcy5tYXhZID0gX21heFkgPiBtYXhZID8gX21heFkgOiBtYXhZO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIG90aGVyIEJvdW5kcywgbXVsdGlwbGllZCBieSBtYXRyaXguIEJvdW5kcyBzaG91bGRuJ3QgYmUgZW1wdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuQm91bmRzfSBib3VuZHMgLSBvdGhlciBib3VuZHNcbiAgICAgKiBAcGFyYW0ge1BJWEkuTWF0cml4fSBtYXRyaXggLSBtdWx0aXBsaWNhdG9yXG4gICAgICovXG4gICAgQm91bmRzLnByb3RvdHlwZS5hZGRCb3VuZHNNYXRyaXggPSBmdW5jdGlvbiAoYm91bmRzLCBtYXRyaXgpIHtcbiAgICAgICAgdGhpcy5hZGRGcmFtZU1hdHJpeChtYXRyaXgsIGJvdW5kcy5taW5YLCBib3VuZHMubWluWSwgYm91bmRzLm1heFgsIGJvdW5kcy5tYXhZKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgb3RoZXIgQm91bmRzLCBtYXNrZWQgd2l0aCBSZWN0YW5nbGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuQm91bmRzfSBib3VuZHMgLSBUT0RPXG4gICAgICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gYXJlYSAtIFRPRE9cbiAgICAgKi9cbiAgICBCb3VuZHMucHJvdG90eXBlLmFkZEJvdW5kc0FyZWEgPSBmdW5jdGlvbiAoYm91bmRzLCBhcmVhKSB7XG4gICAgICAgIHZhciBfbWluWCA9IGJvdW5kcy5taW5YID4gYXJlYS54ID8gYm91bmRzLm1pblggOiBhcmVhLng7XG4gICAgICAgIHZhciBfbWluWSA9IGJvdW5kcy5taW5ZID4gYXJlYS55ID8gYm91bmRzLm1pblkgOiBhcmVhLnk7XG4gICAgICAgIHZhciBfbWF4WCA9IGJvdW5kcy5tYXhYIDwgYXJlYS54ICsgYXJlYS53aWR0aCA/IGJvdW5kcy5tYXhYIDogKGFyZWEueCArIGFyZWEud2lkdGgpO1xuICAgICAgICB2YXIgX21heFkgPSBib3VuZHMubWF4WSA8IGFyZWEueSArIGFyZWEuaGVpZ2h0ID8gYm91bmRzLm1heFkgOiAoYXJlYS55ICsgYXJlYS5oZWlnaHQpO1xuICAgICAgICBpZiAoX21pblggPD0gX21heFggJiYgX21pblkgPD0gX21heFkpIHtcbiAgICAgICAgICAgIHZhciBtaW5YID0gdGhpcy5taW5YO1xuICAgICAgICAgICAgdmFyIG1pblkgPSB0aGlzLm1pblk7XG4gICAgICAgICAgICB2YXIgbWF4WCA9IHRoaXMubWF4WDtcbiAgICAgICAgICAgIHZhciBtYXhZID0gdGhpcy5tYXhZO1xuICAgICAgICAgICAgdGhpcy5taW5YID0gX21pblggPCBtaW5YID8gX21pblggOiBtaW5YO1xuICAgICAgICAgICAgdGhpcy5taW5ZID0gX21pblkgPCBtaW5ZID8gX21pblkgOiBtaW5ZO1xuICAgICAgICAgICAgdGhpcy5tYXhYID0gX21heFggPiBtYXhYID8gX21heFggOiBtYXhYO1xuICAgICAgICAgICAgdGhpcy5tYXhZID0gX21heFkgPiBtYXhZID8gX21heFkgOiBtYXhZO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQYWRzIGJvdW5kcyBvYmplY3QsIG1ha2luZyBpdCBncm93IGluIGFsbCBkaXJlY3Rpb25zLlxuICAgICAqIElmIHBhZGRpbmdZIGlzIG9taXR0ZWQsIGJvdGggcGFkZGluZ1ggYW5kIHBhZGRpbmdZIHdpbGwgYmUgc2V0IHRvIHBhZGRpbmdYLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwYWRkaW5nWD0wXSAtIFRoZSBob3Jpem9udGFsIHBhZGRpbmcgYW1vdW50LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGFkZGluZ1k9MF0gLSBUaGUgdmVydGljYWwgcGFkZGluZyBhbW91bnQuXG4gICAgICovXG4gICAgQm91bmRzLnByb3RvdHlwZS5wYWQgPSBmdW5jdGlvbiAocGFkZGluZ1gsIHBhZGRpbmdZKSB7XG4gICAgICAgIGlmIChwYWRkaW5nWCA9PT0gdm9pZCAwKSB7IHBhZGRpbmdYID0gMDsgfVxuICAgICAgICBpZiAocGFkZGluZ1kgPT09IHZvaWQgMCkgeyBwYWRkaW5nWSA9IHBhZGRpbmdYOyB9XG4gICAgICAgIGlmICghdGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHRoaXMubWluWCAtPSBwYWRkaW5nWDtcbiAgICAgICAgICAgIHRoaXMubWF4WCArPSBwYWRkaW5nWDtcbiAgICAgICAgICAgIHRoaXMubWluWSAtPSBwYWRkaW5nWTtcbiAgICAgICAgICAgIHRoaXMubWF4WSArPSBwYWRkaW5nWTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBwYWRkZWQgZnJhbWUuICh4MCwgeTApIHNob3VsZCBiZSBzdHJpY3RseSBsZXNzIHRoYW4gKHgxLCB5MSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4MCAtIGxlZnQgWCBvZiBmcmFtZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5MCAtIHRvcCBZIG9mIGZyYW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHgxIC0gcmlnaHQgWCBvZiBmcmFtZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5MSAtIGJvdHRvbSBZIG9mIGZyYW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhZFggLSBwYWRkaW5nIFhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFkWSAtIHBhZGRpbmcgWVxuICAgICAqL1xuICAgIEJvdW5kcy5wcm90b3R5cGUuYWRkRnJhbWVQYWQgPSBmdW5jdGlvbiAoeDAsIHkwLCB4MSwgeTEsIHBhZFgsIHBhZFkpIHtcbiAgICAgICAgeDAgLT0gcGFkWDtcbiAgICAgICAgeTAgLT0gcGFkWTtcbiAgICAgICAgeDEgKz0gcGFkWDtcbiAgICAgICAgeTEgKz0gcGFkWTtcbiAgICAgICAgdGhpcy5taW5YID0gdGhpcy5taW5YIDwgeDAgPyB0aGlzLm1pblggOiB4MDtcbiAgICAgICAgdGhpcy5tYXhYID0gdGhpcy5tYXhYID4geDEgPyB0aGlzLm1heFggOiB4MTtcbiAgICAgICAgdGhpcy5taW5ZID0gdGhpcy5taW5ZIDwgeTAgPyB0aGlzLm1pblkgOiB5MDtcbiAgICAgICAgdGhpcy5tYXhZID0gdGhpcy5tYXhZID4geTEgPyB0aGlzLm1heFkgOiB5MTtcbiAgICB9O1xuICAgIHJldHVybiBCb3VuZHM7XG59KCkpO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgeyBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgeyBkW3BdID0gYltwXTsgfSB9IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmb3IgYWxsIG9iamVjdHMgdGhhdCBhcmUgcmVuZGVyZWQgb24gdGhlIHNjcmVlbi5cbiAqXG4gKiBUaGlzIGlzIGFuIGFic3RyYWN0IGNsYXNzIGFuZCBzaG91bGQgbm90IGJlIHVzZWQgb24gaXRzIG93bjsgcmF0aGVyIGl0IHNob3VsZCBiIGUgZXh0ZW5kZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBQSVhJLnV0aWxzLkV2ZW50RW1pdHRlclxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIERpc3BsYXlPYmplY3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERpc3BsYXlPYmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGlzcGxheU9iamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudGVtcERpc3BsYXlPYmplY3RQYXJlbnQgPSBudWxsO1xuICAgICAgICAvLyBUT0RPOiBuZWVkIHRvIGNyZWF0ZSBUcmFuc2Zvcm0gZnJvbSBmYWN0b3J5XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXb3JsZCB0cmFuc2Zvcm0gYW5kIGxvY2FsIHRyYW5zZm9ybSBvZiB0aGlzIG9iamVjdC5cbiAgICAgICAgICogVGhpcyB3aWxsIGJlY29tZSByZWFkLW9ubHkgbGF0ZXIsIHBsZWFzZSBkbyBub3QgYXNzaWduIGFueXRoaW5nIHRoZXJlIHVubGVzcyB5b3Uga25vdyB3aGF0IGFyZSB5b3UgZG9pbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuVHJhbnNmb3JtfVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMudHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9wYWNpdHkgb2YgdGhlIG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuYWxwaGEgPSAxO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHZpc2liaWxpdHkgb2YgdGhlIG9iamVjdC4gSWYgZmFsc2UgdGhlIG9iamVjdCB3aWxsIG5vdCBiZSBkcmF3biwgYW5kXG4gICAgICAgICAqIHRoZSB1cGRhdGVUcmFuc2Zvcm0gZnVuY3Rpb24gd2lsbCBub3QgYmUgY2FsbGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBPbmx5IGFmZmVjdHMgcmVjdXJzaXZlIGNhbGxzIGZyb20gcGFyZW50LiBZb3UgY2FuIGFzayBmb3IgYm91bmRzIG9yIGNhbGwgdXBkYXRlVHJhbnNmb3JtIG1hbnVhbGx5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYW4gdGhpcyBvYmplY3QgYmUgcmVuZGVyZWQsIGlmIGZhbHNlIHRoZSBvYmplY3Qgd2lsbCBub3QgYmUgZHJhd24gYnV0IHRoZSB1cGRhdGVUcmFuc2Zvcm1cbiAgICAgICAgICogbWV0aG9kcyB3aWxsIHN0aWxsIGJlIGNhbGxlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogT25seSBhZmZlY3RzIHJlY3Vyc2l2ZSBjYWxscyBmcm9tIHBhcmVudC4gWW91IGNhbiBhc2sgZm9yIGJvdW5kcyBtYW51YWxseS5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLnJlbmRlcmFibGUgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRpc3BsYXkgb2JqZWN0IGNvbnRhaW5lciB0aGF0IGNvbnRhaW5zIHRoaXMgZGlzcGxheSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQ29udGFpbmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtdWx0aXBsaWVkIGFscGhhIG9mIHRoZSBkaXNwbGF5T2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMud29ybGRBbHBoYSA9IDE7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGljaCBpbmRleCBpbiB0aGUgY2hpbGRyZW4gYXJyYXkgdGhlIGRpc3BsYXkgY29tcG9uZW50IHdhcyBiZWZvcmUgdGhlIHByZXZpb3VzIHpJbmRleCBzb3J0LlxuICAgICAgICAgKiBVc2VkIGJ5IGNvbnRhaW5lcnMgdG8gaGVscCBzb3J0IG9iamVjdHMgd2l0aCB0aGUgc2FtZSB6SW5kZXgsIGJ5IHVzaW5nIHByZXZpb3VzIGFycmF5IGluZGV4IGFzIHRoZSBkZWNpZGVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9sYXN0U29ydGVkSW5kZXggPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHpJbmRleCBvZiB0aGUgZGlzcGxheU9iamVjdC5cbiAgICAgICAgICogQSBoaWdoZXIgdmFsdWUgd2lsbCBtZWFuIGl0IHdpbGwgYmUgcmVuZGVyZWQgb24gdG9wIG9mIG90aGVyIGRpc3BsYXlPYmplY3RzIHdpdGhpbiB0aGUgc2FtZSBjb250YWluZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX3pJbmRleCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXJlYSB0aGUgZmlsdGVyIGlzIGFwcGxpZWQgdG8uIFRoaXMgaXMgdXNlZCBhcyBtb3JlIG9mIGFuIG9wdGltaXphdGlvblxuICAgICAgICAgKiByYXRoZXIgdGhhbiBmaWd1cmluZyBvdXQgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGRpc3BsYXlPYmplY3QgZWFjaCBmcmFtZSB5b3UgY2FuIHNldCB0aGlzIHJlY3RhbmdsZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQWxzbyB3b3JrcyBhcyBhbiBpbnRlcmFjdGlvbiBtYXNrLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHs/UElYSS5SZWN0YW5nbGV9XG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5maWx0ZXJBcmVhID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIGZpbHRlcnMgZm9yIHRoZSBkaXNwbGF5T2JqZWN0LlxuICAgICAgICAgKiAqIElNUE9SVEFOVDogVGhpcyBpcyBhIFdlYkdMIG9ubHkgZmVhdHVyZSBhbmQgd2lsbCBiZSBpZ25vcmVkIGJ5IHRoZSBjYW52YXMgcmVuZGVyZXIuXG4gICAgICAgICAqIFRvIHJlbW92ZSBmaWx0ZXJzIHNpbXBseSBzZXQgdGhpcyBwcm9wZXJ0eSB0byBgJ251bGwnYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7P1BJWEkuRmlsdGVyW119XG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5maWx0ZXJzID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnRseSBlbmFibGVkIGZpbHRlcnNcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5GaWx0ZXJbXX1cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX2VuYWJsZWRGaWx0ZXJzID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBib3VuZHMgb2JqZWN0LCB0aGlzIGlzIHVzZWQgdG8gY2FsY3VsYXRlIGFuZCBzdG9yZSB0aGUgYm91bmRzIG9mIHRoZSBkaXNwbGF5T2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkJvdW5kc31cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9ib3VuZHMgPSBuZXcgQm91bmRzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2NhbCBib3VuZHMgb2JqZWN0LCBzd2FwcGVkIHdpdGggYF9ib3VuZHNgIHdoZW4gdXNpbmcgYGdldExvY2FsQm91bmRzKClgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkJvdW5kc31cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9sb2NhbEJvdW5kcyA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFncyB0aGUgY2FjaGVkIGJvdW5kcyBhcyBkaXJ0eS5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fYm91bmRzSUQgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2FjaGUgb2YgdGhpcyBkaXNwbGF5LW9iamVjdCdzIGJvdW5kcy1yZWN0YW5nbGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuQm91bmRzfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fYm91bmRzUmVjdCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWNoZSBvZiB0aGlzIGRpc3BsYXktb2JqZWN0J3MgbG9jYWwtYm91bmRzIHJlY3RhbmdsZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5Cb3VuZHN9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9sb2NhbEJvdW5kc1JlY3QgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG9yaWdpbmFsLCBjYWNoZWQgbWFzayBvZiB0aGUgb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkNvbnRhaW5lcnxQSVhJLk1hc2tEYXRhfG51bGx9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9tYXNrID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gdGhpcyBEaXNwbGF5T2JqZWN0IGlzIGFkZGVkIHRvIGEgQ29udGFpbmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgUElYSS5EaXNwbGF5T2JqZWN0I2FkZGVkXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5Db250YWluZXJ9IGNvbnRhaW5lciAtIFRoZSBjb250YWluZXIgYWRkZWQgdG8uXG4gICAgICAgICAqL1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hlbiB0aGlzIERpc3BsYXlPYmplY3QgaXMgcmVtb3ZlZCBmcm9tIGEgQ29udGFpbmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgUElYSS5EaXNwbGF5T2JqZWN0I3JlbW92ZWRcbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkNvbnRhaW5lcn0gY29udGFpbmVyIC0gVGhlIGNvbnRhaW5lciByZW1vdmVkIGZyb20uXG4gICAgICAgICAqL1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIG9iamVjdCBoYXMgYmVlbiBkZXN0cm95ZWQgdmlhIGRlc3Ryb3koKS4gSWYgdHJ1ZSwgaXQgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VkIHRvIGZhc3QgY2hlY2sgaWYgYSBzcHJpdGUgaXMuLiBhIHNwcml0ZSFcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmlzU3ByaXRlID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEb2VzIGFueSBvdGhlciBkaXNwbGF5T2JqZWN0IHVzZSB0aGlzIG9iamVjdCBhcyBhIG1hc2s/XG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5pc01hc2sgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNaXhlcyBhbGwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGZyb20gYSBzb3VyY2Ugb2JqZWN0IHRvIERpc3BsYXlPYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc291cmNlIC0gVGhlIHNvdXJjZSBvZiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIHRvIG1peCBpbi5cbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0Lm1peGluID0gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAvLyBpbiBFUzgvRVMyMDE3LCB0aGlzIHdvdWxkIGJlIHJlYWxseSBlYXN5OlxuICAgICAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgICAgIC8vIGdldCBhbGwgdGhlIGVudW1lcmFibGUgcHJvcGVydHkga2V5c1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgICAgIC8vIGxvb3AgdGhyb3VnaCBwcm9wZXJ0aWVzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IGtleXNbaV07XG4gICAgICAgICAgICAvLyBTZXQgdGhlIHByb3BlcnR5IHVzaW5nIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIC0gdGhpcyB3b3JrcyBmb3IgYWNjZXNzb3JzIGFuZCBub3JtYWwgdmFsdWUgcHJvcGVydGllc1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpc3BsYXlPYmplY3QucHJvdG90eXBlLCBwcm9wZXJ0eU5hbWUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBwcm9wZXJ0eU5hbWUpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgdXBkYXRlcyB0cmFuc2Zvcm0gb2YgYWxsIG9iamVjdHMgZnJvbSB0aGUgcm9vdCB0byB0aGlzIG9uZVxuICAgICAqIGludGVybmFsIGZ1bmN0aW9uIGZvciB0b0xvY2FsKClcbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5fcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5fcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0udXBkYXRlVHJhbnNmb3JtKHRoaXMucGFyZW50LnRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS51cGRhdGVUcmFuc2Zvcm0odGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQudHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgb2JqZWN0IHRyYW5zZm9ybSBmb3IgcmVuZGVyaW5nLlxuICAgICAqXG4gICAgICogVE9ETyAtIE9wdGltaXphdGlvbiBwYXNzIVxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLnVwZGF0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYm91bmRzSUQrKztcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0udXBkYXRlVHJhbnNmb3JtKHRoaXMucGFyZW50LnRyYW5zZm9ybSk7XG4gICAgICAgIC8vIG11bHRpcGx5IHRoZSBhbHBoYXMuLlxuICAgICAgICB0aGlzLndvcmxkQWxwaGEgPSB0aGlzLmFscGhhICogdGhpcy5wYXJlbnQud29ybGRBbHBoYTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgYm91bmRzIG9mIHRoZSBkaXNwbGF5T2JqZWN0IGFzIGEgcmVjdGFuZ2xlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBVcGRhdGVdIC0gU2V0dGluZyB0byBgdHJ1ZWAgd2lsbCBzdG9wIHRoZSB0cmFuc2Zvcm1zIG9mIHRoZSBzY2VuZSBncmFwaCBmcm9tXG4gICAgICogIGJlaW5nIHVwZGF0ZWQuIFRoaXMgbWVhbnMgdGhlIGNhbGN1bGF0aW9uIHJldHVybmVkIE1BWSBiZSBvdXQgb2YgZGF0ZSBCVVQgd2lsbCBnaXZlIHlvdSBhXG4gICAgICogIG5pY2UgcGVyZm9ybWFuY2UgYm9vc3QuXG4gICAgICogQHBhcmFtIHtQSVhJLlJlY3RhbmdsZX0gW3JlY3RdIC0gT3B0aW9uYWwgcmVjdGFuZ2xlIHRvIHN0b3JlIHRoZSByZXN1bHQgb2YgdGhlIGJvdW5kcyBjYWxjdWxhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLlJlY3RhbmdsZX0gVGhlIHJlY3Rhbmd1bGFyIGJvdW5kaW5nIGFyZWEuXG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUuZ2V0Qm91bmRzID0gZnVuY3Rpb24gKHNraXBVcGRhdGUsIHJlY3QpIHtcbiAgICAgICAgaWYgKCFza2lwVXBkYXRlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudDtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9ib3VuZHMudXBkYXRlSUQgIT09IHRoaXMuX2JvdW5kc0lEKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUJvdW5kcygpO1xuICAgICAgICAgICAgdGhpcy5fYm91bmRzLnVwZGF0ZUlEID0gdGhpcy5fYm91bmRzSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZWN0KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2JvdW5kc1JlY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ib3VuZHNSZWN0ID0gbmV3IFJlY3RhbmdsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjdCA9IHRoaXMuX2JvdW5kc1JlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2JvdW5kcy5nZXRSZWN0YW5nbGUocmVjdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGxvY2FsIGJvdW5kcyBvZiB0aGUgZGlzcGxheU9iamVjdCBhcyBhIHJlY3RhbmdsZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVjdGFuZ2xlfSBbcmVjdF0gLSBPcHRpb25hbCByZWN0YW5nbGUgdG8gc3RvcmUgdGhlIHJlc3VsdCBvZiB0aGUgYm91bmRzIGNhbGN1bGF0aW9uLlxuICAgICAqIEByZXR1cm4ge1BJWEkuUmVjdGFuZ2xlfSBUaGUgcmVjdGFuZ3VsYXIgYm91bmRpbmcgYXJlYS5cbiAgICAgKi9cbiAgICBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5nZXRMb2NhbEJvdW5kcyA9IGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgIGlmICghcmVjdCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9sb2NhbEJvdW5kc1JlY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbEJvdW5kc1JlY3QgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWN0ID0gdGhpcy5fbG9jYWxCb3VuZHNSZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fbG9jYWxCb3VuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsQm91bmRzID0gbmV3IEJvdW5kcygpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0cmFuc2Zvcm1SZWYgPSB0aGlzLnRyYW5zZm9ybTtcbiAgICAgICAgdmFyIHBhcmVudFJlZiA9IHRoaXMucGFyZW50O1xuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQudHJhbnNmb3JtO1xuICAgICAgICB2YXIgd29ybGRCb3VuZHMgPSB0aGlzLl9ib3VuZHM7XG4gICAgICAgIHZhciB3b3JsZEJvdW5kc0lEID0gdGhpcy5fYm91bmRzSUQ7XG4gICAgICAgIHRoaXMuX2JvdW5kcyA9IHRoaXMuX2xvY2FsQm91bmRzO1xuICAgICAgICB2YXIgYm91bmRzID0gdGhpcy5nZXRCb3VuZHMoZmFsc2UsIHJlY3QpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudFJlZjtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1SZWY7XG4gICAgICAgIHRoaXMuX2JvdW5kcyA9IHdvcmxkQm91bmRzO1xuICAgICAgICB0aGlzLl9ib3VuZHMudXBkYXRlSUQgKz0gdGhpcy5fYm91bmRzSUQgLSB3b3JsZEJvdW5kc0lEOyAvLyByZWZsZWN0IHNpZGUtZWZmZWN0c1xuICAgICAgICByZXR1cm4gYm91bmRzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZ2xvYmFsIHBvc2l0aW9uIG9mIHRoZSBkaXNwbGF5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5JUG9pbnREYXRhfSBwb3NpdGlvbiAtIFRoZSB3b3JsZCBvcmlnaW4gdG8gY2FsY3VsYXRlIGZyb20uXG4gICAgICogQHBhcmFtIHtQSVhJLlBvaW50fSBbcG9pbnRdIC0gQSBQb2ludCBvYmplY3QgaW4gd2hpY2ggdG8gc3RvcmUgdGhlIHZhbHVlLCBvcHRpb25hbFxuICAgICAqICAob3RoZXJ3aXNlIHdpbGwgY3JlYXRlIGEgbmV3IFBvaW50KS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwVXBkYXRlPWZhbHNlXSAtIFNob3VsZCB3ZSBza2lwIHRoZSB1cGRhdGUgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm4ge1BJWEkuUG9pbnR9IEEgcG9pbnQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcG9zaXRpb24gb2YgdGhpcyBvYmplY3QuXG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUudG9HbG9iYWwgPSBmdW5jdGlvbiAocG9zaXRpb24sIHBvaW50LCBza2lwVXBkYXRlKSB7XG4gICAgICAgIGlmIChza2lwVXBkYXRlID09PSB2b2lkIDApIHsgc2tpcFVwZGF0ZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmICghc2tpcFVwZGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgLy8gdGhpcyBwYXJlbnQgY2hlY2sgaXMgZm9yIGp1c3QgaW4gY2FzZSB0aGUgaXRlbSBpcyBhIHJvb3Qgb2JqZWN0LlxuICAgICAgICAgICAgLy8gSWYgaXQgaXMgd2UgbmVlZCB0byBnaXZlIGl0IGEgdGVtcG9yYXJ5IHBhcmVudCBzbyB0aGF0IGRpc3BsYXlPYmplY3RVcGRhdGVUcmFuc2Zvcm0gd29ya3MgY29ycmVjdGx5XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG1haW5seSB0byBhdm9pZCBhIHBhcmVudCBjaGVjayBpbiB0aGUgbWFpbiBsb29wLiBFdmVyeSBsaXR0bGUgaGVscHMgZm9yIHBlcmZvcm1hbmNlIDopXG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlPYmplY3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlPYmplY3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBkb24ndCBuZWVkIHRvIHVwZGF0ZSB0aGUgbG90XG4gICAgICAgIHJldHVybiB0aGlzLndvcmxkVHJhbnNmb3JtLmFwcGx5KHBvc2l0aW9uLCBwb2ludCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBsb2NhbCBwb3NpdGlvbiBvZiB0aGUgZGlzcGxheSBvYmplY3QgcmVsYXRpdmUgdG8gYW5vdGhlciBwb2ludC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5JUG9pbnREYXRhfSBwb3NpdGlvbiAtIFRoZSB3b3JsZCBvcmlnaW4gdG8gY2FsY3VsYXRlIGZyb20uXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IFtmcm9tXSAtIFRoZSBEaXNwbGF5T2JqZWN0IHRvIGNhbGN1bGF0ZSB0aGUgZ2xvYmFsIHBvc2l0aW9uIGZyb20uXG4gICAgICogQHBhcmFtIHtQSVhJLlBvaW50fSBbcG9pbnRdIC0gQSBQb2ludCBvYmplY3QgaW4gd2hpY2ggdG8gc3RvcmUgdGhlIHZhbHVlLCBvcHRpb25hbFxuICAgICAqICAob3RoZXJ3aXNlIHdpbGwgY3JlYXRlIGEgbmV3IFBvaW50KS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtza2lwVXBkYXRlPWZhbHNlXSAtIFNob3VsZCB3ZSBza2lwIHRoZSB1cGRhdGUgdHJhbnNmb3JtXG4gICAgICogQHJldHVybiB7UElYSS5Qb2ludH0gQSBwb2ludCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBwb3NpdGlvbiBvZiB0aGlzIG9iamVjdFxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLnRvTG9jYWwgPSBmdW5jdGlvbiAocG9zaXRpb24sIGZyb20sIHBvaW50LCBza2lwVXBkYXRlKSB7XG4gICAgICAgIGlmIChmcm9tKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGZyb20udG9HbG9iYWwocG9zaXRpb24sIHBvaW50LCBza2lwVXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNraXBVcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIC8vIHRoaXMgcGFyZW50IGNoZWNrIGlzIGZvciBqdXN0IGluIGNhc2UgdGhlIGl0ZW0gaXMgYSByb290IG9iamVjdC5cbiAgICAgICAgICAgIC8vIElmIGl0IGlzIHdlIG5lZWQgdG8gZ2l2ZSBpdCBhIHRlbXBvcmFyeSBwYXJlbnQgc28gdGhhdCBkaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtIHdvcmtzIGNvcnJlY3RseVxuICAgICAgICAgICAgLy8gdGhpcyBpcyBtYWlubHkgdG8gYXZvaWQgYSBwYXJlbnQgY2hlY2sgaW4gdGhlIG1haW4gbG9vcC4gRXZlcnkgbGl0dGxlIGhlbHBzIGZvciBwZXJmb3JtYW5jZSA6KVxuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2ltcGx5IGFwcGx5IHRoZSBtYXRyaXguLlxuICAgICAgICByZXR1cm4gdGhpcy53b3JsZFRyYW5zZm9ybS5hcHBseUludmVyc2UocG9zaXRpb24sIHBvaW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgcGFyZW50IENvbnRhaW5lciBvZiB0aGlzIERpc3BsYXlPYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuQ29udGFpbmVyfSBjb250YWluZXIgLSBUaGUgQ29udGFpbmVyIHRvIGFkZCB0aGlzIERpc3BsYXlPYmplY3QgdG8uXG4gICAgICogQHJldHVybiB7UElYSS5Db250YWluZXJ9IFRoZSBDb250YWluZXIgdGhhdCB0aGlzIERpc3BsYXlPYmplY3Qgd2FzIGFkZGVkIHRvLlxuICAgICAqL1xuICAgIERpc3BsYXlPYmplY3QucHJvdG90eXBlLnNldFBhcmVudCA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICAgICAgaWYgKCFjb250YWluZXIgfHwgIWNvbnRhaW5lci5hZGRDaGlsZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXRQYXJlbnQ6IEFyZ3VtZW50IG11c3QgYmUgYSBDb250YWluZXInKTtcbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXIuYWRkQ2hpbGQodGhpcyk7XG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBzZXQgdGhlIHBvc2l0aW9uLCBzY2FsZSwgc2tldyBhbmQgcGl2b3QgYXQgb25jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeD0wXSAtIFRoZSBYIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt5PTBdIC0gVGhlIFkgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NjYWxlWD0xXSAtIFRoZSBYIHNjYWxlIHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzY2FsZVk9MV0gLSBUaGUgWSBzY2FsZSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcm90YXRpb249MF0gLSBUaGUgcm90YXRpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NrZXdYPTBdIC0gVGhlIFggc2tldyB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tld1k9MF0gLSBUaGUgWSBza2V3IHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwaXZvdFg9MF0gLSBUaGUgWCBwaXZvdCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcGl2b3RZPTBdIC0gVGhlIFkgcGl2b3QgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtQSVhJLkRpc3BsYXlPYmplY3R9IFRoZSBEaXNwbGF5T2JqZWN0IGluc3RhbmNlXG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUuc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gKHgsIHksIHNjYWxlWCwgc2NhbGVZLCByb3RhdGlvbiwgc2tld1gsIHNrZXdZLCBwaXZvdFgsIHBpdm90WSkge1xuICAgICAgICBpZiAoeCA9PT0gdm9pZCAwKSB7IHggPSAwOyB9XG4gICAgICAgIGlmICh5ID09PSB2b2lkIDApIHsgeSA9IDA7IH1cbiAgICAgICAgaWYgKHNjYWxlWCA9PT0gdm9pZCAwKSB7IHNjYWxlWCA9IDE7IH1cbiAgICAgICAgaWYgKHNjYWxlWSA9PT0gdm9pZCAwKSB7IHNjYWxlWSA9IDE7IH1cbiAgICAgICAgaWYgKHJvdGF0aW9uID09PSB2b2lkIDApIHsgcm90YXRpb24gPSAwOyB9XG4gICAgICAgIGlmIChza2V3WCA9PT0gdm9pZCAwKSB7IHNrZXdYID0gMDsgfVxuICAgICAgICBpZiAoc2tld1kgPT09IHZvaWQgMCkgeyBza2V3WSA9IDA7IH1cbiAgICAgICAgaWYgKHBpdm90WCA9PT0gdm9pZCAwKSB7IHBpdm90WCA9IDA7IH1cbiAgICAgICAgaWYgKHBpdm90WSA9PT0gdm9pZCAwKSB7IHBpdm90WSA9IDA7IH1cbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ID0geDtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0geTtcbiAgICAgICAgdGhpcy5zY2FsZS54ID0gIXNjYWxlWCA/IDEgOiBzY2FsZVg7XG4gICAgICAgIHRoaXMuc2NhbGUueSA9ICFzY2FsZVkgPyAxIDogc2NhbGVZO1xuICAgICAgICB0aGlzLnJvdGF0aW9uID0gcm90YXRpb247XG4gICAgICAgIHRoaXMuc2tldy54ID0gc2tld1g7XG4gICAgICAgIHRoaXMuc2tldy55ID0gc2tld1k7XG4gICAgICAgIHRoaXMucGl2b3QueCA9IHBpdm90WDtcbiAgICAgICAgdGhpcy5waXZvdC55ID0gcGl2b3RZO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEJhc2UgZGVzdHJveSBtZXRob2QgZm9yIGdlbmVyaWMgZGlzcGxheSBvYmplY3RzLiBUaGlzIHdpbGwgYXV0b21hdGljYWxseVxuICAgICAqIHJlbW92ZSB0aGUgZGlzcGxheSBvYmplY3QgZnJvbSBpdHMgcGFyZW50IENvbnRhaW5lciBhcyB3ZWxsIGFzIHJlbW92ZVxuICAgICAqIGFsbCBjdXJyZW50IGV2ZW50IGxpc3RlbmVycyBhbmQgaW50ZXJuYWwgcmVmZXJlbmNlcy4gRG8gbm90IHVzZSBhIERpc3BsYXlPYmplY3RcbiAgICAgKiBhZnRlciBjYWxsaW5nIGBkZXN0cm95KClgLlxuICAgICAqXG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChfb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gbnVsbDtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9ib3VuZHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9tYXNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5maWx0ZXJBcmVhID0gbnVsbDtcbiAgICAgICAgdGhpcy5oaXRBcmVhID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmludGVyYWN0aXZlQ2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSwgXCJfdGVtcERpc3BsYXlPYmplY3RQYXJlbnRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLkNvbnRhaW5lcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudGVtcERpc3BsYXlPYmplY3RQYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBEaXNwbGF5T2JqZWN0UGFyZW50ID0gbmV3IFRlbXBvcmFyeURpc3BsYXlPYmplY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRlbXBEaXNwbGF5T2JqZWN0UGFyZW50O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogVXNlZCBpbiBSZW5kZXJlciwgY2FjaGVBc0JpdG1hcCBhbmQgb3RoZXIgcGxhY2VzIHdoZXJlIHlvdSBjYWxsIGFuIGB1cGRhdGVUcmFuc2Zvcm1gIG9uIHJvb3RcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IGNhY2hlUGFyZW50ID0gZWxlbS5lbmFibGVUZW1wUGFyZW50KCk7XG4gICAgICogZWxlbS51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgKiBlbGVtLmRpc2FibGVUZW1wUGFyZW50KGNhY2hlUGFyZW50KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQSVhJLkRpc3BsYXlPYmplY3R9IGN1cnJlbnQgcGFyZW50XG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUuZW5hYmxlVGVtcFBhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG15UGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQ7XG4gICAgICAgIHJldHVybiBteVBhcmVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhaXIgbWV0aG9kIGZvciBgZW5hYmxlVGVtcFBhcmVudGBcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gY2FjaGVQYXJlbnQgYWN0dWFsIHBhcmVudCBvZiBlbGVtZW50XG4gICAgICovXG4gICAgRGlzcGxheU9iamVjdC5wcm90b3R5cGUuZGlzYWJsZVRlbXBQYXJlbnQgPSBmdW5jdGlvbiAoY2FjaGVQYXJlbnQpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBjYWNoZVBhcmVudDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgZGlzcGxheU9iamVjdCBvbiB0aGUgeCBheGlzIHJlbGF0aXZlIHRvIHRoZSBsb2NhbCBjb29yZGluYXRlcyBvZiB0aGUgcGFyZW50LlxuICAgICAgICAgKiBBbiBhbGlhcyB0byBwb3NpdGlvbi54XG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnggPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSwgXCJ5XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgZGlzcGxheU9iamVjdCBvbiB0aGUgeSBheGlzIHJlbGF0aXZlIHRvIHRoZSBsb2NhbCBjb29yZGluYXRlcyBvZiB0aGUgcGFyZW50LlxuICAgICAgICAgKiBBbiBhbGlhcyB0byBwb3NpdGlvbi55XG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnkgPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSwgXCJ3b3JsZFRyYW5zZm9ybVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50IHRyYW5zZm9ybSBvZiB0aGUgb2JqZWN0IGJhc2VkIG9uIHdvcmxkIChwYXJlbnQpIGZhY3RvcnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuTWF0cml4fVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLndvcmxkVHJhbnNmb3JtO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpc3BsYXlPYmplY3QucHJvdG90eXBlLCBcImxvY2FsVHJhbnNmb3JtXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnQgdHJhbnNmb3JtIG9mIHRoZSBvYmplY3QgYmFzZWQgb24gbG9jYWwgZmFjdG9yczogcG9zaXRpb24sIHNjYWxlLCBvdGhlciBzdHVmZi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5NYXRyaXh9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ubG9jYWxUcmFuc2Zvcm07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGlzcGxheU9iamVjdC5wcm90b3R5cGUsIFwicG9zaXRpb25cIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvb3JkaW5hdGUgb2YgdGhlIG9iamVjdCByZWxhdGl2ZSB0byB0aGUgbG9jYWwgY29vcmRpbmF0ZXMgb2YgdGhlIHBhcmVudC5cbiAgICAgICAgICogQXNzaWdubWVudCBieSB2YWx1ZSBzaW5jZSBwaXhpLXY0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLk9ic2VydmFibGVQb2ludH1cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24uY29weUZyb20odmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpc3BsYXlPYmplY3QucHJvdG90eXBlLCBcInNjYWxlXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzY2FsZSBmYWN0b3Igb2YgdGhlIG9iamVjdC5cbiAgICAgICAgICogQXNzaWdubWVudCBieSB2YWx1ZSBzaW5jZSBwaXhpLXY0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLk9ic2VydmFibGVQb2ludH1cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2NhbGUuY29weUZyb20odmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpc3BsYXlPYmplY3QucHJvdG90eXBlLCBcInBpdm90XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwaXZvdCBwb2ludCBvZiB0aGUgZGlzcGxheU9iamVjdCB0aGF0IGl0IHJvdGF0ZXMgYXJvdW5kLlxuICAgICAgICAgKiBBc3NpZ25tZW50IGJ5IHZhbHVlIHNpbmNlIHBpeGktdjQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge1BJWEkuT2JzZXJ2YWJsZVBvaW50fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ucGl2b3Q7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5waXZvdC5jb3B5RnJvbSh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGlzcGxheU9iamVjdC5wcm90b3R5cGUsIFwic2tld1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2tldyBmYWN0b3IgZm9yIHRoZSBvYmplY3QgaW4gcmFkaWFucy5cbiAgICAgICAgICogQXNzaWdubWVudCBieSB2YWx1ZSBzaW5jZSBwaXhpLXY0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtQSVhJLk9ic2VydmFibGVQb2ludH1cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnNrZXc7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5za2V3LmNvcHlGcm9tKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSwgXCJyb3RhdGlvblwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcm90YXRpb24gb2YgdGhlIG9iamVjdCBpbiByYWRpYW5zLlxuICAgICAgICAgKiAncm90YXRpb24nIGFuZCAnYW5nbGUnIGhhdmUgdGhlIHNhbWUgZWZmZWN0IG9uIGEgZGlzcGxheSBvYmplY3Q7IHJvdGF0aW9uIGlzIGluIHJhZGlhbnMsIGFuZ2xlIGlzIGluIGRlZ3JlZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24gPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSwgXCJhbmdsZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYW5nbGUgb2YgdGhlIG9iamVjdCBpbiBkZWdyZWVzLlxuICAgICAgICAgKiAncm90YXRpb24nIGFuZCAnYW5nbGUnIGhhdmUgdGhlIHNhbWUgZWZmZWN0IG9uIGEgZGlzcGxheSBvYmplY3Q7IHJvdGF0aW9uIGlzIGluIHJhZGlhbnMsIGFuZ2xlIGlzIGluIGRlZ3JlZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uICogUkFEX1RPX0RFRztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uID0gdmFsdWUgKiBERUdfVE9fUkFEO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpc3BsYXlPYmplY3QucHJvdG90eXBlLCBcInpJbmRleFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgekluZGV4IG9mIHRoZSBkaXNwbGF5T2JqZWN0LlxuICAgICAgICAgKiBJZiBhIGNvbnRhaW5lciBoYXMgdGhlIHNvcnRhYmxlQ2hpbGRyZW4gcHJvcGVydHkgc2V0IHRvIHRydWUsIGNoaWxkcmVuIHdpbGwgYmUgYXV0b21hdGljYWxseVxuICAgICAgICAgKiBzb3J0ZWQgYnkgekluZGV4IHZhbHVlOyBhIGhpZ2hlciB2YWx1ZSB3aWxsIG1lYW4gaXQgd2lsbCBiZSBtb3ZlZCB0b3dhcmRzIHRoZSBlbmQgb2YgdGhlIGFycmF5LFxuICAgICAgICAgKiBhbmQgdGh1cyByZW5kZXJlZCBvbiB0b3Agb2Ygb3RoZXIgZGlzcGxheU9iamVjdHMgd2l0aGluIHRoZSBzYW1lIGNvbnRhaW5lci5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fekluZGV4O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fekluZGV4ID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5zb3J0RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpc3BsYXlPYmplY3QucHJvdG90eXBlLCBcIndvcmxkVmlzaWJsZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIG9iamVjdCBpcyBnbG9iYWxseSB2aXNpYmxlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmICghaXRlbS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW0ucGFyZW50O1xuICAgICAgICAgICAgfSB3aGlsZSAoaXRlbSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSwgXCJtYXNrXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgYSBtYXNrIGZvciB0aGUgZGlzcGxheU9iamVjdC4gQSBtYXNrIGlzIGFuIG9iamVjdCB0aGF0IGxpbWl0cyB0aGUgdmlzaWJpbGl0eSBvZiBhblxuICAgICAgICAgKiBvYmplY3QgdG8gdGhlIHNoYXBlIG9mIHRoZSBtYXNrIGFwcGxpZWQgdG8gaXQuIEluIFBpeGlKUyBhIHJlZ3VsYXIgbWFzayBtdXN0IGJlIGFcbiAgICAgICAgICoge0BsaW5rIFBJWEkuR3JhcGhpY3N9IG9yIGEge0BsaW5rIFBJWEkuU3ByaXRlfSBvYmplY3QuIFRoaXMgYWxsb3dzIGZvciBtdWNoIGZhc3RlciBtYXNraW5nIGluIGNhbnZhcyBhcyBpdFxuICAgICAgICAgKiB1dGlsaXRpZXMgc2hhcGUgY2xpcHBpbmcuIFRvIHJlbW92ZSBhIG1hc2ssIHNldCB0aGlzIHByb3BlcnR5IHRvIGBudWxsYC5cbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIHNwcml0ZSBtYXNrIGJvdGggYWxwaGEgYW5kIHJlZCBjaGFubmVsIGFyZSB1c2VkLiBCbGFjayBtYXNrIGlzIHRoZSBzYW1lIGFzIHRyYW5zcGFyZW50IG1hc2suXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGNvbnN0IGdyYXBoaWNzID0gbmV3IFBJWEkuR3JhcGhpY3MoKTtcbiAgICAgICAgICogZ3JhcGhpY3MuYmVnaW5GaWxsKDB4RkYzMzAwKTtcbiAgICAgICAgICogZ3JhcGhpY3MuZHJhd1JlY3QoNTAsIDI1MCwgMTAwLCAxMDApO1xuICAgICAgICAgKiBncmFwaGljcy5lbmRGaWxsKCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIGNvbnN0IHNwcml0ZSA9IG5ldyBQSVhJLlNwcml0ZSh0ZXh0dXJlKTtcbiAgICAgICAgICogc3ByaXRlLm1hc2sgPSBncmFwaGljcztcbiAgICAgICAgICogQHRvZG8gQXQgdGhlIG1vbWVudCwgUElYSS5DYW52YXNSZW5kZXJlciBkb2Vzbid0IHN1cHBvcnQgUElYSS5TcHJpdGUgYXMgbWFzay5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5Db250YWluZXJ8UElYSS5NYXNrRGF0YXxudWxsfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFzaztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYXNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tPYmplY3QgPSAodGhpcy5fbWFzay5tYXNrT2JqZWN0IHx8IHRoaXMuX21hc2spO1xuICAgICAgICAgICAgICAgIG1hc2tPYmplY3QucmVuZGVyYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgbWFza09iamVjdC5pc01hc2sgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX21hc2sgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYXNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tPYmplY3QgPSAodGhpcy5fbWFzay5tYXNrT2JqZWN0IHx8IHRoaXMuX21hc2spO1xuICAgICAgICAgICAgICAgIG1hc2tPYmplY3QucmVuZGVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG1hc2tPYmplY3QuaXNNYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBEaXNwbGF5T2JqZWN0O1xufShFdmVudEVtaXR0ZXIpKTtcbnZhciBUZW1wb3JhcnlEaXNwbGF5T2JqZWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUZW1wb3JhcnlEaXNwbGF5T2JqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRlbXBvcmFyeURpc3BsYXlPYmplY3QoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zb3J0RGlydHkgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBUZW1wb3JhcnlEaXNwbGF5T2JqZWN0O1xufShEaXNwbGF5T2JqZWN0KSk7XG4vKipcbiAqIERpc3BsYXlPYmplY3QgZGVmYXVsdCB1cGRhdGVUcmFuc2Zvcm0sIGRvZXMgbm90IHVwZGF0ZSBjaGlsZHJlbiBvZiBjb250YWluZXIuXG4gKiBXaWxsIGNyYXNoIGlmIHRoZXJlJ3Mgbm8gcGFyZW50IGVsZW1lbnQuXG4gKlxuICogQG1lbWJlcm9mIFBJWEkuRGlzcGxheU9iamVjdCNcbiAqIEBmdW5jdGlvbiBkaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtXG4gKi9cbkRpc3BsYXlPYmplY3QucHJvdG90eXBlLmRpc3BsYXlPYmplY3RVcGRhdGVUcmFuc2Zvcm0gPSBEaXNwbGF5T2JqZWN0LnByb3RvdHlwZS51cGRhdGVUcmFuc2Zvcm07XG5cbmZ1bmN0aW9uIHNvcnRDaGlsZHJlbihhLCBiKSB7XG4gICAgaWYgKGEuekluZGV4ID09PSBiLnpJbmRleCkge1xuICAgICAgICByZXR1cm4gYS5fbGFzdFNvcnRlZEluZGV4IC0gYi5fbGFzdFNvcnRlZEluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gYS56SW5kZXggLSBiLnpJbmRleDtcbn1cbi8qKlxuICogQSBDb250YWluZXIgcmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgZGlzcGxheSBvYmplY3RzLlxuICpcbiAqIEl0IGlzIHRoZSBiYXNlIGNsYXNzIG9mIGFsbCBkaXNwbGF5IG9iamVjdHMgdGhhdCBhY3QgYXMgYSBjb250YWluZXIgZm9yIG90aGVyIG9iamVjdHMgKGxpa2UgU3ByaXRlcykuXG4gKlxuICpgYGBqc1xuICogbGV0IGNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xuICogY29udGFpbmVyLmFkZENoaWxkKHNwcml0ZSk7XG4gKiBgYGBcbiAqXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIFBJWEkuRGlzcGxheU9iamVjdFxuICogQG1lbWJlcm9mIFBJWElcbiAqL1xudmFyIENvbnRhaW5lciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29udGFpbmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbnRhaW5lcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhcnJheSBvZiBjaGlsZHJlbiBvZiB0aGlzIGNvbnRhaW5lci5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7UElYSS5EaXNwbGF5T2JqZWN0W119XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHNldCB0byB0cnVlLCB0aGUgY29udGFpbmVyIHdpbGwgc29ydCBpdHMgY2hpbGRyZW4gYnkgekluZGV4IHZhbHVlXG4gICAgICAgICAqIHdoZW4gdXBkYXRlVHJhbnNmb3JtKCkgaXMgY2FsbGVkLCBvciBtYW51YWxseSBpZiBzb3J0Q2hpbGRyZW4oKSBpcyBjYWxsZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgYWN0dWFsbHkgY2hhbmdlcyB0aGUgb3JkZXIgb2YgZWxlbWVudHMgaW4gdGhlIGFycmF5LCBzbyBzaG91bGQgYmUgdHJlYXRlZFxuICAgICAgICAgKiBhcyBhIGJhc2ljIHNvbHV0aW9uIHRoYXQgaXMgbm90IHBlcmZvcm1hbnQgY29tcGFyZWQgdG8gb3RoZXIgc29sdXRpb25zLFxuICAgICAgICAgKiBzdWNoIGFzIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9waXhpanMvcGl4aS1kaXNwbGF5XG4gICAgICAgICAqXG4gICAgICAgICAqIEFsc28gYmUgYXdhcmUgb2YgdGhhdCB0aGlzIG1heSBub3Qgd29yayBuaWNlbHkgd2l0aCB0aGUgYWRkQ2hpbGRBdCgpIGZ1bmN0aW9uLFxuICAgICAgICAgKiBhcyB0aGUgekluZGV4IHNvcnRpbmcgbWF5IGNhdXNlIHRoZSBjaGlsZCB0byBhdXRvbWF0aWNhbGx5IHNvcnRlZCB0byBhbm90aGVyIHBvc2l0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc2VlIFBJWEkuc2V0dGluZ3MuU09SVEFCTEVfQ0hJTERSRU5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLnNvcnRhYmxlQ2hpbGRyZW4gPSBzZXR0aW5ncy5TT1JUQUJMRV9DSElMRFJFTjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3VsZCBjaGlsZHJlbiBiZSBzb3J0ZWQgYnkgekluZGV4IGF0IHRoZSBuZXh0IHVwZGF0ZVRyYW5zZm9ybSBjYWxsLlxuICAgICAgICAgKiBXaWxsIGdldCBhdXRvbWF0aWNhbGx5IHNldCB0byB0cnVlIGlmIGEgbmV3IGNoaWxkIGlzIGFkZGVkLCBvciBpZiBhIGNoaWxkJ3MgekluZGV4IGNoYW5nZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5zb3J0RGlydHkgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hlbiBhIERpc3BsYXlPYmplY3QgaXMgYWRkZWQgdG8gdGhpcyBDb250YWluZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBQSVhJLkNvbnRhaW5lciNjaGlsZEFkZGVkXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIFRoZSBjaGlsZCBhZGRlZCB0byB0aGUgQ29udGFpbmVyLlxuICAgICAgICAgKiBAcGFyYW0ge1BJWEkuQ29udGFpbmVyfSBjb250YWluZXIgLSBUaGUgY29udGFpbmVyIHRoYXQgYWRkZWQgdGhlIGNoaWxkLlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgY2hpbGRyZW4ncyBpbmRleCBvZiB0aGUgYWRkZWQgY2hpbGQuXG4gICAgICAgICAqL1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hlbiBhIERpc3BsYXlPYmplY3QgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgQ29udGFpbmVyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgUElYSS5EaXNwbGF5T2JqZWN0I3JlbW92ZWRGcm9tXG4gICAgICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIFRoZSBjaGlsZCByZW1vdmVkIGZyb20gdGhlIENvbnRhaW5lci5cbiAgICAgICAgICogQHBhcmFtIHtQSVhJLkNvbnRhaW5lcn0gY29udGFpbmVyIC0gVGhlIGNvbnRhaW5lciB0aGF0IHJlbW92ZWQgcmVtb3ZlZCB0aGUgY2hpbGQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBmb3JtZXIgY2hpbGRyZW4ncyBpbmRleCBvZiB0aGUgcmVtb3ZlZCBjaGlsZFxuICAgICAgICAgKi9cbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGFibGUgbWV0aG9kIHRoYXQgY2FuIGJlIHVzZWQgYnkgQ29udGFpbmVyIHN1YmNsYXNzZXMgd2hlbmV2ZXIgdGhlIGNoaWxkcmVuIGFycmF5IGlzIG1vZGlmaWVkXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5vbkNoaWxkcmVuQ2hhbmdlID0gZnVuY3Rpb24gKF9sZW5ndGgpIHtcbiAgICAgICAgLyogZW1wdHkgKi9cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgb25lIG9yIG1vcmUgY2hpbGRyZW4gdG8gdGhlIGNvbnRhaW5lci5cbiAgICAgKlxuICAgICAqIE11bHRpcGxlIGl0ZW1zIGNhbiBiZSBhZGRlZCBsaWtlIHNvOiBgbXlDb250YWluZXIuYWRkQ2hpbGQodGhpbmdPbmUsIHRoaW5nVHdvLCB0aGluZ1RocmVlKWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Li4uUElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZHJlbiAtIFRoZSBEaXNwbGF5T2JqZWN0KHMpIHRvIGFkZCB0byB0aGUgY29udGFpbmVyXG4gICAgICogQHJldHVybiB7UElYSS5EaXNwbGF5T2JqZWN0fSBUaGUgZmlyc3QgY2hpbGQgdGhhdCB3YXMgYWRkZWQuXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgY2hpbGRyZW5bX2ldID0gYXJndW1lbnRzJDFbX2ldO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lIGFyZ3VtZW50IHdlIGNhbiBieXBhc3MgbG9vcGluZyB0aHJvdWdoIHRoZSB0aGVtXG4gICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGFycmF5IGFuZCBhZGQgYWxsIGNoaWxkcmVuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bMF07XG4gICAgICAgICAgICAvLyBpZiB0aGUgY2hpbGQgaGFzIGEgcGFyZW50IHRoZW4gbGV0cyByZW1vdmUgaXQgYXMgUGl4aUpTIG9iamVjdHMgY2FuIG9ubHkgZXhpc3QgaW4gb25lIHBsYWNlXG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgY2hpbGQucGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnNvcnREaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAvLyBlbnN1cmUgY2hpbGQgdHJhbnNmb3JtIHdpbGwgYmUgcmVjYWxjdWxhdGVkXG4gICAgICAgICAgICBjaGlsZC50cmFuc2Zvcm0uX3BhcmVudElEID0gLTE7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgLy8gZW5zdXJlIGJvdW5kcyB3aWxsIGJlIHJlY2FsY3VsYXRlZFxuICAgICAgICAgICAgdGhpcy5fYm91bmRzSUQrKztcbiAgICAgICAgICAgIC8vIFRPRE8gLSBsZXRzIGVpdGhlciBkbyBhbGwgY2FsbGJhY2tzIG9yIGFsbCBldmVudHMuLiBub3QgYm90aCFcbiAgICAgICAgICAgIHRoaXMub25DaGlsZHJlbkNoYW5nZSh0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjaGlsZEFkZGVkJywgY2hpbGQsIHRoaXMsIHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBjaGlsZC5lbWl0KCdhZGRlZCcsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZHJlblswXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBjaGlsZCB0byB0aGUgY29udGFpbmVyIGF0IGEgc3BlY2lmaWVkIGluZGV4LiBJZiB0aGUgaW5kZXggaXMgb3V0IG9mIGJvdW5kcyBhbiBlcnJvciB3aWxsIGJlIHRocm93blxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLkRpc3BsYXlPYmplY3R9IGNoaWxkIC0gVGhlIGNoaWxkIHRvIGFkZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCB0byBwbGFjZSB0aGUgY2hpbGQgaW5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLkRpc3BsYXlPYmplY3R9IFRoZSBjaGlsZCB0aGF0IHdhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLmFkZENoaWxkQXQgPSBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNoaWxkICsgXCJhZGRDaGlsZEF0OiBUaGUgaW5kZXggXCIgKyBpbmRleCArIFwiIHN1cHBsaWVkIGlzIG91dCBvZiBib3VuZHMgXCIgKyB0aGlzLmNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkLnBhcmVudCkge1xuICAgICAgICAgICAgY2hpbGQucGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICB0aGlzLnNvcnREaXJ0eSA9IHRydWU7XG4gICAgICAgIC8vIGVuc3VyZSBjaGlsZCB0cmFuc2Zvcm0gd2lsbCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgICAgY2hpbGQudHJhbnNmb3JtLl9wYXJlbnRJRCA9IC0xO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgY2hpbGQpO1xuICAgICAgICAvLyBlbnN1cmUgYm91bmRzIHdpbGwgYmUgcmVjYWxjdWxhdGVkXG4gICAgICAgIHRoaXMuX2JvdW5kc0lEKys7XG4gICAgICAgIC8vIFRPRE8gLSBsZXRzIGVpdGhlciBkbyBhbGwgY2FsbGJhY2tzIG9yIGFsbCBldmVudHMuLiBub3QgYm90aCFcbiAgICAgICAgdGhpcy5vbkNoaWxkcmVuQ2hhbmdlKGluZGV4KTtcbiAgICAgICAgY2hpbGQuZW1pdCgnYWRkZWQnLCB0aGlzKTtcbiAgICAgICAgdGhpcy5lbWl0KCdjaGlsZEFkZGVkJywgY2hpbGQsIHRoaXMsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3dhcHMgdGhlIHBvc2l0aW9uIG9mIDIgRGlzcGxheSBPYmplY3RzIHdpdGhpbiB0aGlzIGNvbnRhaW5lci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIEZpcnN0IGRpc3BsYXkgb2JqZWN0IHRvIHN3YXBcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gY2hpbGQyIC0gU2Vjb25kIGRpc3BsYXkgb2JqZWN0IHRvIHN3YXBcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnN3YXBDaGlsZHJlbiA9IGZ1bmN0aW9uIChjaGlsZCwgY2hpbGQyKSB7XG4gICAgICAgIGlmIChjaGlsZCA9PT0gY2hpbGQyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4MSA9IHRoaXMuZ2V0Q2hpbGRJbmRleChjaGlsZCk7XG4gICAgICAgIHZhciBpbmRleDIgPSB0aGlzLmdldENoaWxkSW5kZXgoY2hpbGQyKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpbmRleDFdID0gY2hpbGQyO1xuICAgICAgICB0aGlzLmNoaWxkcmVuW2luZGV4Ml0gPSBjaGlsZDtcbiAgICAgICAgdGhpcy5vbkNoaWxkcmVuQ2hhbmdlKGluZGV4MSA8IGluZGV4MiA/IGluZGV4MSA6IGluZGV4Mik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpbmRleCBwb3NpdGlvbiBvZiBhIGNoaWxkIERpc3BsYXlPYmplY3QgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5EaXNwbGF5T2JqZWN0fSBjaGlsZCAtIFRoZSBEaXNwbGF5T2JqZWN0IGluc3RhbmNlIHRvIGlkZW50aWZ5XG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgaW5kZXggcG9zaXRpb24gb2YgdGhlIGNoaWxkIGRpc3BsYXkgb2JqZWN0IHRvIGlkZW50aWZ5XG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRDaGlsZEluZGV4ID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN1cHBsaWVkIERpc3BsYXlPYmplY3QgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBjYWxsZXInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBwb3NpdGlvbiBvZiBhbiBleGlzdGluZyBjaGlsZCBpbiB0aGUgZGlzcGxheSBvYmplY3QgY29udGFpbmVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BJWEkuRGlzcGxheU9iamVjdH0gY2hpbGQgLSBUaGUgY2hpbGQgRGlzcGxheU9iamVjdCBpbnN0YW5jZSBmb3Igd2hpY2ggeW91IHdhbnQgdG8gY2hhbmdlIHRoZSBpbmRleCBudW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgcmVzdWx0aW5nIGluZGV4IG51bWJlciBmb3IgdGhlIGNoaWxkIGRpc3BsYXkgb2JqZWN0XG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5zZXRDaGlsZEluZGV4ID0gZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgaW5kZXggXCIgKyBpbmRleCArIFwiIHN1cHBsaWVkIGlzIG91dCBvZiBib3VuZHMgXCIgKyB0aGlzLmNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHRoaXMuZ2V0Q2hpbGRJbmRleChjaGlsZCk7XG4gICAgICAgIHJlbW92ZUl0ZW1zKHRoaXMuY2hpbGRyZW4sIGN1cnJlbnRJbmRleCwgMSk7IC8vIHJlbW92ZSBmcm9tIG9sZCBwb3NpdGlvblxuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgY2hpbGQpOyAvLyBhZGQgYXQgbmV3IHBvc2l0aW9uXG4gICAgICAgIHRoaXMub25DaGlsZHJlbkNoYW5nZShpbmRleCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjaGlsZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggdG8gZ2V0IHRoZSBjaGlsZCBhdFxuICAgICAqIEByZXR1cm4ge1BJWEkuRGlzcGxheU9iamVjdH0gVGhlIGNoaWxkIGF0IHRoZSBnaXZlbiBpbmRleCwgaWYgYW55LlxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0Q2hpbGRBdCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJnZXRDaGlsZEF0OiBJbmRleCAoXCIgKyBpbmRleCArIFwiKSBkb2VzIG5vdCBleGlzdC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5baW5kZXhdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBvbmUgb3IgbW9yZSBjaGlsZHJlbiBmcm9tIHRoZSBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gey4uLlBJWEkuRGlzcGxheU9iamVjdH0gY2hpbGRyZW4gLSBUaGUgRGlzcGxheU9iamVjdChzKSB0byByZW1vdmVcbiAgICAgKiBAcmV0dXJuIHtQSVhJLkRpc3BsYXlPYmplY3R9IFRoZSBmaXJzdCBjaGlsZCB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGNoaWxkcmVuW19pXSA9IGFyZ3VtZW50cyQxW19pXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBhcmd1bWVudCB3ZSBjYW4gYnlwYXNzIGxvb3BpbmcgdGhyb3VnaCB0aGUgdGhlbVxuICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBhcmd1bWVudHMgcHJvcGVydHkgYW5kIHJlbW92ZSBhbGwgY2hpbGRyZW5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGNoaWxkKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIC8vIGVuc3VyZSBjaGlsZCB0cmFuc2Zvcm0gd2lsbCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgICAgICAgIGNoaWxkLnRyYW5zZm9ybS5fcGFyZW50SUQgPSAtMTtcbiAgICAgICAgICAgIHJlbW92ZUl0ZW1zKHRoaXMuY2hpbGRyZW4sIGluZGV4LCAxKTtcbiAgICAgICAgICAgIC8vIGVuc3VyZSBib3VuZHMgd2lsbCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kc0lEKys7XG4gICAgICAgICAgICAvLyBUT0RPIC0gbGV0cyBlaXRoZXIgZG8gYWxsIGNhbGxiYWNrcyBvciBhbGwgZXZlbnRzLi4gbm90IGJvdGghXG4gICAgICAgICAgICB0aGlzLm9uQ2hpbGRyZW5DaGFuZ2UoaW5kZXgpO1xuICAgICAgICAgICAgY2hpbGQuZW1pdCgncmVtb3ZlZCcsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjaGlsZFJlbW92ZWQnLCBjaGlsZCwgdGhpcywgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZHJlblswXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjaGlsZCBmcm9tIHRoZSBzcGVjaWZpZWQgaW5kZXggcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggdG8gZ2V0IHRoZSBjaGlsZCBmcm9tXG4gICAgICogQHJldHVybiB7UElYSS5EaXNwbGF5T2JqZWN0fSBUaGUgY2hpbGQgdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlbW92ZUNoaWxkQXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5nZXRDaGlsZEF0KGluZGV4KTtcbiAgICAgICAgLy8gZW5zdXJlIGNoaWxkIHRyYW5zZm9ybSB3aWxsIGJlIHJlY2FsY3VsYXRlZC4uXG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG51bGw7XG4gICAgICAgIGNoaWxkLnRyYW5zZm9ybS5fcGFyZW50SUQgPSAtMTtcbiAgICAgICAgcmVtb3ZlSXRlbXModGhpcy5jaGlsZHJlbiwgaW5kZXgsIDEpO1xuICAgICAgICAvLyBlbnN1cmUgYm91bmRzIHdpbGwgYmUgcmVjYWxjdWxhdGVkXG4gICAgICAgIHRoaXMuX2JvdW5kc0lEKys7XG4gICAgICAgIC8vIFRPRE8gLSBsZXRzIGVpdGhlciBkbyBhbGwgY2FsbGJhY2tzIG9yIGFsbCBldmVudHMuLiBub3QgYm90aCFcbiAgICAgICAgdGhpcy5vbkNoaWxkcmVuQ2hhbmdlKGluZGV4KTtcbiAgICAgICAgY2hpbGQuZW1pdCgncmVtb3ZlZCcsIHRoaXMpO1xuICAgICAgICB0aGlzLmVtaXQoJ2NoaWxkUmVtb3ZlZCcsIGNoaWxkLCB0aGlzLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGNoaWxkcmVuIGZyb20gdGhpcyBjb250YWluZXIgdGhhdCBhcmUgd2l0aGluIHRoZSBiZWdpbiBhbmQgZW5kIGluZGV4ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2JlZ2luSW5kZXg9MF0gLSBUaGUgYmVnaW5uaW5nIHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kSW5kZXg9dGhpcy5jaGlsZHJlbi5sZW5ndGhdIC0gVGhlIGVuZGluZyBwb3NpdGlvbi4gRGVmYXVsdCB2YWx1ZSBpcyBzaXplIG9mIHRoZSBjb250YWluZXIuXG4gICAgICogQHJldHVybnMge1BJWEkuRGlzcGxheU9iamVjdFtdfSBMaXN0IG9mIHJlbW92ZWQgY2hpbGRyZW5cbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlbW92ZUNoaWxkcmVuID0gZnVuY3Rpb24gKGJlZ2luSW5kZXgsIGVuZEluZGV4KSB7XG4gICAgICAgIGlmIChiZWdpbkluZGV4ID09PSB2b2lkIDApIHsgYmVnaW5JbmRleCA9IDA7IH1cbiAgICAgICAgaWYgKGVuZEluZGV4ID09PSB2b2lkIDApIHsgZW5kSW5kZXggPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgfVxuICAgICAgICB2YXIgYmVnaW4gPSBiZWdpbkluZGV4O1xuICAgICAgICB2YXIgZW5kID0gZW5kSW5kZXg7XG4gICAgICAgIHZhciByYW5nZSA9IGVuZCAtIGJlZ2luO1xuICAgICAgICB2YXIgcmVtb3ZlZDtcbiAgICAgICAgaWYgKHJhbmdlID4gMCAmJiByYW5nZSA8PSBlbmQpIHtcbiAgICAgICAgICAgIHJlbW92ZWQgPSB0aGlzLmNoaWxkcmVuLnNwbGljZShiZWdpbiwgcmFuZ2UpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdmVkLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZFtpXS5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkW2ldLnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVkW2ldLnRyYW5zZm9ybS5fcGFyZW50SUQgPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ib3VuZHNJRCsrO1xuICAgICAgICAgICAgdGhpcy5vbkNoaWxkcmVuQ2hhbmdlKGJlZ2luSW5kZXgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdmVkLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZFtpXS5lbWl0KCdyZW1vdmVkJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdjaGlsZFJlbW92ZWQnLCByZW1vdmVkW2ldLCB0aGlzLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZW1vdmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJhbmdlID09PSAwICYmIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3JlbW92ZUNoaWxkcmVuOiBudW1lcmljIHZhbHVlcyBhcmUgb3V0c2lkZSB0aGUgYWNjZXB0YWJsZSByYW5nZS4nKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNvcnRzIGNoaWxkcmVuIGJ5IHpJbmRleC4gUHJldmlvdXMgb3JkZXIgaXMgbWFudGFpbmVkIGZvciAyIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUgekluZGV4LlxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuc29ydENoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc29ydFJlcXVpcmVkID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICBjaGlsZC5fbGFzdFNvcnRlZEluZGV4ID0gaTtcbiAgICAgICAgICAgIGlmICghc29ydFJlcXVpcmVkICYmIGNoaWxkLnpJbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHNvcnRSZXF1aXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvcnRSZXF1aXJlZCAmJiB0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc29ydChzb3J0Q2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc29ydERpcnR5ID0gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSB0cmFuc2Zvcm0gb24gYWxsIGNoaWxkcmVuIG9mIHRoaXMgY29udGFpbmVyIGZvciByZW5kZXJpbmdcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLnVwZGF0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc29ydGFibGVDaGlsZHJlbiAmJiB0aGlzLnNvcnREaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5zb3J0Q2hpbGRyZW4oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ib3VuZHNJRCsrO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS51cGRhdGVUcmFuc2Zvcm0odGhpcy5wYXJlbnQudHJhbnNmb3JtKTtcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgcmVuZGVyIGZsYWdzLCBob3cgdG8gcHJvY2VzcyBzdHVmZiBoZXJlXG4gICAgICAgIHRoaXMud29ybGRBbHBoYSA9IHRoaXMuYWxwaGEgKiB0aGlzLnBhcmVudC53b3JsZEFscGhhO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgajsgKytpKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVjYWxjdWxhdGVzIHRoZSBib3VuZHMgb2YgdGhlIGNvbnRhaW5lci5cbiAgICAgKlxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuY2FsY3VsYXRlQm91bmRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9ib3VuZHMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlQm91bmRzKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmICghY2hpbGQudmlzaWJsZSB8fCAhY2hpbGQucmVuZGVyYWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGQuY2FsY3VsYXRlQm91bmRzKCk7XG4gICAgICAgICAgICAvLyBUT0RPOiBmaWx0ZXIrbWFzaywgbmVlZCB0byBtYXNrIGJvdGggc29tZWhvd1xuICAgICAgICAgICAgaWYgKGNoaWxkLl9tYXNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tPYmplY3QgPSAoY2hpbGQuX21hc2subWFza09iamVjdCB8fCBjaGlsZC5fbWFzayk7XG4gICAgICAgICAgICAgICAgbWFza09iamVjdC5jYWxjdWxhdGVCb3VuZHMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ib3VuZHMuYWRkQm91bmRzTWFzayhjaGlsZC5fYm91bmRzLCBtYXNrT2JqZWN0Ll9ib3VuZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQuZmlsdGVyQXJlYSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kcy5hZGRCb3VuZHNBcmVhKGNoaWxkLl9ib3VuZHMsIGNoaWxkLmZpbHRlckFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYm91bmRzLmFkZEJvdW5kcyhjaGlsZC5fYm91bmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ib3VuZHMudXBkYXRlSUQgPSB0aGlzLl9ib3VuZHNJRDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgbG9jYWwgYm91bmRzIG9mIHRoZSBkaXNwbGF5T2JqZWN0IGFzIGEgcmVjdGFuZ2xlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UElYSS5SZWN0YW5nbGV9IFtyZWN0XSAtIE9wdGlvbmFsIHJlY3RhbmdsZSB0byBzdG9yZSB0aGUgcmVzdWx0IG9mIHRoZSBib3VuZHMgY2FsY3VsYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbc2tpcENoaWxkcmVuVXBkYXRlPWZhbHNlXSAtIFNldHRpbmcgdG8gYHRydWVgIHdpbGwgc3RvcCByZS1jYWxjdWxhdGlvbiBvZiBjaGlsZHJlbiB0cmFuc2Zvcm1zLFxuICAgICAqICBpdCB3YXMgZGVmYXVsdCBiZWhhdmlvdXIgb2YgcGl4aSA0LjAtNS4yIGFuZCBjYXVzZWQgbWFueSBwcm9ibGVtcyB0byB1c2Vycy5cbiAgICAgKiBAcmV0dXJuIHtQSVhJLlJlY3RhbmdsZX0gVGhlIHJlY3Rhbmd1bGFyIGJvdW5kaW5nIGFyZWEuXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRMb2NhbEJvdW5kcyA9IGZ1bmN0aW9uIChyZWN0LCBza2lwQ2hpbGRyZW5VcGRhdGUpIHtcbiAgICAgICAgaWYgKHNraXBDaGlsZHJlblVwZGF0ZSA9PT0gdm9pZCAwKSB7IHNraXBDaGlsZHJlblVwZGF0ZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciByZXN1bHQgPSBfc3VwZXIucHJvdG90eXBlLmdldExvY2FsQm91bmRzLmNhbGwodGhpcywgcmVjdCk7XG4gICAgICAgIGlmICghc2tpcENoaWxkcmVuVXBkYXRlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgajsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlY2FsY3VsYXRlcyB0aGUgYm91bmRzIG9mIHRoZSBvYmplY3QuIE92ZXJyaWRlIHRoaXMgdG9cbiAgICAgKiBjYWxjdWxhdGUgdGhlIGJvdW5kcyBvZiB0aGUgc3BlY2lmaWMgb2JqZWN0IChub3QgaW5jbHVkaW5nIGNoaWxkcmVuKS5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLl9jYWxjdWxhdGVCb3VuZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEZJTEwgSU4vL1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgb2JqZWN0IHVzaW5nIHRoZSBXZWJHTCByZW5kZXJlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlclxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlcmVyKSB7XG4gICAgICAgIC8vIGlmIHRoZSBvYmplY3QgaXMgbm90IHZpc2libGUgb3IgdGhlIGFscGhhIGlzIDAgdGhlbiBubyBuZWVkIHRvIHJlbmRlciB0aGlzIGVsZW1lbnRcbiAgICAgICAgaWYgKCF0aGlzLnZpc2libGUgfHwgdGhpcy53b3JsZEFscGhhIDw9IDAgfHwgIXRoaXMucmVuZGVyYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvIGEgcXVpY2sgY2hlY2sgdG8gc2VlIGlmIHRoaXMgZWxlbWVudCBoYXMgYSBtYXNrIG9yIGEgZmlsdGVyLlxuICAgICAgICBpZiAodGhpcy5fbWFzayB8fCAodGhpcy5maWx0ZXJzICYmIHRoaXMuZmlsdGVycy5sZW5ndGgpKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckFkdmFuY2VkKHJlbmRlcmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcihyZW5kZXJlcik7XG4gICAgICAgICAgICAvLyBzaW1wbGUgcmVuZGVyIGNoaWxkcmVuIVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGo7ICsraSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baV0ucmVuZGVyKHJlbmRlcmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBvYmplY3QgdXNpbmcgdGhlIFdlYkdMIHJlbmRlcmVyIGFuZCBhZHZhbmNlZCBmZWF0dXJlcy5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BJWEkuUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5yZW5kZXJBZHZhbmNlZCA9IGZ1bmN0aW9uIChyZW5kZXJlcikge1xuICAgICAgICByZW5kZXJlci5iYXRjaC5mbHVzaCgpO1xuICAgICAgICB2YXIgZmlsdGVycyA9IHRoaXMuZmlsdGVycztcbiAgICAgICAgdmFyIG1hc2sgPSB0aGlzLl9tYXNrO1xuICAgICAgICAvLyBwdXNoIGZpbHRlciBmaXJzdCBhcyB3ZSBuZWVkIHRvIGVuc3VyZSB0aGUgc3RlbmNpbCBidWZmZXIgaXMgY29ycmVjdCBmb3IgYW55IG1hc2tpbmdcbiAgICAgICAgaWYgKGZpbHRlcnMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZW5hYmxlZEZpbHRlcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVkRmlsdGVycyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZW5hYmxlZEZpbHRlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJzW2ldLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5hYmxlZEZpbHRlcnMucHVzaChmaWx0ZXJzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fZW5hYmxlZEZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuZmlsdGVyLnB1c2godGhpcywgdGhpcy5fZW5hYmxlZEZpbHRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXNrKSB7XG4gICAgICAgICAgICByZW5kZXJlci5tYXNrLnB1c2godGhpcywgdGhpcy5fbWFzayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIHRoaXMgb2JqZWN0IHRvIHRoZSBiYXRjaCwgb25seSByZW5kZXJlZCBpZiBpdCBoYXMgYSB0ZXh0dXJlLlxuICAgICAgICB0aGlzLl9yZW5kZXIocmVuZGVyZXIpO1xuICAgICAgICAvLyBub3cgbG9vcCB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgbWFrZSBzdXJlIHRoZXkgZ2V0IHJlbmRlcmVkXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baV0ucmVuZGVyKHJlbmRlcmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJlci5iYXRjaC5mbHVzaCgpO1xuICAgICAgICBpZiAobWFzaykge1xuICAgICAgICAgICAgcmVuZGVyZXIubWFzay5wb3AodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbHRlcnMgJiYgdGhpcy5fZW5hYmxlZEZpbHRlcnMgJiYgdGhpcy5fZW5hYmxlZEZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZW5kZXJlci5maWx0ZXIucG9wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRvIGJlIG92ZXJyaWRkZW4gYnkgdGhlIHN1YmNsYXNzZXMuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtQSVhJLlJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlclxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uIChfcmVuZGVyZXIpIHtcbiAgICAgICAgLy8gdGhpcyBpcyB3aGVyZSBjb250ZW50IGl0c2VsZiBnZXRzIHJlbmRlcmVkLi4uXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBpbnRlcm5hbCByZWZlcmVuY2VzIGFuZCBsaXN0ZW5lcnMgYXMgd2VsbCBhcyByZW1vdmVzIGNoaWxkcmVuIGZyb20gdGhlIGRpc3BsYXkgbGlzdC5cbiAgICAgKiBEbyBub3QgdXNlIGEgQ29udGFpbmVyIGFmdGVyIGNhbGxpbmcgYGRlc3Ryb3lgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R8Ym9vbGVhbn0gW29wdGlvbnNdIC0gT3B0aW9ucyBwYXJhbWV0ZXIuIEEgYm9vbGVhbiB3aWxsIGFjdCBhcyBpZiBhbGwgb3B0aW9uc1xuICAgICAqICBoYXZlIGJlZW4gc2V0IHRvIHRoYXQgdmFsdWVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoaWxkcmVuPWZhbHNlXSAtIGlmIHNldCB0byB0cnVlLCBhbGwgdGhlIGNoaWxkcmVuIHdpbGwgaGF2ZSB0aGVpciBkZXN0cm95XG4gICAgICogIG1ldGhvZCBjYWxsZWQgYXMgd2VsbC4gJ29wdGlvbnMnIHdpbGwgYmUgcGFzc2VkIG9uIHRvIHRob3NlIGNhbGxzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudGV4dHVyZT1mYWxzZV0gLSBPbmx5IHVzZWQgZm9yIGNoaWxkIFNwcml0ZXMgaWYgb3B0aW9ucy5jaGlsZHJlbiBpcyBzZXQgdG8gdHJ1ZVxuICAgICAqICBTaG91bGQgaXQgZGVzdHJveSB0aGUgdGV4dHVyZSBvZiB0aGUgY2hpbGQgc3ByaXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5iYXNlVGV4dHVyZT1mYWxzZV0gLSBPbmx5IHVzZWQgZm9yIGNoaWxkIFNwcml0ZXMgaWYgb3B0aW9ucy5jaGlsZHJlbiBpcyBzZXQgdG8gdHJ1ZVxuICAgICAqICBTaG91bGQgaXQgZGVzdHJveSB0aGUgYmFzZSB0ZXh0dXJlIG9mIHRoZSBjaGlsZCBzcHJpdGVcbiAgICAgKi9cbiAgICBDb250YWluZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zb3J0RGlydHkgPSBmYWxzZTtcbiAgICAgICAgdmFyIGRlc3Ryb3lDaGlsZHJlbiA9IHR5cGVvZiBvcHRpb25zID09PSAnYm9vbGVhbicgPyBvcHRpb25zIDogb3B0aW9ucyAmJiBvcHRpb25zLmNoaWxkcmVuO1xuICAgICAgICB2YXIgb2xkQ2hpbGRyZW4gPSB0aGlzLnJlbW92ZUNoaWxkcmVuKDAsIHRoaXMuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgICAgaWYgKGRlc3Ryb3lDaGlsZHJlbikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGRDaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIG9sZENoaWxkcmVuW2ldLmRlc3Ryb3kob3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb250YWluZXIucHJvdG90eXBlLCBcIndpZHRoXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgQ29udGFpbmVyLCBzZXR0aW5nIHRoaXMgd2lsbCBhY3R1YWxseSBtb2RpZnkgdGhlIHNjYWxlIHRvIGFjaGlldmUgdGhlIHZhbHVlIHNldFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYWxlLnggKiB0aGlzLmdldExvY2FsQm91bmRzKCkud2lkdGg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldExvY2FsQm91bmRzKCkud2lkdGg7XG4gICAgICAgICAgICBpZiAod2lkdGggIT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlLnggPSB2YWx1ZSAvIHdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZS54ID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3dpZHRoID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29udGFpbmVyLnByb3RvdHlwZSwgXCJoZWlnaHRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGhlaWdodCBvZiB0aGUgQ29udGFpbmVyLCBzZXR0aW5nIHRoaXMgd2lsbCBhY3R1YWxseSBtb2RpZnkgdGhlIHNjYWxlIHRvIGFjaGlldmUgdGhlIHZhbHVlIHNldFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYWxlLnkgKiB0aGlzLmdldExvY2FsQm91bmRzKCkuaGVpZ2h0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuZ2V0TG9jYWxCb3VuZHMoKS5oZWlnaHQ7XG4gICAgICAgICAgICBpZiAoaGVpZ2h0ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZS55ID0gdmFsdWUgLyBoZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlLnkgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faGVpZ2h0ID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQ29udGFpbmVyO1xufShEaXNwbGF5T2JqZWN0KSk7XG4vKipcbiAqIENvbnRhaW5lciBkZWZhdWx0IHVwZGF0ZVRyYW5zZm9ybSwgZG9lcyB1cGRhdGUgY2hpbGRyZW4gb2YgY29udGFpbmVyLlxuICogV2lsbCBjcmFzaCBpZiB0aGVyZSdzIG5vIHBhcmVudCBlbGVtZW50LlxuICpcbiAqIEBtZW1iZXJvZiBQSVhJLkNvbnRhaW5lciNcbiAqIEBmdW5jdGlvbiBjb250YWluZXJVcGRhdGVUcmFuc2Zvcm1cbiAqL1xuQ29udGFpbmVyLnByb3RvdHlwZS5jb250YWluZXJVcGRhdGVUcmFuc2Zvcm0gPSBDb250YWluZXIucHJvdG90eXBlLnVwZGF0ZVRyYW5zZm9ybTtcblxuZXhwb3J0IHsgQm91bmRzLCBDb250YWluZXIsIERpc3BsYXlPYmplY3QsIFRlbXBvcmFyeURpc3BsYXlPYmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3BsYXkuZXMuanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9