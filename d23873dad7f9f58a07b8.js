(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\@pixi\\spritesheet\\lib\\spritesheet.es"],{"./node_modules/@pixi/spritesheet/lib/spritesheet.es.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{Spritesheet:()=>n,SpritesheetLoader:()=>h});var r=s("./node_modules/@pixi/math/lib/math.es.js"),i=s("./node_modules/@pixi/core/lib/core.es.js"),o=s("./node_modules/@pixi/utils/lib/utils.es.js"),a=s("./node_modules/@pixi/loaders/lib/loaders.es.js"),n=function(){function e(e,t,s){void 0===s&&(s=null),this._texture=e instanceof i.Texture?e:null,this.baseTexture=e instanceof i.BaseTexture?e:this._texture.baseTexture,this.textures={},this.animations={},this.data=t;var r=this.baseTexture.resource;this.resolution=this._updateResolution(s||(r?r.url:null)),this._frames=this.data.frames,this._frameKeys=Object.keys(this._frames),this._batchIndex=0,this._callback=null}return e.prototype._updateResolution=function(e){void 0===e&&(e=null);var t=this.data.meta.scale,s=(0,o.getResolutionOfUrl)(e,null);return null===s&&(s=void 0!==t?parseFloat(t):1),1!==s&&this.baseTexture.setResolution(s),s},e.prototype.parse=function(t){this._batchIndex=0,this._callback=t,this._frameKeys.length<=e.BATCH_SIZE?(this._processFrames(0),this._processAnimations(),this._parseComplete()):this._nextBatch()},e.prototype._processFrames=function(t){for(var s=t,o=e.BATCH_SIZE;s-t<o&&s<this._frameKeys.length;){var a=this._frameKeys[s],n=this._frames[a],h=n.frame;if(h){var l=null,u=null,c=!1!==n.trimmed&&n.sourceSize?n.sourceSize:n.frame,d=new r.Rectangle(0,0,Math.floor(c.w)/this.resolution,Math.floor(c.h)/this.resolution);l=n.rotated?new r.Rectangle(Math.floor(h.x)/this.resolution,Math.floor(h.y)/this.resolution,Math.floor(h.h)/this.resolution,Math.floor(h.w)/this.resolution):new r.Rectangle(Math.floor(h.x)/this.resolution,Math.floor(h.y)/this.resolution,Math.floor(h.w)/this.resolution,Math.floor(h.h)/this.resolution),!1!==n.trimmed&&n.spriteSourceSize&&(u=new r.Rectangle(Math.floor(n.spriteSourceSize.x)/this.resolution,Math.floor(n.spriteSourceSize.y)/this.resolution,Math.floor(h.w)/this.resolution,Math.floor(h.h)/this.resolution)),this.textures[a]=new i.Texture(this.baseTexture,l,d,u,n.rotated?2:0,n.anchor),i.Texture.addToCache(this.textures[a],a)}s++}},e.prototype._processAnimations=function(){var e=this.data.animations||{};for(var t in e){this.animations[t]=[];for(var s=0;s<e[t].length;s++){var r=e[t][s];this.animations[t].push(this.textures[r])}}},e.prototype._parseComplete=function(){var e=this._callback;this._callback=null,this._batchIndex=0,e.call(this,this.textures)},e.prototype._nextBatch=function(){var t=this;this._processFrames(this._batchIndex*e.BATCH_SIZE),this._batchIndex++,setTimeout((function(){t._batchIndex*e.BATCH_SIZE<t._frameKeys.length?t._nextBatch():(t._processAnimations(),t._parseComplete())}),0)},e.prototype.destroy=function(e){var t;for(var s in void 0===e&&(e=!1),this.textures)this.textures[s].destroy();this._frames=null,this._frameKeys=null,this.data=null,this.textures=null,e&&(null===(t=this._texture)||void 0===t||t.destroy(),this.baseTexture.destroy()),this._texture=null,this.baseTexture=null},e.BATCH_SIZE=1e3,e}(),h=function(){function e(){}return e.use=function(t,s){var r=this,i=t.name+"_image";if(t.data&&t.type===a.LoaderResource.TYPE.JSON&&t.data.frames&&!r.resources[i]){var o={crossOrigin:t.crossOrigin,metadata:t.metadata.imageMetadata,parentResource:t},h=e.getResourcePath(t,r.baseUrl);r.add(i,h,o,(function(e){if(e.error)s(e.error);else{var r=new n(e.texture,t.data,t.url);r.parse((function(){t.spritesheet=r,t.textures=r.textures,s()}))}}))}else s()},e.getResourcePath=function(e,t){return e.isDataUrl?e.data.meta.image:o.url.resolve(e.url.replace(t,""),e.data.meta.image)},e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,