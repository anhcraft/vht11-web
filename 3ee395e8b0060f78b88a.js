(self.webpackChunkvht11=self.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\@pixi\\mixin-cache-as-bitmap\\lib\\mixin-cache-as-bitmap.es"],{"./node_modules/@pixi/mixin-cache-as-bitmap/lib/mixin-cache-as-bitmap.es.js":(t,a,e)=>{"use strict";e.r(a),e.d(a,{CacheData:()=>l});var i=e("./node_modules/@pixi/core/lib/core.es.js"),s=e("./node_modules/@pixi/sprite/lib/sprite.es.js"),r=e("./node_modules/@pixi/display/lib/display.es.js"),n=e("./node_modules/@pixi/math/lib/math.es.js"),h=e("./node_modules/@pixi/utils/lib/utils.es.js"),o=e("./node_modules/@pixi/settings/lib/settings.es.js"),c=new n.Matrix;r.DisplayObject.prototype._cacheAsBitmap=!1,r.DisplayObject.prototype._cacheData=null;var l=function(){this.textureCacheId=null,this.originalRender=null,this.originalRenderCanvas=null,this.originalCalculateBounds=null,this.originalGetLocalBounds=null,this.originalUpdateTransform=null,this.originalDestroy=null,this.originalMask=null,this.originalFilterArea=null,this.originalContainsPoint=null,this.sprite=null};Object.defineProperties(r.DisplayObject.prototype,{cacheAsBitmap:{get:function(){return this._cacheAsBitmap},set:function(t){var a;this._cacheAsBitmap!==t&&(this._cacheAsBitmap=t,t?(this._cacheData||(this._cacheData=new l),(a=this._cacheData).originalRender=this.render,a.originalRenderCanvas=this.renderCanvas,a.originalUpdateTransform=this.updateTransform,a.originalCalculateBounds=this.calculateBounds,a.originalGetLocalBounds=this.getLocalBounds,a.originalDestroy=this.destroy,a.originalContainsPoint=this.containsPoint,a.originalMask=this._mask,a.originalFilterArea=this.filterArea,this.render=this._renderCached,this.renderCanvas=this._renderCachedCanvas,this.destroy=this._cacheAsBitmapDestroy):((a=this._cacheData).sprite&&this._destroyCachedDisplayObject(),this.render=a.originalRender,this.renderCanvas=a.originalRenderCanvas,this.calculateBounds=a.originalCalculateBounds,this.getLocalBounds=a.originalGetLocalBounds,this.destroy=a.originalDestroy,this.updateTransform=a.originalUpdateTransform,this.containsPoint=a.originalContainsPoint,this._mask=a.originalMask,this.filterArea=a.originalFilterArea))}}}),r.DisplayObject.prototype._renderCached=function(t){!this.visible||this.worldAlpha<=0||!this.renderable||(this._initCachedDisplayObject(t),this._cacheData.sprite.transform._worldID=this.transform._worldID,this._cacheData.sprite.worldAlpha=this.worldAlpha,this._cacheData.sprite._render(t))},r.DisplayObject.prototype._initCachedDisplayObject=function(t){if(!this._cacheData||!this._cacheData.sprite){var a=this.alpha;this.alpha=1,t.batch.flush();var e=this.getLocalBounds(null,!0).clone();if(this.filters){var r=this.filters[0].padding;e.pad(r)}e.ceil(o.settings.RESOLUTION);var n=t.renderTexture.current,l=t.renderTexture.sourceFrame.clone(),d=t.projection.transform,p=i.RenderTexture.create({width:e.width,height:e.height}),u="cacheAsBitmap_"+(0,h.uid)();this._cacheData.textureCacheId=u,i.BaseTexture.addToCache(p.baseTexture,u),i.Texture.addToCache(p,u);var _=this.transform.localTransform.copyTo(c).invert().translate(-e.x,-e.y);this.render=this._cacheData.originalRender,t.render(this,p,!0,_,!1),t.projection.transform=d,t.renderTexture.bind(n,l),this.render=this._renderCached,this.updateTransform=this.displayObjectUpdateTransform,this.calculateBounds=this._calculateCachedBounds,this.getLocalBounds=this._getCachedLocalBounds,this._mask=null,this.filterArea=null;var m=new s.Sprite(p);m.transform.worldTransform=this.transform.worldTransform,m.anchor.x=-e.x/e.width,m.anchor.y=-e.y/e.height,m.alpha=a,m._bounds=this._bounds,this._cacheData.sprite=m,this.transform._parentID=-1,this.parent?this.updateTransform():(this.enableTempParent(),this.updateTransform(),this.disableTempParent(null)),this.containsPoint=m.containsPoint.bind(m)}},r.DisplayObject.prototype._renderCachedCanvas=function(t){!this.visible||this.worldAlpha<=0||!this.renderable||(this._initCachedDisplayObjectCanvas(t),this._cacheData.sprite.worldAlpha=this.worldAlpha,this._cacheData.sprite._renderCanvas(t))},r.DisplayObject.prototype._initCachedDisplayObjectCanvas=function(t){if(!this._cacheData||!this._cacheData.sprite){var a=this.getLocalBounds(null,!0),e=this.alpha;this.alpha=1;var r=t.context,n=t._projTransform;a.ceil(o.settings.RESOLUTION);var l=i.RenderTexture.create({width:a.width,height:a.height}),d="cacheAsBitmap_"+(0,h.uid)();this._cacheData.textureCacheId=d,i.BaseTexture.addToCache(l.baseTexture,d),i.Texture.addToCache(l,d);var p=c;this.transform.localTransform.copyTo(p),p.invert(),p.tx-=a.x,p.ty-=a.y,this.renderCanvas=this._cacheData.originalRenderCanvas,t.render(this,l,!0,p,!1),t.context=r,t._projTransform=n,this.renderCanvas=this._renderCachedCanvas,this.updateTransform=this.displayObjectUpdateTransform,this.calculateBounds=this._calculateCachedBounds,this.getLocalBounds=this._getCachedLocalBounds,this._mask=null,this.filterArea=null;var u=new s.Sprite(l);u.transform.worldTransform=this.transform.worldTransform,u.anchor.x=-a.x/a.width,u.anchor.y=-a.y/a.height,u.alpha=e,u._bounds=this._bounds,this._cacheData.sprite=u,this.transform._parentID=-1,this.parent?this.updateTransform():(this.parent=t._tempDisplayObjectParent,this.updateTransform(),this.parent=null),this.containsPoint=u.containsPoint.bind(u)}},r.DisplayObject.prototype._calculateCachedBounds=function(){this._bounds.clear(),this._cacheData.sprite.transform._worldID=this.transform._worldID,this._cacheData.sprite._calculateBounds(),this._bounds.updateID=this._boundsID},r.DisplayObject.prototype._getCachedLocalBounds=function(){return this._cacheData.sprite.getLocalBounds(null)},r.DisplayObject.prototype._destroyCachedDisplayObject=function(){this._cacheData.sprite._texture.destroy(!0),this._cacheData.sprite=null,i.BaseTexture.removeFromCache(this._cacheData.textureCacheId),i.Texture.removeFromCache(this._cacheData.textureCacheId),this._cacheData.textureCacheId=null},r.DisplayObject.prototype._cacheAsBitmapDestroy=function(t){this.cacheAsBitmap=!1,this.destroy(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,