(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\open-simplex-noise\\lib\\index"],{"./node_modules/open-simplex-noise/lib/index.js":(r,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.makeNoise4D=n.makeNoise3D=n.makeNoise2D=void 0;var o=e("./node_modules/open-simplex-noise/lib/constants.js");function t(r,n,e){return{dx:-n-r*o.SQUISH_2D,dy:-e-r*o.SQUISH_2D,xsb:n,ysb:e}}function a(r,n,e,t){return{dx:-n-r*o.SQUISH_3D,dy:-e-r*o.SQUISH_3D,dz:-t-r*o.SQUISH_3D,xsb:n,ysb:e,zsb:t}}function D(r,n,e,t,a){return{dx:-n-r*o.SQUISH_4D,dy:-e-r*o.SQUISH_4D,dz:-t-r*o.SQUISH_4D,dw:-a-r*o.SQUISH_4D,xsb:n,ysb:e,zsb:t,wsb:a}}function i(r){var n=new Uint32Array(1);return n[0]=1664525*r[0]+1013904223,n}n.makeNoise2D=function(r){for(var n=[],e=0;e<o.p2D.length;e+=4){for(var a=o.base2D[o.p2D[e]],D=null,s=null,l=0;l<a.length;l+=3)s=t(a[l],a[l+1],a[l+2]),null===D?n[e/4]=s:D.next=s,D=s;s.next=t(o.p2D[e+1],o.p2D[e+2],o.p2D[e+3])}var p=[];for(e=0;e<o.lookupPairs2D.length;e+=2)p[o.lookupPairs2D[e]]=n[o.lookupPairs2D[e+1]];var u=new Uint8Array(256),d=new Uint8Array(256),f=new Uint8Array(256);for(e=0;e<256;e++)f[e]=e;var v=new Uint32Array(1);for(v[0]=r,v=i(i(i(v))),e=255;e>=0;e--){v=i(v);var x=new Uint32Array(1);x[0]=(v[0]+31)%(e+1),x[0]<0&&(x[0]+=e+1),u[e]=f[x[0]],d[e]=14&u[e],f[x[0]]=f[e]}return function(r,n){for(var e=(r+n)*o.STRETCH_2D,t=r+e,a=n+e,D=Math.floor(t),i=Math.floor(a),s=(D+i)*o.SQUISH_2D,l=r-(D+s),f=n-(i+s),v=t-D,x=a-i,y=v+x,b=0,U=p[v-x+1|y<<1|y+x<<2|y+v<<4];void 0!==U;U=U.next){var S=l+U.dx,h=f+U.dy,_=2-S*S-h*h;if(_>0){var w=D+U.xsb,g=i+U.ysb,k=u[255&w],c=d[k+g&255];b+=_*_*_*_*(o.gradients2D[c]*S+o.gradients2D[c+1]*h)}}return b*o.NORM_2D}},n.makeNoise3D=function(r){for(var n=[],e=0;e<o.p3D.length;e+=9){for(var t=o.base3D[o.p3D[e]],D=null,s=null,l=0;l<t.length;l+=4)s=a(t[l],t[l+1],t[l+2],t[l+3]),null===D?n[e/9]=s:D.next=s,D=s;s.next=a(o.p3D[e+1],o.p3D[e+2],o.p3D[e+3],o.p3D[e+4]),s.next.next=a(o.p3D[e+5],o.p3D[e+6],o.p3D[e+7],o.p3D[e+8])}var p=[];for(e=0;e<o.lookupPairs3D.length;e+=2)p[o.lookupPairs3D[e]]=n[o.lookupPairs3D[e+1]];var u=new Uint8Array(256),d=new Uint8Array(256),f=new Uint8Array(256);for(e=0;e<256;e++)f[e]=e;var v=new Uint32Array(1);for(v[0]=r,v=i(i(i(v))),e=255;e>=0;e--){v=i(v);var x=new Uint32Array(1);x[0]=(v[0]+31)%(e+1),x[0]<0&&(x[0]+=e+1),u[e]=f[x[0]],d[e]=u[e]%24*3,f[x[0]]=f[e]}return function(r,n,e){for(var t=(r+n+e)*o.STRETCH_3D,a=r+t,D=n+t,i=e+t,s=Math.floor(a),l=Math.floor(D),f=Math.floor(i),v=(s+l+f)*o.SQUISH_3D,x=r-(s+v),y=n-(l+v),b=e-(f+v),U=a-s,S=D-l,h=i-f,_=U+S+h,w=0,g=p[S-h+1|U-S+1<<1|U-h+1<<2|_<<3|_+h<<5|_+S<<7|_+U<<9];void 0!==g;g=g.next){var k=x+g.dx,c=y+g.dy,A=b+g.dz,H=2-k*k-c*c-A*A;if(H>0){var I=s+g.xsb,M=l+g.ysb,m=f+g.zsb,Q=u[255&I],P=u[Q+M&255],N=d[P+m&255];w+=H*H*H*H*(o.gradients3D[N]*k+o.gradients3D[N+1]*c+o.gradients3D[N+2]*A)}}return w*o.NORM_3D}},n.makeNoise4D=function(r){for(var n=[],e=0;e<o.p4D.length;e+=16){for(var t=o.base4D[o.p4D[e]],a=null,s=null,l=0;l<t.length;l+=5)s=D(t[l],t[l+1],t[l+2],t[l+3],t[l+4]),null===a?n[e/16]=s:a.next=s,a=s;s.next=D(o.p4D[e+1],o.p4D[e+2],o.p4D[e+3],o.p4D[e+4],o.p4D[e+5]),s.next.next=D(o.p4D[e+6],o.p4D[e+7],o.p4D[e+8],o.p4D[e+9],o.p4D[e+10]),s.next.next.next=D(o.p4D[e+11],o.p4D[e+12],o.p4D[e+13],o.p4D[e+14],o.p4D[e+15])}var p=[];for(e=0;e<o.lookupPairs4D.length;e+=2)p[o.lookupPairs4D[e]]=n[o.lookupPairs4D[e+1]];var u=new Uint8Array(256),d=new Uint8Array(256),f=new Uint8Array(256);for(e=0;e<256;e++)f[e]=e;var v=new Uint32Array(1);for(v[0]=r,v=i(i(i(v))),e=255;e>=0;e--){v=i(v);var x=new Uint32Array(1);x[0]=(v[0]+31)%(e+1),x[0]<0&&(x[0]+=e+1),u[e]=f[x[0]],d[e]=252&u[e],f[x[0]]=f[e]}return function(r,n,e,t){for(var a=(r+n+e+t)*o.STRETCH_4D,D=r+a,i=n+a,s=e+a,l=t+a,f=Math.floor(D),v=Math.floor(i),x=Math.floor(s),y=Math.floor(l),b=(f+v+x+y)*o.SQUISH_4D,U=r-(f+b),S=n-(v+b),h=e-(x+b),_=t-(y+b),w=D-f,g=i-v,k=s-x,c=l-y,A=w+g+k+c,H=0,I=p[k-c+1|g-k+1<<1|g-c+1<<2|w-g+1<<3|w-k+1<<4|w-c+1<<5|A<<6|A+c<<8|A+k<<11|A+g<<14|A+w<<17];void 0!==I;I=I.next){var M=U+I.dx,m=S+I.dy,Q=h+I.dz,P=_+I.dw,N=2-M*M-m*m-Q*Q-P*P;if(N>0){var z=f+I.xsb,C=v+I.ysb,R=x+I.zsb,T=y+I.wsb,j=u[255&z],O=u[j+C&255],E=u[O+R&255],q=d[E+T&255];H+=N*N*N*N*(o.gradients4D[q]*M+o.gradients4D[q+1]*m+o.gradients4D[q+2]*Q+o.gradients4D[q+3]*P)}}return H*o.NORM_4D}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,