(self.webpackChunkvht11=self.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\mathjax-full\\js\\output\\svg\\Wrappers\\mtable"],{"./node_modules/mathjax-full/js/output/svg/Wrappers/mtable.js":function(t,e,i){"use strict";var s,a=this&&this.__extends||(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),o=this&&this.__read||function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var s,a,o=i.call(t),n=[];try{for(;(void 0===e||e-- >0)&&!(s=o.next()).done;)n.push(s.value)}catch(t){a={error:t}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(a)throw a.error}}return n},n=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(o(arguments[e]));return t};Object.defineProperty(e,"__esModule",{value:!0}),e.SVGmtable=void 0;var h=i("./node_modules/mathjax-full/js/output/svg/Wrapper.js"),r=i("./node_modules/mathjax-full/js/output/common/Wrappers/mtable.js"),l=i("./node_modules/mathjax-full/js/core/MmlTree/MmlNodes/mtable.js"),d=function(t){function e(e,i,s){void 0===s&&(s=null);var a=t.call(this,e,i,s)||this,o={"data-labels":!0};return a.isTop&&(o.transform="matrix(1 0 0 -1 0 0)"),a.labels=a.svg("g",o),a}return a(e,t),e.prototype.toSVG=function(t){var e=this.standardSVGnode(t);this.placeRows(e),this.handleColumnLines(e),this.handleRowLines(e),this.handleFrame(e);var i=this.handlePWidth(e);this.handleLabels(e,t,i)},e.prototype.placeRows=function(t){for(var e,i,s,a=this.node.attributes.get("equalrows"),h=this.getTableData(),r=h.H,l=h.D,d=this.getEqualRowHeight(),p=this.getRowHalfSpacing(),f=n([this.fLine],this.rLines,[this.fLine]),u=this.getBBox().h-f[0],c=0;c<this.numRows;c++){var g=this.childNodes[c];e=o(this.getRowHD(a,d,r[c],l[c]),2),g.H=e[0],g.D=e[1],i=o([p[c],p[c+1]],2),g.tSpace=i[0],g.bSpace=i[1],s=o([f[c],f[c+1]],2),g.tLine=s[0],g.bLine=s[1],g.toSVG(t),g.place(0,u-p[c]-g.H),u-=p[c]+g.H+g.D+p[c+1]+f[c+1]}},e.prototype.getRowHD=function(t,e,i,s){return t?[(e+i-s)/2,(e-i+s)/2]:[i,s]},e.prototype.handleColor=function(){t.prototype.handleColor.call(this);var e=this.adaptor.firstChild(this.element);e&&this.adaptor.setAttribute(e,"width",this.fixed(this.getWidth()))},e.prototype.handleColumnLines=function(t){if("none"!==this.node.attributes.get("columnlines")){var e=this.getColumnAttributes("columnlines");if(e)for(var i=this.getColumnHalfSpacing(),s=this.cLines,a=this.getComputedWidths(),o=this.fLine,n=0;n<e.length;n++)o+=i[n]+a[n]+i[n+1],"none"!==e[n]&&this.adaptor.append(t,this.makeVLine(o,e[n],s[n])),o+=s[n]}},e.prototype.handleRowLines=function(t){if("none"!==this.node.attributes.get("rowlines")){var e=this.getRowAttributes("rowlines");if(e)for(var i=this.node.attributes.get("equalrows"),s=this.getTableData(),a=s.H,n=s.D,h=this.getEqualRowHeight(),r=this.getRowHalfSpacing(),l=this.rLines,d=this.getBBox().h-this.fLine,p=0;p<e.length;p++){var f=o(this.getRowHD(i,h,a[p],n[p]),2),u=f[0],c=f[1];d-=r[p]+u+c+r[p+1],"none"!==e[p]&&this.adaptor.append(t,this.makeHLine(d,e[p],l[p])),d-=l[p]}}},e.prototype.handleFrame=function(t){if(this.frame){var e=this.getBBox(),i=e.h,s=e.d,a=e.w,o=this.node.attributes.get("frame");this.adaptor.append(t,this.makeFrame(a,i,s,o))}},e.prototype.handlePWidth=function(t){if(!this.pWidth)return 0;var e=this.getBBox(),i=e.w,s=e.L,a=e.R,o=s+this.pWidth+a,n=this.getAlignShift()[0],h=Math.max(this.isTop?o:0,this.container.getWrapWidth(this.containerI))-s-a,r=i-(this.pWidth>h?h:this.pWidth),l="left"===n?0:"right"===n?r:r/2;if(l){var d=this.svg("g",{},this.adaptor.childNodes(t));this.place(l,0,d),this.adaptor.append(t,d)}return l},e.prototype.lineClass=function(t){return"mjx-"+t},e.prototype.makeFrame=function(t,e,i,s){var a=this.fLine;return this.svg("rect",this.setLineThickness(a,s,{"data-frame":!0,class:this.lineClass(s),width:this.fixed(t-a),height:this.fixed(e+i-a),x:this.fixed(a/2),y:this.fixed(a/2-i)}))},e.prototype.makeVLine=function(t,e,i){var s=this.getBBox(),a=s.h,o=s.d,n="dotted"===e?i/2:0,h=this.fixed(t+i/2);return this.svg("line",this.setLineThickness(i,e,{"data-line":"v",class:this.lineClass(e),x1:h,y1:this.fixed(n-o),x2:h,y2:this.fixed(a-n)}))},e.prototype.makeHLine=function(t,e,i){var s=this.getBBox().w,a="dotted"===e?i/2:0,o=this.fixed(t-i/2);return this.svg("line",this.setLineThickness(i,e,{"data-line":"h",class:this.lineClass(e),x1:this.fixed(a),y1:o,x2:this.fixed(s-a),y2:o}))},e.prototype.setLineThickness=function(t,e,i){return.07!==t&&(i["stroke-thickness"]=this.fixed(t),"solid"!==e&&(i["stroke-dasharray"]=("dotted"===e?"0,":"")+this.fixed(2*t))),i},e.prototype.handleLabels=function(t,e,i){if(this.hasLabels){var s=this.labels,a=this.node.attributes.get("side");this.spaceLabels(),this.isTop?this.topTable(t,s,a):this.subTable(t,s,a,i)}},e.prototype.spaceLabels=function(){for(var t=this.adaptor,e=this.getBBox().h,i=this.getTableData().L,s=this.getRowHalfSpacing(),a=e-this.fLine,o=t.firstChild(this.labels),n=0;n<this.numRows;n++){var h=this.childNodes[n];if(h.node.isKind("mlabeledtr")){var r=h.childNodes[0];a-=s[n]+h.H,h.placeCell(r,{x:0,y:a,w:i,lSpace:0,rSpace:0,lLine:0,rLine:0}),a-=h.D+s[n+1]+this.rLines[n],o=t.next(o)}else a-=s[n]+h.H+h.D+s[n+1]+this.rLines[n]}},e.prototype.topTable=function(t,e,i){var s=this.adaptor,a=this.getBBox(),n=a.h,h=a.d,r=a.w,l=a.L,d=a.R,p=l+(this.pWidth||r)+d,f=this.getTableData().L,u=o(this.getPadAlignShift(i),3),c=u[1],g=u[2]+("right"===c?-p:"center"===c?-p/2:0)+l,m="matrix(1 0 0 -1 0 0)",x="scale("+this.jax.fixed(1e3*this.font.params.x_height/this.metrics.ex,2)+")",v="translate(0 "+this.fixed(n)+") "+m+" "+x,b=this.svg("svg",{"data-table":!0,preserveAspectRatio:"left"===c?"xMinYMid":"right"===c?"xMaxYMid":"xMidYMid",viewBox:[this.fixed(-g),this.fixed(-n),1,this.fixed(n+h)].join(" ")},[this.svg("g",{transform:m},s.childNodes(t))]);e=this.svg("svg",{"data-labels":!0,preserveAspectRatio:"left"===i?"xMinYMid":"xMaxYMid",viewBox:["left"===i?0:this.fixed(f),this.fixed(-n),1,this.fixed(n+h)].join(" ")},[e]),s.append(t,this.svg("g",{transform:v},[b,e])),this.place(-l,0,t)},e.prototype.subTable=function(t,e,i,s){var a=this.adaptor,o=this.getBBox(),n=o.w,h=o.L,r=o.R,l=h+(this.pWidth||n)+r,d=this.getTableData().L,p=this.getAlignShift()[0],f=Math.max(l,this.container.getWrapWidth(this.containerI));this.place("left"===i?("left"===p?0:"right"===p?l-f+s:(l-f)/2+s)-h:("left"===p?f:"right"===p?l+s:(f+l)/2+s)-h-d,0,e),a.append(t,e)},e.kind=l.MmlMtable.prototype.kind,e.styles={'g[data-mml-node="mtable"] > line[data-line]':{"stroke-width":"70px",fill:"none"},'g[data-mml-node="mtable"] > rect[data-frame]':{"stroke-width":"70px",fill:"none"},'g[data-mml-node="mtable"] > .mjx-dashed':{"stroke-dasharray":"140"},'g[data-mml-node="mtable"] > .mjx-dotted':{"stroke-linecap":"round","stroke-dasharray":"0,140"},'g[data-mml-node="mtable"] > g > svg':{overflow:"visible"}},e}(r.CommonMtableMixin(h.SVGWrapper));e.SVGmtable=d}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,