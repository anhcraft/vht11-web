(global.webpackChunkvht11=global.webpackChunkvht11||[]).push([["C:\\Users\\huynh\\IdeaProjects\\vht11\\node_modules\\@pixi\\graphics\\lib\\graphics.es"],{"./node_modules/@pixi/graphics/lib/graphics.es.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{FillStyle:()=>p,GRAPHICS_CURVES:()=>u,Graphics:()=>F,GraphicsData:()=>B,GraphicsGeometry:()=>U,LINE_CAP:()=>s,LINE_JOIN:()=>r,LineStyle:()=>j,graphicsUtils:()=>R});var r,s,n=i("./node_modules/@pixi/core/lib/core.es.js"),a=i("./node_modules/@pixi/math/lib/math.es.js"),h=i("./node_modules/@pixi/utils/lib/utils.es.js"),o=i("./node_modules/@pixi/constants/lib/constants.es.js"),l=i("./node_modules/@pixi/display/lib/display.es.js");!function(t){t.MITER="miter",t.BEVEL="bevel",t.ROUND="round"}(r||(r={})),function(t){t.BUTT="butt",t.ROUND="round",t.SQUARE="square"}(s||(s={}));var u={adaptive:!0,maxLength:10,minSegments:8,maxSegments:2048,epsilon:1e-4,_segmentsCount:function(t,e){if(void 0===e&&(e=20),!this.adaptive||!t||isNaN(t))return e;var i=Math.ceil(t/this.maxLength);return i<this.minSegments?i=this.minSegments:i>this.maxSegments&&(i=this.maxSegments),i}},p=function(){function t(){this.color=16777215,this.alpha=1,this.texture=n.Texture.WHITE,this.matrix=null,this.visible=!1,this.reset()}return t.prototype.clone=function(){var e=new t;return e.color=this.color,e.alpha=this.alpha,e.texture=this.texture,e.matrix=this.matrix,e.visible=this.visible,e},t.prototype.reset=function(){this.color=16777215,this.alpha=1,this.texture=n.Texture.WHITE,this.matrix=null,this.visible=!1},t.prototype.destroy=function(){this.texture=null,this.matrix=null},t}(),c=function(t,e){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function d(t,e){function i(){this.constructor=t}c(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var f={build:function(t){t.points=t.shape.points.slice()},triangulate:function(t,e){var i=t.points,r=t.holes,s=e.points,n=e.indices;if(i.length>=6){for(var a=[],o=0;o<r.length;o++){var l=r[o];a.push(i.length/2),i=i.concat(l.points)}var u=(0,h.earcut)(i,a,2);if(!u)return;var p=s.length/2;for(o=0;o<u.length;o+=3)n.push(u[o]+p),n.push(u[o+1]+p),n.push(u[o+2]+p);for(o=0;o<i.length;o++)s.push(i[o])}}},y={build:function(t){var e,i,r=t.shape,s=t.points,n=r.x,h=r.y;if(s.length=0,t.type===a.SHAPES.CIRC)e=r.radius,i=r.radius;else{var o=t.shape;e=o.width,i=o.height}if(0!==e&&0!==i){var l=Math.floor(30*Math.sqrt(r.radius))||Math.floor(15*Math.sqrt(e+i));l/=2.3;for(var u=2*Math.PI/l,p=0;p<l-.5;p++)s.push(n+Math.sin(-u*p)*e,h+Math.cos(-u*p)*i);s.push(s[0],s[1])}},triangulate:function(t,e){var i=t.points,r=e.points,s=e.indices,n=r.length/2,a=n,h=t.shape,o=t.matrix,l=h.x,u=h.y;r.push(t.matrix?o.a*l+o.c*u+o.tx:l,t.matrix?o.b*l+o.d*u+o.ty:u);for(var p=0;p<i.length;p+=2)r.push(i[p],i[p+1]),s.push(n++,a,n)}},g={build:function(t){var e=t.shape,i=e.x,r=e.y,s=e.width,n=e.height,a=t.points;a.length=0,a.push(i,r,i+s,r,i+s,r+n,i,r+n)},triangulate:function(t,e){var i=t.points,r=e.points,s=r.length/2;r.push(i[0],i[1],i[2],i[3],i[6],i[7],i[4],i[5]),e.indices.push(s,s+1,s+2,s+1,s+2,s+3)}};function v(t,e,i){return t+(e-t)*i}function b(t,e,i,r,s,n,a){void 0===a&&(a=[]);for(var h=a,o=0,l=0,u=0,p=0,c=0,d=0,f=0,y=0;f<=20;++f)o=v(t,i,y=f/20),l=v(e,r,y),u=v(i,s,y),p=v(r,n,y),c=v(o,u,y),d=v(l,p,y),h.push(c,d);return h}var m={build:function(t){var e=t.shape,i=t.points,r=e.x,s=e.y,n=e.width,a=e.height,h=Math.max(0,Math.min(e.radius,Math.min(n,a)/2));i.length=0,h?(b(r,s+h,r,s,r+h,s,i),b(r+n-h,s,r+n,s,r+n,s+h,i),b(r+n,s+a-h,r+n,s+a,r+n-h,s+a,i),b(r+h,s+a,r,s+a,r,s+a-h,i)):i.push(r,s,r+n,s,r+n,s+a,r,s+a)},triangulate:function(t,e){for(var i=t.points,r=e.points,s=e.indices,n=r.length/2,a=(0,h.earcut)(i,null,2),o=0,l=a.length;o<l;o+=3)s.push(a[o]+n),s.push(a[o+1]+n),s.push(a[o+2]+n);for(o=0,l=i.length;o<l;o++)r.push(i[o],i[++o])}};function x(t,e,i,r,s,n,a,h){var o,l;a?(o=r,l=-i):(o=-r,l=i);var u=t-i*s+o,p=e-r*s+l,c=t+i*n+o,d=e+r*n+l;return h.push(u,p),h.push(c,d),2}function _(t,e,i,r,s,n,a,h){var o=i-t,l=r-e,u=Math.atan2(o,l),p=Math.atan2(s-t,n-e);h&&u<p?u+=2*Math.PI:!h&&u>p&&(p+=2*Math.PI);var c=u,d=p-u,f=Math.abs(d),y=Math.sqrt(o*o+l*l),g=1+(15*f*Math.sqrt(y)/Math.PI>>0),v=d/g;if(c+=v,h){a.push(t,e),a.push(i,r);for(var b=1,m=c;b<g;b++,m+=v)a.push(t,e),a.push(t+Math.sin(m)*y,e+Math.cos(m)*y);a.push(t,e),a.push(s,n)}else{a.push(i,r),a.push(t,e);for(b=1,m=c;b<g;b++,m+=v)a.push(t+Math.sin(m)*y,e+Math.cos(m)*y),a.push(t,e);a.push(s,n),a.push(t,e)}return 2*g}function S(t,e){t.lineStyle.native?function(t,e){var i=0,r=t.shape,s=t.points||r.points,n=r.type!==a.SHAPES.POLY||r.closeStroke;if(0!==s.length){var h=e.points,o=e.indices,l=s.length/2,u=h.length/2,p=u;for(h.push(s[0],s[1]),i=1;i<l;i++)h.push(s[2*i],s[2*i+1]),o.push(p,p+1),p++;n&&o.push(p,u)}}(t,e):function(t,e){var i=t.shape,n=t.points||i.points.slice(),h=e.closePointEps;if(0!==n.length){var o=t.lineStyle,l=new a.Point(n[0],n[1]),p=new a.Point(n[n.length-2],n[n.length-1]),c=i.type!==a.SHAPES.POLY||i.closeStroke,d=Math.abs(l.x-p.x)<h&&Math.abs(l.y-p.y)<h;if(c){n=n.slice(),d&&(n.pop(),n.pop(),p.set(n[n.length-2],n[n.length-1]));var f=.5*(l.x+p.x),y=.5*(p.y+l.y);n.unshift(f,y),n.push(f,y)}var g=e.points,v=n.length/2,b=n.length,m=g.length/2,S=o.width/2,P=S*S,w=o.miterLimit*o.miterLimit,M=n[0],T=n[1],D=n[2],A=n[3],E=0,C=0,I=-(T-A),R=M-D,B=0,L=0,O=Math.sqrt(I*I+R*R);I/=O,R/=O,I*=S,R*=S;var U=o.alignment,j=2*(1-U),H=2*U;c||(o.cap===s.ROUND?b+=_(M-I*(j-H)*.5,T-R*(j-H)*.5,M-I*j,T-R*j,M+I*H,T+R*H,g,!0)+2:o.cap===s.SQUARE&&(b+=x(M,T,I,R,j,H,!0,g))),g.push(M-I*j,T-R*j),g.push(M+I*H,T+R*H);for(var N=1;N<v-1;++N){M=n[2*(N-1)],T=n[2*(N-1)+1],D=n[2*N],A=n[2*N+1],E=n[2*(N+1)],C=n[2*(N+1)+1],I=-(T-A),R=M-D,I/=O=Math.sqrt(I*I+R*R),R/=O,I*=S,R*=S,B=-(A-C),L=D-E,B/=O=Math.sqrt(B*B+L*L),L/=O,B*=S,L*=S;var F=D-M,k=T-A,z=D-E,q=C-A,G=k*z-q*F,W=G<0;if(Math.abs(G)<.1)g.push(D-I*j,A-R*j),g.push(D+I*H,A+R*H);else{var Y=(-I+M)*(-R+A)-(-I+D)*(-R+T),V=(-B+E)*(-L+A)-(-B+D)*(-L+C),Q=(F*V-z*Y)/G,X=(q*Y-k*V)/G,Z=(Q-D)*(Q-D)+(X-A)*(X-A),J=D+(Q-D)*j,K=A+(X-A)*j,$=D-(Q-D)*H,tt=A-(X-A)*H,et=W?j:H;Z<=Math.min(F*F+k*k,z*z+q*q)+et*et*P?o.join===r.BEVEL||Z/P>w?(W?(g.push(J,K),g.push(D+I*H,A+R*H),g.push(J,K),g.push(D+B*H,A+L*H)):(g.push(D-I*j,A-R*j),g.push($,tt),g.push(D-B*j,A-L*j),g.push($,tt)),b+=2):o.join===r.ROUND?W?(g.push(J,K),g.push(D+I*H,A+R*H),b+=_(D,A,D+I*H,A+R*H,D+B*H,A+L*H,g,!0)+4,g.push(J,K),g.push(D+B*H,A+L*H)):(g.push(D-I*j,A-R*j),g.push($,tt),b+=_(D,A,D-I*j,A-R*j,D-B*j,A-L*j,g,!1)+4,g.push(D-B*j,A-L*j),g.push($,tt)):(g.push(J,K),g.push($,tt)):(g.push(D-I*j,A-R*j),g.push(D+I*H,A+R*H),o.join===r.BEVEL||Z/P>w||(o.join===r.ROUND?b+=W?_(D,A,D+I*H,A+R*H,D+B*H,A+L*H,g,!0)+2:_(D,A,D-I*j,A-R*j,D-B*j,A-L*j,g,!1)+2:(W?(g.push($,tt),g.push($,tt)):(g.push(J,K),g.push(J,K)),b+=2)),g.push(D-B*j,A-L*j),g.push(D+B*H,A+L*H),b+=2)}}M=n[2*(v-2)],T=n[2*(v-2)+1],D=n[2*(v-1)],I=-(T-(A=n[2*(v-1)+1])),R=M-D,I/=O=Math.sqrt(I*I+R*R),R/=O,I*=S,R*=S,g.push(D-I*j,A-R*j),g.push(D+I*H,A+R*H),c||(o.cap===s.ROUND?b+=_(D-I*(j-H)*.5,A-R*(j-H)*.5,D-I*j,A-R*j,D+I*H,A+R*H,g,!1)+2:o.cap===s.SQUARE&&(b+=x(D,A,I,R,j,H,!1,g)));var it=e.indices,rt=u.epsilon*u.epsilon;for(N=m;N<b+m-2;++N)M=g[2*N],T=g[2*N+1],D=g[2*(N+1)],A=g[2*(N+1)+1],E=g[2*(N+2)],C=g[2*(N+2)+1],Math.abs(M*(A-C)+D*(C-T)+E*(T-A))<rt||it.push(N,N+1,N+2)}}(t,e)}var P,w=function(t){function e(e,i,r,s,n,h){void 0===h&&(h=0);n=n||s/2;for(var o=-1*Math.PI/2+h,l=2*r,u=a.PI_2/l,p=[],c=0;c<l;c++){var d=c%2?n:s,f=c*u+o;p.push(e+d*Math.cos(f),i+d*Math.sin(f))}return t.call(this,p)||this}return d(e,t),e}(a.Polygon),M=function(){function t(){}return t.curveTo=function(t,e,i,r,s,n){var a=n[n.length-2],h=n[n.length-1]-e,o=a-t,l=r-e,u=i-t,p=Math.abs(h*u-o*l);if(p<1e-8||0===s)return n[n.length-2]===t&&n[n.length-1]===e||n.push(t,e),null;var c=h*h+o*o,d=l*l+u*u,f=h*l+o*u,y=s*Math.sqrt(c)/p,g=s*Math.sqrt(d)/p,v=y*f/c,b=g*f/d,m=y*u+g*o,x=y*l+g*h,_=o*(g+v),S=h*(g+v),P=u*(y+b),w=l*(y+b);return{cx:m+t,cy:x+e,radius:s,startAngle:Math.atan2(S-x,_-m),endAngle:Math.atan2(w-x,P-m),anticlockwise:o*l>u*h}},t.arc=function(t,e,i,r,s,n,h,o,l){for(var p=h-n,c=u._segmentsCount(Math.abs(p)*s,40*Math.ceil(Math.abs(p)/a.PI_2)),d=p/(2*c),f=2*d,y=Math.cos(d),g=Math.sin(d),v=c-1,b=v%1/v,m=0;m<=v;++m){var x=d+n+f*(m+b*m),_=Math.cos(x),S=-Math.sin(x);l.push((y*_+g*S)*s+i,(y*-S+g*_)*s+r)}},t}(),T=function(){function t(){}return t.curveLength=function(t,e,i,r,s,n,a,h){for(var o=0,l=0,u=0,p=0,c=0,d=0,f=0,y=0,g=0,v=0,b=0,m=t,x=e,_=1;_<=10;++_)v=m-(y=(f=(d=(c=1-(l=_/10))*c)*c)*t+3*d*l*i+3*c*(u=l*l)*s+(p=u*l)*a),b=x-(g=f*e+3*d*l*r+3*c*u*n+p*h),m=y,x=g,o+=Math.sqrt(v*v+b*b);return o},t.curveTo=function(e,i,r,s,n,a,h){var o=h[h.length-2],l=h[h.length-1];h.length-=2;var p=u._segmentsCount(t.curveLength(o,l,e,i,r,s,n,a)),c=0,d=0,f=0,y=0,g=0;h.push(o,l);for(var v=1,b=0;v<=p;++v)f=(d=(c=1-(b=v/p))*c)*c,g=(y=b*b)*b,h.push(f*o+3*d*b*e+3*c*y*r+g*n,f*l+3*d*b*i+3*c*y*s+g*a)},t}(),D=function(){function t(){}return t.curveLength=function(t,e,i,r,s,n){var a=t-2*i+s,h=e-2*r+n,o=2*i-2*t,l=2*r-2*e,u=4*(a*a+h*h),p=4*(a*o+h*l),c=o*o+l*l,d=2*Math.sqrt(u+p+c),f=Math.sqrt(u),y=2*u*f,g=2*Math.sqrt(c),v=p/f;return(y*d+f*p*(d-g)+(4*c*u-p*p)*Math.log((2*f+v+d)/(v+g)))/(4*y)},t.curveTo=function(e,i,r,s,n){for(var a=n[n.length-2],h=n[n.length-1],o=u._segmentsCount(t.curveLength(a,h,e,i,r,s)),l=0,p=0,c=1;c<=o;++c){var d=c/o;l=a+(e-a)*d,p=h+(i-h)*d,n.push(l+(e+(r-e)*d-l)*d,p+(i+(s-i)*d-p)*d)}},t}(),A=function(){function t(){this.reset()}return t.prototype.begin=function(t,e,i){this.reset(),this.style=t,this.start=e,this.attribStart=i},t.prototype.end=function(t,e){this.attribSize=e-this.attribStart,this.size=t-this.start},t.prototype.reset=function(){this.style=null,this.size=0,this.start=0,this.attribStart=0,this.attribSize=0},t}(),E=((P={})[a.SHAPES.POLY]=f,P[a.SHAPES.CIRC]=y,P[a.SHAPES.ELIP]=y,P[a.SHAPES.RECT]=g,P[a.SHAPES.RREC]=m,P),C=[],I=[],R={buildPoly:f,buildCircle:y,buildRectangle:g,buildRoundedRectangle:m,FILL_COMMANDS:E,BATCH_POOL:C,DRAW_CALL_POOL:I,buildLine:S,Star:w,ArcUtils:M,BezierUtils:T,QuadraticUtils:D,BatchPart:A},B=function(){function t(t,e,i,r){void 0===e&&(e=null),void 0===i&&(i=null),void 0===r&&(r=null),this.shape=t,this.lineStyle=i,this.fillStyle=e,this.matrix=r,this.type=t.type,this.points=[],this.holes=[]}return t.prototype.clone=function(){return new t(this.shape,this.fillStyle,this.lineStyle,this.matrix)},t.prototype.destroy=function(){this.shape=null,this.holes.length=0,this.holes=null,this.points.length=0,this.points=null,this.lineStyle=null,this.fillStyle=null},t}(),L=new a.Point,O=new l.Bounds,U=function(t){function e(){var e=t.call(this)||this;return e.uvsFloat32=null,e.indicesUint16=null,e.points=[],e.colors=[],e.uvs=[],e.indices=[],e.textureIds=[],e.graphicsData=[],e.dirty=0,e.batchDirty=-1,e.cacheDirty=-1,e.clearDirty=0,e.drawCalls=[],e.batches=[],e.shapeIndex=0,e._bounds=new l.Bounds,e.boundsDirty=-1,e.boundsPadding=0,e.batchable=!1,e.indicesUint16=null,e.uvsFloat32=null,e.closePointEps=1e-4,e}return d(e,t),Object.defineProperty(e.prototype,"bounds",{get:function(){return this.boundsDirty!==this.dirty&&(this.boundsDirty=this.dirty,this.calculateBounds()),this._bounds},enumerable:!1,configurable:!0}),e.prototype.invalidate=function(){this.boundsDirty=-1,this.dirty++,this.batchDirty++,this.shapeIndex=0,this.points.length=0,this.colors.length=0,this.uvs.length=0,this.indices.length=0,this.textureIds.length=0;for(var t=0;t<this.drawCalls.length;t++)this.drawCalls[t].texArray.clear(),I.push(this.drawCalls[t]);this.drawCalls.length=0;for(t=0;t<this.batches.length;t++){var e=this.batches[t];e.reset(),C.push(e)}this.batches.length=0},e.prototype.clear=function(){return this.graphicsData.length>0&&(this.invalidate(),this.clearDirty++,this.graphicsData.length=0),this},e.prototype.drawShape=function(t,e,i,r){void 0===e&&(e=null),void 0===i&&(i=null),void 0===r&&(r=null);var s=new B(t,e,i,r);return this.graphicsData.push(s),this.dirty++,this},e.prototype.drawHole=function(t,e){if(void 0===e&&(e=null),!this.graphicsData.length)return null;var i=new B(t,null,null,e),r=this.graphicsData[this.graphicsData.length-1];return i.lineStyle=r.lineStyle,r.holes.push(i),this.dirty++,this},e.prototype.destroy=function(){t.prototype.destroy.call(this);for(var e=0;e<this.graphicsData.length;++e)this.graphicsData[e].destroy();this.points.length=0,this.points=null,this.colors.length=0,this.colors=null,this.uvs.length=0,this.uvs=null,this.indices.length=0,this.indices=null,this.indexBuffer.destroy(),this.indexBuffer=null,this.graphicsData.length=0,this.graphicsData=null,this.drawCalls.length=0,this.drawCalls=null,this.batches.length=0,this.batches=null,this._bounds=null},e.prototype.containsPoint=function(t){for(var e=this.graphicsData,i=0;i<e.length;++i){var r=e[i];if(r.fillStyle.visible&&(r.shape&&(r.matrix?r.matrix.applyInverse(t,L):L.copyFrom(t),r.shape.contains(L.x,L.y)))){var s=!1;if(r.holes)for(var n=0;n<r.holes.length;n++){if(r.holes[n].shape.contains(L.x,L.y)){s=!0;break}}if(!s)return!0}}return!1},e.prototype.updateBatches=function(t){if(this.graphicsData.length){if(this.validateBatching()){this.cacheDirty=this.dirty;var e=this.uvs,i=this.graphicsData,r=null,s=null;this.batches.length>0&&(s=(r=this.batches[this.batches.length-1]).style);for(var n=this.shapeIndex;n<i.length;n++){this.shapeIndex++;var a=i[n],h=a.fillStyle,l=a.lineStyle;E[a.type].build(a),a.matrix&&this.transformPoints(a.points,a.matrix);for(var u=0;u<2;u++){var p=0===u?h:l;if(p.visible){var c=p.texture.baseTexture,d=this.indices.length,f=this.points.length/2;c.wrapMode=o.WRAP_MODES.REPEAT,0===u?this.processFill(a):this.processLine(a);var y=this.points.length/2-f;0!==y&&(r&&!this._compareStyles(s,p)&&(r.end(d,f),r=null),r||((r=C.pop()||new A).begin(p,d,f),this.batches.push(r),s=p),this.addUvs(this.points,e,p.texture,f,y,p.matrix))}}}var g=this.indices.length,v=this.points.length/2;if(r&&r.end(g,v),0!==this.batches.length){if(this.indicesUint16&&this.indices.length===this.indicesUint16.length)this.indicesUint16.set(this.indices);else{var b=v>65535&&t;this.indicesUint16=b?new Uint32Array(this.indices):new Uint16Array(this.indices)}this.batchable=this.isBatchable(),this.batchable?this.packBatches():this.buildDrawCalls()}else this.batchable=!0}}else this.batchable=!0},e.prototype._compareStyles=function(t,e){return!(!t||!e)&&(t.texture.baseTexture===e.texture.baseTexture&&(t.color+t.alpha===e.color+e.alpha&&!!t.native==!!e.native))},e.prototype.validateBatching=function(){if(this.dirty===this.cacheDirty||!this.graphicsData.length)return!1;for(var t=0,e=this.graphicsData.length;t<e;t++){var i=this.graphicsData[t],r=i.fillStyle,s=i.lineStyle;if(r&&!r.texture.baseTexture.valid)return!1;if(s&&!s.texture.baseTexture.valid)return!1}return!0},e.prototype.packBatches=function(){this.batchDirty++,this.uvsFloat32=new Float32Array(this.uvs);for(var t=this.batches,e=0,i=t.length;e<i;e++)for(var r=t[e],s=0;s<r.size;s++){var n=r.start+s;this.indicesUint16[n]=this.indicesUint16[n]-r.attribStart}},e.prototype.isBatchable=function(){if(this.points.length>131070)return!1;for(var t=this.batches,i=0;i<t.length;i++)if(t[i].style.native)return!1;return this.points.length<2*e.BATCHABLE_SIZE},e.prototype.buildDrawCalls=function(){for(var t=++n.BaseTexture._globalBatch,e=0;e<this.drawCalls.length;e++)this.drawCalls[e].texArray.clear(),I.push(this.drawCalls[e]);this.drawCalls.length=0;var i=this.colors,r=this.textureIds,s=I.pop();s||((s=new n.BatchDrawCall).texArray=new n.BatchTextureArray),s.texArray.count=0,s.start=0,s.size=0,s.type=o.DRAW_MODES.TRIANGLES;var a=0,h=null,l=0,u=!1,p=o.DRAW_MODES.TRIANGLES,c=0;this.drawCalls.push(s);for(e=0;e<this.batches.length;e++){var d=this.batches[e],f=d.style,y=f.texture.baseTexture;u!==!!f.native&&(p=(u=!!f.native)?o.DRAW_MODES.LINES:o.DRAW_MODES.TRIANGLES,h=null,a=8,t++),h!==y&&(h=y,y._batchEnabled!==t&&(8===a&&(t++,a=0,s.size>0&&((s=I.pop())||((s=new n.BatchDrawCall).texArray=new n.BatchTextureArray),this.drawCalls.push(s)),s.start=c,s.size=0,s.texArray.count=0,s.type=p),y.touched=1,y._batchEnabled=t,y._batchLocation=a,y.wrapMode=10497,s.texArray.elements[s.texArray.count++]=y,a++)),s.size+=d.size,c+=d.size,l=y._batchLocation,this.addColors(i,f.color,f.alpha,d.attribSize),this.addTextureIds(r,l,d.attribSize)}n.BaseTexture._globalBatch=t,this.packAttributes()},e.prototype.packAttributes=function(){for(var t=this.points,e=this.uvs,i=this.colors,r=this.textureIds,s=new ArrayBuffer(3*t.length*4),n=new Float32Array(s),a=new Uint32Array(s),h=0,o=0;o<t.length/2;o++)n[h++]=t[2*o],n[h++]=t[2*o+1],n[h++]=e[2*o],n[h++]=e[2*o+1],a[h++]=i[o],n[h++]=r[o];this._buffer.update(s),this._indexBuffer.update(this.indicesUint16)},e.prototype.processFill=function(t){t.holes.length?(this.processHoles(t.holes),f.triangulate(t,this)):E[t.type].triangulate(t,this)},e.prototype.processLine=function(t){S(t,this);for(var e=0;e<t.holes.length;e++)S(t.holes[e],this)},e.prototype.processHoles=function(t){for(var e=0;e<t.length;e++){var i=t[e];E[i.type].build(i),i.matrix&&this.transformPoints(i.points,i.matrix)}},e.prototype.calculateBounds=function(){var t=this._bounds,e=O,i=a.Matrix.IDENTITY;this._bounds.clear(),e.clear();for(var r=0;r<this.graphicsData.length;r++){var s=this.graphicsData[r],n=s.shape,h=s.type,o=s.lineStyle,l=s.matrix||a.Matrix.IDENTITY,u=0;if(o&&o.visible){var p=o.alignment;u=o.width,h===a.SHAPES.POLY?u*=.5+Math.abs(.5-p):u*=Math.max(0,p)}if(i!==l&&(e.isEmpty()||(t.addBoundsMatrix(e,i),e.clear()),i=l),h===a.SHAPES.RECT||h===a.SHAPES.RREC){var c=n;e.addFramePad(c.x,c.y,c.x+c.width,c.y+c.height,u,u)}else if(h===a.SHAPES.CIRC){var d=n;e.addFramePad(d.x,d.y,d.x,d.y,d.radius+u,d.radius+u)}else if(h===a.SHAPES.ELIP){var f=n;e.addFramePad(f.x,f.y,f.x,f.y,f.width+u,f.height+u)}else{var y=n;t.addVerticesMatrix(i,y.points,0,y.points.length,u,u)}}e.isEmpty()||t.addBoundsMatrix(e,i),t.pad(this.boundsPadding,this.boundsPadding)},e.prototype.transformPoints=function(t,e){for(var i=0;i<t.length/2;i++){var r=t[2*i],s=t[2*i+1];t[2*i]=e.a*r+e.c*s+e.tx,t[2*i+1]=e.b*r+e.d*s+e.ty}},e.prototype.addColors=function(t,e,i,r){for(var s=(e>>16)+(65280&e)+((255&e)<<16),n=(0,h.premultiplyTint)(s,i);r-- >0;)t.push(n)},e.prototype.addTextureIds=function(t,e,i){for(;i-- >0;)t.push(e)},e.prototype.addUvs=function(t,e,i,r,s,n){void 0===n&&(n=null);for(var a=0,h=e.length,o=i.frame;a<s;){var l=t[2*(r+a)],u=t[2*(r+a)+1];if(n){var p=n.a*l+n.c*u+n.tx;u=n.b*l+n.d*u+n.ty,l=p}a++,e.push(l/o.width,u/o.height)}var c=i.baseTexture;(o.width<c.width||o.height<c.height)&&this.adjustUvs(e,i,h,s)},e.prototype.adjustUvs=function(t,e,i,r){for(var s=e.baseTexture,n=1e-6,a=i+2*r,h=e.frame,o=h.width/s.width,l=h.height/s.height,u=h.x/h.width,p=h.y/h.height,c=Math.floor(t[i]+n),d=Math.floor(t[i+1]+n),f=i+2;f<a;f+=2)c=Math.min(c,Math.floor(t[f]+n)),d=Math.min(d,Math.floor(t[f+1]+n));u-=c,p-=d;for(f=i;f<a;f+=2)t[f]=(t[f]+u)*o,t[f+1]=(t[f+1]+p)*l},e.BATCHABLE_SIZE=100,e}(n.BatchGeometry),j=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.width=0,e.alignment=.5,e.native=!1,e.cap=s.BUTT,e.join=r.MITER,e.miterLimit=10,e}return d(e,t),e.prototype.clone=function(){var t=new e;return t.color=this.color,t.alpha=this.alpha,t.texture=this.texture,t.matrix=this.matrix,t.visible=this.visible,t.width=this.width,t.alignment=this.alignment,t.native=this.native,t.cap=this.cap,t.join=this.join,t.miterLimit=this.miterLimit,t},e.prototype.reset=function(){t.prototype.reset.call(this),this.color=0,this.alignment=.5,this.width=0,this.native=!1},e}(p),H=new Float32Array(3),N={},F=function(t){function e(e){void 0===e&&(e=null);var i=t.call(this)||this;return i._geometry=e||new U,i._geometry.refCount++,i.shader=null,i.state=n.State.for2d(),i._fillStyle=new p,i._lineStyle=new j,i._matrix=null,i._holeMode=!1,i.currentPath=null,i.batches=[],i.batchTint=-1,i.batchDirty=-1,i.vertexData=null,i.pluginName="batch",i._transformID=-1,i.tint=16777215,i.blendMode=o.BLEND_MODES.NORMAL,i}return d(e,t),Object.defineProperty(e.prototype,"geometry",{get:function(){return this._geometry},enumerable:!1,configurable:!0}),e.prototype.clone=function(){return this.finishPoly(),new e(this._geometry)},Object.defineProperty(e.prototype,"blendMode",{get:function(){return this.state.blendMode},set:function(t){this.state.blendMode=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tint",{get:function(){return this._tint},set:function(t){this._tint=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"fill",{get:function(){return this._fillStyle},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"line",{get:function(){return this._lineStyle},enumerable:!1,configurable:!0}),e.prototype.lineStyle=function(t){if(void 0===t&&(t=null),"number"==typeof t){var e=arguments;t={width:e[0]||0,color:e[1]||0,alpha:void 0!==e[2]?e[2]:1,alignment:void 0!==e[3]?e[3]:.5,native:!!e[4]}}return this.lineTextureStyle(t)},e.prototype.lineTextureStyle=function(t){if("number"==typeof t){(0,h.deprecation)("v5.2.0","Please use object-based options for Graphics#lineTextureStyle");var e=arguments,i=e[0],a=e[1],o=e[2],l=e[3],u=e[4],p=e[5],c=e[6];t={width:i,texture:a,color:o,alpha:l,matrix:u,alignment:p,native:c},Object.keys(t).forEach((function(e){return void 0===t[e]&&delete t[e]}))}t=Object.assign({width:0,texture:n.Texture.WHITE,color:t&&t.texture?16777215:0,alpha:1,matrix:null,alignment:.5,native:!1,cap:s.BUTT,join:r.MITER,miterLimit:10},t),this.currentPath&&this.startPoly();var d=t.width>0&&t.alpha>0;return d?(t.matrix&&(t.matrix=t.matrix.clone(),t.matrix.invert()),Object.assign(this._lineStyle,{visible:d},t)):this._lineStyle.reset(),this},e.prototype.startPoly=function(){if(this.currentPath){var t=this.currentPath.points,e=this.currentPath.points.length;e>2&&(this.drawShape(this.currentPath),this.currentPath=new a.Polygon,this.currentPath.closeStroke=!1,this.currentPath.points.push(t[e-2],t[e-1]))}else this.currentPath=new a.Polygon,this.currentPath.closeStroke=!1},e.prototype.finishPoly=function(){this.currentPath&&(this.currentPath.points.length>2?(this.drawShape(this.currentPath),this.currentPath=null):this.currentPath.points.length=0)},e.prototype.moveTo=function(t,e){return this.startPoly(),this.currentPath.points[0]=t,this.currentPath.points[1]=e,this},e.prototype.lineTo=function(t,e){this.currentPath||this.moveTo(0,0);var i=this.currentPath.points,r=i[i.length-2],s=i[i.length-1];return r===t&&s===e||i.push(t,e),this},e.prototype._initCurve=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.currentPath?0===this.currentPath.points.length&&(this.currentPath.points=[t,e]):this.moveTo(t,e)},e.prototype.quadraticCurveTo=function(t,e,i,r){this._initCurve();var s=this.currentPath.points;return 0===s.length&&this.moveTo(0,0),D.curveTo(t,e,i,r,s),this},e.prototype.bezierCurveTo=function(t,e,i,r,s,n){return this._initCurve(),T.curveTo(t,e,i,r,s,n,this.currentPath.points),this},e.prototype.arcTo=function(t,e,i,r,s){this._initCurve(t,e);var n=this.currentPath.points,a=M.curveTo(t,e,i,r,s,n);if(a){var h=a.cx,o=a.cy,l=a.radius,u=a.startAngle,p=a.endAngle,c=a.anticlockwise;this.arc(h,o,l,u,p,c)}return this},e.prototype.arc=function(t,e,i,r,s,n){if(void 0===n&&(n=!1),r===s)return this;if(!n&&s<=r?s+=a.PI_2:n&&r<=s&&(r+=a.PI_2),0===s-r)return this;var h=t+Math.cos(r)*i,o=e+Math.sin(r)*i,l=this._geometry.closePointEps,u=this.currentPath?this.currentPath.points:null;if(u){var p=Math.abs(u[u.length-2]-h),c=Math.abs(u[u.length-1]-o);p<l&&c<l||u.push(h,o)}else this.moveTo(h,o),u=this.currentPath.points;return M.arc(h,o,t,e,i,r,s,n,u),this},e.prototype.beginFill=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=1),this.beginTextureFill({texture:n.Texture.WHITE,color:t,alpha:e})},e.prototype.beginTextureFill=function(t){if(t instanceof n.Texture){(0,h.deprecation)("v5.2.0","Please use object-based options for Graphics#beginTextureFill");var e=arguments,i=e[0],r=e[1],s=e[2],a=e[3];t={texture:i,color:r,alpha:s,matrix:a},Object.keys(t).forEach((function(e){return void 0===t[e]&&delete t[e]}))}t=Object.assign({texture:n.Texture.WHITE,color:16777215,alpha:1,matrix:null},t),this.currentPath&&this.startPoly();var o=t.alpha>0;return o?(t.matrix&&(t.matrix=t.matrix.clone(),t.matrix.invert()),Object.assign(this._fillStyle,{visible:o},t)):this._fillStyle.reset(),this},e.prototype.endFill=function(){return this.finishPoly(),this._fillStyle.reset(),this},e.prototype.drawRect=function(t,e,i,r){return this.drawShape(new a.Rectangle(t,e,i,r))},e.prototype.drawRoundedRect=function(t,e,i,r,s){return this.drawShape(new a.RoundedRectangle(t,e,i,r,s))},e.prototype.drawCircle=function(t,e,i){return this.drawShape(new a.Circle(t,e,i))},e.prototype.drawEllipse=function(t,e,i,r){return this.drawShape(new a.Ellipse(t,e,i,r))},e.prototype.drawPolygon=function(){for(var t,e=arguments,i=[],r=0;r<arguments.length;r++)i[r]=e[r];var s=!0,n=i[0];n.points?(s=n.closeStroke,t=n.points):t=Array.isArray(i[0])?i[0]:i;var h=new a.Polygon(t);return h.closeStroke=s,this.drawShape(h),this},e.prototype.drawShape=function(t){return this._holeMode?this._geometry.drawHole(t,this._matrix):this._geometry.drawShape(t,this._fillStyle.clone(),this._lineStyle.clone(),this._matrix),this},e.prototype.drawStar=function(t,e,i,r,s,n){return void 0===n&&(n=0),this.drawPolygon(new w(t,e,i,r,s,n))},e.prototype.clear=function(){return this._geometry.clear(),this._lineStyle.reset(),this._fillStyle.reset(),this._boundsID++,this._matrix=null,this._holeMode=!1,this.currentPath=null,this},e.prototype.isFastRect=function(){var t=this._geometry.graphicsData;return 1===t.length&&t[0].shape.type===a.SHAPES.RECT&&!(t[0].lineStyle.visible&&t[0].lineStyle.width)},e.prototype._render=function(t){this.finishPoly();var e=this._geometry,i=t.context.supports.uint32Indices;e.updateBatches(i),e.batchable?(this.batchDirty!==e.batchDirty&&this._populateBatches(),this._renderBatched(t)):(t.batch.flush(),this._renderDirect(t))},e.prototype._populateBatches=function(){var t=this._geometry,e=this.blendMode,i=t.batches.length;this.batchTint=-1,this._transformID=-1,this.batchDirty=t.batchDirty,this.batches.length=i,this.vertexData=new Float32Array(t.points);for(var r=0;r<i;r++){var s=t.batches[r],n=s.style.color,a=new Float32Array(this.vertexData.buffer,4*s.attribStart*2,2*s.attribSize),o=new Float32Array(t.uvsFloat32.buffer,4*s.attribStart*2,2*s.attribSize),l={vertexData:a,blendMode:e,indices:new Uint16Array(t.indicesUint16.buffer,2*s.start,s.size),uvs:o,_batchRGB:(0,h.hex2rgb)(n),_tintRGB:n,_texture:s.style.texture,alpha:s.style.alpha,worldAlpha:1};this.batches[r]=l}},e.prototype._renderBatched=function(t){if(this.batches.length){t.batch.setObjectRenderer(t.plugins[this.pluginName]),this.calculateVertices(),this.calculateTints();for(var e=0,i=this.batches.length;e<i;e++){var r=this.batches[e];r.worldAlpha=this.worldAlpha*r.alpha,t.plugins[this.pluginName].render(r)}}},e.prototype._renderDirect=function(t){var e=this._resolveDirectShader(t),i=this._geometry,r=this.tint,s=this.worldAlpha,n=e.uniforms,a=i.drawCalls;n.translationMatrix=this.transform.worldTransform,n.tint[0]=(r>>16&255)/255*s,n.tint[1]=(r>>8&255)/255*s,n.tint[2]=(255&r)/255*s,n.tint[3]=s,t.shader.bind(e),t.geometry.bind(i,e),t.state.set(this.state);for(var h=0,o=a.length;h<o;h++)this._renderDrawCallDirect(t,i.drawCalls[h])},e.prototype._renderDrawCallDirect=function(t,e){for(var i=e.texArray,r=e.type,s=e.size,n=e.start,a=i.count,h=0;h<a;h++)t.texture.bind(i.elements[h],h);t.geometry.draw(r,s,n)},e.prototype._resolveDirectShader=function(t){var e=this.shader,i=this.pluginName;if(!e){if(!N[i]){for(var r=t.plugins.batch.MAX_TEXTURES,s=new Int32Array(r),h=0;h<r;h++)s[h]=h;var o={tint:new Float32Array([1,1,1,1]),translationMatrix:new a.Matrix,default:n.UniformGroup.from({uSamplers:s},!0)},l=t.plugins[i]._shader.program;N[i]=new n.Shader(l,o)}e=N[i]}return e},e.prototype._calculateBounds=function(){this.finishPoly();var t=this._geometry;if(t.graphicsData.length){var e=t.bounds,i=e.minX,r=e.minY,s=e.maxX,n=e.maxY;this._bounds.addFrame(this.transform,i,r,s,n)}},e.prototype.containsPoint=function(t){return this.worldTransform.applyInverse(t,e._TEMP_POINT),this._geometry.containsPoint(e._TEMP_POINT)},e.prototype.calculateTints=function(){if(this.batchTint!==this.tint){this.batchTint=this.tint;for(var t=(0,h.hex2rgb)(this.tint,H),e=0;e<this.batches.length;e++){var i=this.batches[e],r=i._batchRGB,s=(t[0]*r[0]*255<<16)+(t[1]*r[1]*255<<8)+(0|t[2]*r[2]*255);i._tintRGB=(s>>16)+(65280&s)+((255&s)<<16)}}},e.prototype.calculateVertices=function(){var t=this.transform._worldID;if(this._transformID!==t){this._transformID=t;for(var e=this.transform.worldTransform,i=e.a,r=e.b,s=e.c,n=e.d,a=e.tx,h=e.ty,o=this._geometry.points,l=this.vertexData,u=0,p=0;p<o.length;p+=2){var c=o[p],d=o[p+1];l[u++]=i*c+s*d+a,l[u++]=n*d+r*c+h}}},e.prototype.closePath=function(){var t=this.currentPath;return t&&(t.closeStroke=!0),this},e.prototype.setMatrix=function(t){return this._matrix=t,this},e.prototype.beginHole=function(){return this.finishPoly(),this._holeMode=!0,this},e.prototype.endHole=function(){return this.finishPoly(),this._holeMode=!1,this},e.prototype.destroy=function(e){this._geometry.refCount--,0===this._geometry.refCount&&this._geometry.dispose(),this._matrix=null,this.currentPath=null,this._lineStyle.destroy(),this._lineStyle=null,this._fillStyle.destroy(),this._fillStyle=null,this._geometry=null,this.shader=null,this.vertexData=null,this.batches.length=0,this.batches=null,t.prototype.destroy.call(this,e)},e._TEMP_POINT=new a.Point,e}(l.Container)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,